
STM32F103_Si5351_Synth.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c68  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002120  08004d78  08004d78  00014d78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e98  08006e98  00020030  2**0
                  CONTENTS
  4 .ARM          00000008  08006e98  08006e98  00016e98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006ea0  08006ea0  00020030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ea0  08006ea0  00016ea0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006ea4  08006ea4  00016ea4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000030  20000000  08006ea8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000540  20000030  08006ed8  00020030  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000570  08006ed8  00020570  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dab5  00000000  00000000  00020059  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e10  00000000  00000000  0002db0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d10  00000000  00000000  0002f920  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c48  00000000  00000000  00030630  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017d43  00000000  00000000  00031278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fa97  00000000  00000000  00048fbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b54c  00000000  00000000  00058a52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e3f9e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003808  00000000  00000000  000e3ff4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000030 	.word	0x20000030
 800012c:	00000000 	.word	0x00000000
 8000130:	08004d60 	.word	0x08004d60

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000034 	.word	0x20000034
 800014c:	08004d60 	.word	0x08004d60

08000150 <__aeabi_ldivmod>:
 8000150:	b97b      	cbnz	r3, 8000172 <__aeabi_ldivmod+0x22>
 8000152:	b972      	cbnz	r2, 8000172 <__aeabi_ldivmod+0x22>
 8000154:	2900      	cmp	r1, #0
 8000156:	bfbe      	ittt	lt
 8000158:	2000      	movlt	r0, #0
 800015a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800015e:	e006      	blt.n	800016e <__aeabi_ldivmod+0x1e>
 8000160:	bf08      	it	eq
 8000162:	2800      	cmpeq	r0, #0
 8000164:	bf1c      	itt	ne
 8000166:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 800016a:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800016e:	f000 b9b9 	b.w	80004e4 <__aeabi_idiv0>
 8000172:	f1ad 0c08 	sub.w	ip, sp, #8
 8000176:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800017a:	2900      	cmp	r1, #0
 800017c:	db09      	blt.n	8000192 <__aeabi_ldivmod+0x42>
 800017e:	2b00      	cmp	r3, #0
 8000180:	db1a      	blt.n	80001b8 <__aeabi_ldivmod+0x68>
 8000182:	f000 f84d 	bl	8000220 <__udivmoddi4>
 8000186:	f8dd e004 	ldr.w	lr, [sp, #4]
 800018a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800018e:	b004      	add	sp, #16
 8000190:	4770      	bx	lr
 8000192:	4240      	negs	r0, r0
 8000194:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000198:	2b00      	cmp	r3, #0
 800019a:	db1b      	blt.n	80001d4 <__aeabi_ldivmod+0x84>
 800019c:	f000 f840 	bl	8000220 <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4240      	negs	r0, r0
 80001ac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001b0:	4252      	negs	r2, r2
 80001b2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001b6:	4770      	bx	lr
 80001b8:	4252      	negs	r2, r2
 80001ba:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001be:	f000 f82f 	bl	8000220 <__udivmoddi4>
 80001c2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001ca:	b004      	add	sp, #16
 80001cc:	4240      	negs	r0, r0
 80001ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001d2:	4770      	bx	lr
 80001d4:	4252      	negs	r2, r2
 80001d6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001da:	f000 f821 	bl	8000220 <__udivmoddi4>
 80001de:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001e2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001e6:	b004      	add	sp, #16
 80001e8:	4252      	negs	r2, r2
 80001ea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001ee:	4770      	bx	lr

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000200:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000204:	f000 b96e 	b.w	80004e4 <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9e08      	ldr	r6, [sp, #32]
 8000226:	460d      	mov	r5, r1
 8000228:	4604      	mov	r4, r0
 800022a:	468e      	mov	lr, r1
 800022c:	2b00      	cmp	r3, #0
 800022e:	f040 8083 	bne.w	8000338 <__udivmoddi4+0x118>
 8000232:	428a      	cmp	r2, r1
 8000234:	4617      	mov	r7, r2
 8000236:	d947      	bls.n	80002c8 <__udivmoddi4+0xa8>
 8000238:	fab2 f382 	clz	r3, r2
 800023c:	b14b      	cbz	r3, 8000252 <__udivmoddi4+0x32>
 800023e:	f1c3 0120 	rsb	r1, r3, #32
 8000242:	fa05 fe03 	lsl.w	lr, r5, r3
 8000246:	fa20 f101 	lsr.w	r1, r0, r1
 800024a:	409f      	lsls	r7, r3
 800024c:	ea41 0e0e 	orr.w	lr, r1, lr
 8000250:	409c      	lsls	r4, r3
 8000252:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000256:	fbbe fcf8 	udiv	ip, lr, r8
 800025a:	fa1f f987 	uxth.w	r9, r7
 800025e:	fb08 e21c 	mls	r2, r8, ip, lr
 8000262:	fb0c f009 	mul.w	r0, ip, r9
 8000266:	0c21      	lsrs	r1, r4, #16
 8000268:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 800026c:	4290      	cmp	r0, r2
 800026e:	d90a      	bls.n	8000286 <__udivmoddi4+0x66>
 8000270:	18ba      	adds	r2, r7, r2
 8000272:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 8000276:	f080 8118 	bcs.w	80004aa <__udivmoddi4+0x28a>
 800027a:	4290      	cmp	r0, r2
 800027c:	f240 8115 	bls.w	80004aa <__udivmoddi4+0x28a>
 8000280:	f1ac 0c02 	sub.w	ip, ip, #2
 8000284:	443a      	add	r2, r7
 8000286:	1a12      	subs	r2, r2, r0
 8000288:	fbb2 f0f8 	udiv	r0, r2, r8
 800028c:	fb08 2210 	mls	r2, r8, r0, r2
 8000290:	fb00 f109 	mul.w	r1, r0, r9
 8000294:	b2a4      	uxth	r4, r4
 8000296:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800029a:	42a1      	cmp	r1, r4
 800029c:	d909      	bls.n	80002b2 <__udivmoddi4+0x92>
 800029e:	193c      	adds	r4, r7, r4
 80002a0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002a4:	f080 8103 	bcs.w	80004ae <__udivmoddi4+0x28e>
 80002a8:	42a1      	cmp	r1, r4
 80002aa:	f240 8100 	bls.w	80004ae <__udivmoddi4+0x28e>
 80002ae:	3802      	subs	r0, #2
 80002b0:	443c      	add	r4, r7
 80002b2:	1a64      	subs	r4, r4, r1
 80002b4:	2100      	movs	r1, #0
 80002b6:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80002ba:	b11e      	cbz	r6, 80002c4 <__udivmoddi4+0xa4>
 80002bc:	2200      	movs	r2, #0
 80002be:	40dc      	lsrs	r4, r3
 80002c0:	e9c6 4200 	strd	r4, r2, [r6]
 80002c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c8:	b902      	cbnz	r2, 80002cc <__udivmoddi4+0xac>
 80002ca:	deff      	udf	#255	; 0xff
 80002cc:	fab2 f382 	clz	r3, r2
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d14f      	bne.n	8000374 <__udivmoddi4+0x154>
 80002d4:	1a8d      	subs	r5, r1, r2
 80002d6:	2101      	movs	r1, #1
 80002d8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80002dc:	fa1f f882 	uxth.w	r8, r2
 80002e0:	fbb5 fcfe 	udiv	ip, r5, lr
 80002e4:	fb0e 551c 	mls	r5, lr, ip, r5
 80002e8:	fb08 f00c 	mul.w	r0, r8, ip
 80002ec:	0c22      	lsrs	r2, r4, #16
 80002ee:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 80002f2:	42a8      	cmp	r0, r5
 80002f4:	d907      	bls.n	8000306 <__udivmoddi4+0xe6>
 80002f6:	197d      	adds	r5, r7, r5
 80002f8:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
 80002fc:	d202      	bcs.n	8000304 <__udivmoddi4+0xe4>
 80002fe:	42a8      	cmp	r0, r5
 8000300:	f200 80e9 	bhi.w	80004d6 <__udivmoddi4+0x2b6>
 8000304:	4694      	mov	ip, r2
 8000306:	1a2d      	subs	r5, r5, r0
 8000308:	fbb5 f0fe 	udiv	r0, r5, lr
 800030c:	fb0e 5510 	mls	r5, lr, r0, r5
 8000310:	fb08 f800 	mul.w	r8, r8, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800031a:	45a0      	cmp	r8, r4
 800031c:	d907      	bls.n	800032e <__udivmoddi4+0x10e>
 800031e:	193c      	adds	r4, r7, r4
 8000320:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000324:	d202      	bcs.n	800032c <__udivmoddi4+0x10c>
 8000326:	45a0      	cmp	r8, r4
 8000328:	f200 80d9 	bhi.w	80004de <__udivmoddi4+0x2be>
 800032c:	4610      	mov	r0, r2
 800032e:	eba4 0408 	sub.w	r4, r4, r8
 8000332:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000336:	e7c0      	b.n	80002ba <__udivmoddi4+0x9a>
 8000338:	428b      	cmp	r3, r1
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x12e>
 800033c:	2e00      	cmp	r6, #0
 800033e:	f000 80b1 	beq.w	80004a4 <__udivmoddi4+0x284>
 8000342:	2100      	movs	r1, #0
 8000344:	e9c6 0500 	strd	r0, r5, [r6]
 8000348:	4608      	mov	r0, r1
 800034a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034e:	fab3 f183 	clz	r1, r3
 8000352:	2900      	cmp	r1, #0
 8000354:	d14b      	bne.n	80003ee <__udivmoddi4+0x1ce>
 8000356:	42ab      	cmp	r3, r5
 8000358:	d302      	bcc.n	8000360 <__udivmoddi4+0x140>
 800035a:	4282      	cmp	r2, r0
 800035c:	f200 80b9 	bhi.w	80004d2 <__udivmoddi4+0x2b2>
 8000360:	1a84      	subs	r4, r0, r2
 8000362:	eb65 0303 	sbc.w	r3, r5, r3
 8000366:	2001      	movs	r0, #1
 8000368:	469e      	mov	lr, r3
 800036a:	2e00      	cmp	r6, #0
 800036c:	d0aa      	beq.n	80002c4 <__udivmoddi4+0xa4>
 800036e:	e9c6 4e00 	strd	r4, lr, [r6]
 8000372:	e7a7      	b.n	80002c4 <__udivmoddi4+0xa4>
 8000374:	409f      	lsls	r7, r3
 8000376:	f1c3 0220 	rsb	r2, r3, #32
 800037a:	40d1      	lsrs	r1, r2
 800037c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000380:	fbb1 f0fe 	udiv	r0, r1, lr
 8000384:	fa1f f887 	uxth.w	r8, r7
 8000388:	fb0e 1110 	mls	r1, lr, r0, r1
 800038c:	fa24 f202 	lsr.w	r2, r4, r2
 8000390:	409d      	lsls	r5, r3
 8000392:	fb00 fc08 	mul.w	ip, r0, r8
 8000396:	432a      	orrs	r2, r5
 8000398:	0c15      	lsrs	r5, r2, #16
 800039a:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 800039e:	45ac      	cmp	ip, r5
 80003a0:	fa04 f403 	lsl.w	r4, r4, r3
 80003a4:	d909      	bls.n	80003ba <__udivmoddi4+0x19a>
 80003a6:	197d      	adds	r5, r7, r5
 80003a8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003ac:	f080 808f 	bcs.w	80004ce <__udivmoddi4+0x2ae>
 80003b0:	45ac      	cmp	ip, r5
 80003b2:	f240 808c 	bls.w	80004ce <__udivmoddi4+0x2ae>
 80003b6:	3802      	subs	r0, #2
 80003b8:	443d      	add	r5, r7
 80003ba:	eba5 050c 	sub.w	r5, r5, ip
 80003be:	fbb5 f1fe 	udiv	r1, r5, lr
 80003c2:	fb0e 5c11 	mls	ip, lr, r1, r5
 80003c6:	fb01 f908 	mul.w	r9, r1, r8
 80003ca:	b295      	uxth	r5, r2
 80003cc:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80003d0:	45a9      	cmp	r9, r5
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x1c4>
 80003d4:	197d      	adds	r5, r7, r5
 80003d6:	f101 32ff 	add.w	r2, r1, #4294967295	; 0xffffffff
 80003da:	d274      	bcs.n	80004c6 <__udivmoddi4+0x2a6>
 80003dc:	45a9      	cmp	r9, r5
 80003de:	d972      	bls.n	80004c6 <__udivmoddi4+0x2a6>
 80003e0:	3902      	subs	r1, #2
 80003e2:	443d      	add	r5, r7
 80003e4:	eba5 0509 	sub.w	r5, r5, r9
 80003e8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80003ec:	e778      	b.n	80002e0 <__udivmoddi4+0xc0>
 80003ee:	f1c1 0720 	rsb	r7, r1, #32
 80003f2:	408b      	lsls	r3, r1
 80003f4:	fa22 fc07 	lsr.w	ip, r2, r7
 80003f8:	ea4c 0c03 	orr.w	ip, ip, r3
 80003fc:	fa25 f407 	lsr.w	r4, r5, r7
 8000400:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000404:	fbb4 f9fe 	udiv	r9, r4, lr
 8000408:	fa1f f88c 	uxth.w	r8, ip
 800040c:	fb0e 4419 	mls	r4, lr, r9, r4
 8000410:	fa20 f307 	lsr.w	r3, r0, r7
 8000414:	fb09 fa08 	mul.w	sl, r9, r8
 8000418:	408d      	lsls	r5, r1
 800041a:	431d      	orrs	r5, r3
 800041c:	0c2b      	lsrs	r3, r5, #16
 800041e:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000422:	45a2      	cmp	sl, r4
 8000424:	fa02 f201 	lsl.w	r2, r2, r1
 8000428:	fa00 f301 	lsl.w	r3, r0, r1
 800042c:	d909      	bls.n	8000442 <__udivmoddi4+0x222>
 800042e:	eb1c 0404 	adds.w	r4, ip, r4
 8000432:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000436:	d248      	bcs.n	80004ca <__udivmoddi4+0x2aa>
 8000438:	45a2      	cmp	sl, r4
 800043a:	d946      	bls.n	80004ca <__udivmoddi4+0x2aa>
 800043c:	f1a9 0902 	sub.w	r9, r9, #2
 8000440:	4464      	add	r4, ip
 8000442:	eba4 040a 	sub.w	r4, r4, sl
 8000446:	fbb4 f0fe 	udiv	r0, r4, lr
 800044a:	fb0e 4410 	mls	r4, lr, r0, r4
 800044e:	fb00 fa08 	mul.w	sl, r0, r8
 8000452:	b2ad      	uxth	r5, r5
 8000454:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000458:	45a2      	cmp	sl, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x24e>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000464:	d22d      	bcs.n	80004c2 <__udivmoddi4+0x2a2>
 8000466:	45a2      	cmp	sl, r4
 8000468:	d92b      	bls.n	80004c2 <__udivmoddi4+0x2a2>
 800046a:	3802      	subs	r0, #2
 800046c:	4464      	add	r4, ip
 800046e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000472:	fba0 8902 	umull	r8, r9, r0, r2
 8000476:	eba4 040a 	sub.w	r4, r4, sl
 800047a:	454c      	cmp	r4, r9
 800047c:	46c6      	mov	lr, r8
 800047e:	464d      	mov	r5, r9
 8000480:	d319      	bcc.n	80004b6 <__udivmoddi4+0x296>
 8000482:	d016      	beq.n	80004b2 <__udivmoddi4+0x292>
 8000484:	b15e      	cbz	r6, 800049e <__udivmoddi4+0x27e>
 8000486:	ebb3 020e 	subs.w	r2, r3, lr
 800048a:	eb64 0405 	sbc.w	r4, r4, r5
 800048e:	fa04 f707 	lsl.w	r7, r4, r7
 8000492:	fa22 f301 	lsr.w	r3, r2, r1
 8000496:	431f      	orrs	r7, r3
 8000498:	40cc      	lsrs	r4, r1
 800049a:	e9c6 7400 	strd	r7, r4, [r6]
 800049e:	2100      	movs	r1, #0
 80004a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004a4:	4631      	mov	r1, r6
 80004a6:	4630      	mov	r0, r6
 80004a8:	e70c      	b.n	80002c4 <__udivmoddi4+0xa4>
 80004aa:	468c      	mov	ip, r1
 80004ac:	e6eb      	b.n	8000286 <__udivmoddi4+0x66>
 80004ae:	4610      	mov	r0, r2
 80004b0:	e6ff      	b.n	80002b2 <__udivmoddi4+0x92>
 80004b2:	4543      	cmp	r3, r8
 80004b4:	d2e6      	bcs.n	8000484 <__udivmoddi4+0x264>
 80004b6:	ebb8 0e02 	subs.w	lr, r8, r2
 80004ba:	eb69 050c 	sbc.w	r5, r9, ip
 80004be:	3801      	subs	r0, #1
 80004c0:	e7e0      	b.n	8000484 <__udivmoddi4+0x264>
 80004c2:	4628      	mov	r0, r5
 80004c4:	e7d3      	b.n	800046e <__udivmoddi4+0x24e>
 80004c6:	4611      	mov	r1, r2
 80004c8:	e78c      	b.n	80003e4 <__udivmoddi4+0x1c4>
 80004ca:	4681      	mov	r9, r0
 80004cc:	e7b9      	b.n	8000442 <__udivmoddi4+0x222>
 80004ce:	4608      	mov	r0, r1
 80004d0:	e773      	b.n	80003ba <__udivmoddi4+0x19a>
 80004d2:	4608      	mov	r0, r1
 80004d4:	e749      	b.n	800036a <__udivmoddi4+0x14a>
 80004d6:	f1ac 0c02 	sub.w	ip, ip, #2
 80004da:	443d      	add	r5, r7
 80004dc:	e713      	b.n	8000306 <__udivmoddi4+0xe6>
 80004de:	3802      	subs	r0, #2
 80004e0:	443c      	add	r4, r7
 80004e2:	e724      	b.n	800032e <__udivmoddi4+0x10e>

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <getEncoderDir>:
static void MX_I2C1_Init(void);
static void MX_TIM2_Init(void);
/* USER CODE BEGIN PFP */
uint32_t encoderValue = 0;
ENCODER_DIRECTION_TYPE getEncoderDir(void)
{
 80004e8:	b480      	push	{r7}
 80004ea:	b083      	sub	sp, #12
 80004ec:	af00      	add	r7, sp, #0
	ENCODER_DIRECTION_TYPE tmpDir = DIRECTION_NONE;
 80004ee:	2300      	movs	r3, #0
 80004f0:	71fb      	strb	r3, [r7, #7]
	static uint8_t cntTick = 0;

	if ( encoderValue != ENCODER_TIM.Instance->CNT && ( cntTick < 4 )) {
 80004f2:	4b18      	ldr	r3, [pc, #96]	; (8000554 <getEncoderDir+0x6c>)
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80004f8:	4b17      	ldr	r3, [pc, #92]	; (8000558 <getEncoderDir+0x70>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	429a      	cmp	r2, r3
 80004fe:	d022      	beq.n	8000546 <getEncoderDir+0x5e>
 8000500:	4b16      	ldr	r3, [pc, #88]	; (800055c <getEncoderDir+0x74>)
 8000502:	781b      	ldrb	r3, [r3, #0]
 8000504:	2b03      	cmp	r3, #3
 8000506:	d81e      	bhi.n	8000546 <getEncoderDir+0x5e>
		tmpDir = (encoderValue < ENCODER_TIM.Instance->CNT) ? DIRECTION_UP : DIRECTION_DOWN;
 8000508:	4b12      	ldr	r3, [pc, #72]	; (8000554 <getEncoderDir+0x6c>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800050e:	4b12      	ldr	r3, [pc, #72]	; (8000558 <getEncoderDir+0x70>)
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	429a      	cmp	r2, r3
 8000514:	d901      	bls.n	800051a <getEncoderDir+0x32>
 8000516:	2301      	movs	r3, #1
 8000518:	e000      	b.n	800051c <getEncoderDir+0x34>
 800051a:	2302      	movs	r3, #2
 800051c:	71fb      	strb	r3, [r7, #7]
		cntTick++;
 800051e:	4b0f      	ldr	r3, [pc, #60]	; (800055c <getEncoderDir+0x74>)
 8000520:	781b      	ldrb	r3, [r3, #0]
 8000522:	3301      	adds	r3, #1
 8000524:	b2da      	uxtb	r2, r3
 8000526:	4b0d      	ldr	r3, [pc, #52]	; (800055c <getEncoderDir+0x74>)
 8000528:	701a      	strb	r2, [r3, #0]
		encoderValue = ENCODER_TIM.Instance->CNT;
 800052a:	4b0a      	ldr	r3, [pc, #40]	; (8000554 <getEncoderDir+0x6c>)
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000530:	4a09      	ldr	r2, [pc, #36]	; (8000558 <getEncoderDir+0x70>)
 8000532:	6013      	str	r3, [r2, #0]

		if ( cntTick == 4 ) {
 8000534:	4b09      	ldr	r3, [pc, #36]	; (800055c <getEncoderDir+0x74>)
 8000536:	781b      	ldrb	r3, [r3, #0]
 8000538:	2b04      	cmp	r3, #4
 800053a:	d104      	bne.n	8000546 <getEncoderDir+0x5e>
			cntTick = 0;
 800053c:	4b07      	ldr	r3, [pc, #28]	; (800055c <getEncoderDir+0x74>)
 800053e:	2200      	movs	r2, #0
 8000540:	701a      	strb	r2, [r3, #0]
			return tmpDir;
 8000542:	79fb      	ldrb	r3, [r7, #7]
 8000544:	e000      	b.n	8000548 <getEncoderDir+0x60>
		}
	}
	return DIRECTION_NONE;
 8000546:	2300      	movs	r3, #0
}
 8000548:	4618      	mov	r0, r3
 800054a:	370c      	adds	r7, #12
 800054c:	46bd      	mov	sp, r7
 800054e:	bc80      	pop	{r7}
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop
 8000554:	200004cc 	.word	0x200004cc
 8000558:	20000050 	.word	0x20000050
 800055c:	20000059 	.word	0x20000059

08000560 <printRfFrequency>:

void printRfFrequency(uint32_t frequency) {
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]

	itoa(frequency/100, buff, 10);
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	4a22      	ldr	r2, [pc, #136]	; (80005f4 <printRfFrequency+0x94>)
 800056c:	fba2 2303 	umull	r2, r3, r2, r3
 8000570:	095b      	lsrs	r3, r3, #5
 8000572:	220a      	movs	r2, #10
 8000574:	4920      	ldr	r1, [pc, #128]	; (80005f8 <printRfFrequency+0x98>)
 8000576:	4618      	mov	r0, r3
 8000578:	f004 fba6 	bl	8004cc8 <itoa>
	ssd1306_SetCursor(1, 0);
 800057c:	2100      	movs	r1, #0
 800057e:	2001      	movs	r0, #1
 8000580:	f000 fdf6 	bl	8001170 <ssd1306_SetCursor>

	if ( frequency >= 10000000 ) {
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	4a1d      	ldr	r2, [pc, #116]	; (80005fc <printRfFrequency+0x9c>)
 8000588:	4293      	cmp	r3, r2
 800058a:	d307      	bcc.n	800059c <printRfFrequency+0x3c>
		buff[6] = buff[5];
 800058c:	4b1a      	ldr	r3, [pc, #104]	; (80005f8 <printRfFrequency+0x98>)
 800058e:	795a      	ldrb	r2, [r3, #5]
 8000590:	4b19      	ldr	r3, [pc, #100]	; (80005f8 <printRfFrequency+0x98>)
 8000592:	719a      	strb	r2, [r3, #6]
		buff[5] = '.';
 8000594:	4b18      	ldr	r3, [pc, #96]	; (80005f8 <printRfFrequency+0x98>)
 8000596:	222e      	movs	r2, #46	; 0x2e
 8000598:	715a      	strb	r2, [r3, #5]
 800059a:	e01b      	b.n	80005d4 <printRfFrequency+0x74>
	}
	else if (frequency < 1000000) {
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	4a18      	ldr	r2, [pc, #96]	; (8000600 <printRfFrequency+0xa0>)
 80005a0:	4293      	cmp	r3, r2
 80005a2:	d80d      	bhi.n	80005c0 <printRfFrequency+0x60>
		buff[4] = buff[3];
 80005a4:	4b14      	ldr	r3, [pc, #80]	; (80005f8 <printRfFrequency+0x98>)
 80005a6:	78da      	ldrb	r2, [r3, #3]
 80005a8:	4b13      	ldr	r3, [pc, #76]	; (80005f8 <printRfFrequency+0x98>)
 80005aa:	711a      	strb	r2, [r3, #4]
		buff[3] = '.';
 80005ac:	4b12      	ldr	r3, [pc, #72]	; (80005f8 <printRfFrequency+0x98>)
 80005ae:	222e      	movs	r2, #46	; 0x2e
 80005b0:	70da      	strb	r2, [r3, #3]
		buff[5] = ' ';
 80005b2:	4b11      	ldr	r3, [pc, #68]	; (80005f8 <printRfFrequency+0x98>)
 80005b4:	2220      	movs	r2, #32
 80005b6:	715a      	strb	r2, [r3, #5]
		buff[6] = ' ';
 80005b8:	4b0f      	ldr	r3, [pc, #60]	; (80005f8 <printRfFrequency+0x98>)
 80005ba:	2220      	movs	r2, #32
 80005bc:	719a      	strb	r2, [r3, #6]
 80005be:	e009      	b.n	80005d4 <printRfFrequency+0x74>
	}
	else {
		buff[5] = buff[4];
 80005c0:	4b0d      	ldr	r3, [pc, #52]	; (80005f8 <printRfFrequency+0x98>)
 80005c2:	791a      	ldrb	r2, [r3, #4]
 80005c4:	4b0c      	ldr	r3, [pc, #48]	; (80005f8 <printRfFrequency+0x98>)
 80005c6:	715a      	strb	r2, [r3, #5]
		buff[4] = '.';
 80005c8:	4b0b      	ldr	r3, [pc, #44]	; (80005f8 <printRfFrequency+0x98>)
 80005ca:	222e      	movs	r2, #46	; 0x2e
 80005cc:	711a      	strb	r2, [r3, #4]
		buff[6] = ' ';
 80005ce:	4b0a      	ldr	r3, [pc, #40]	; (80005f8 <printRfFrequency+0x98>)
 80005d0:	2220      	movs	r2, #32
 80005d2:	719a      	strb	r2, [r3, #6]
	}

	buff[7] = 0;
 80005d4:	4b08      	ldr	r3, [pc, #32]	; (80005f8 <printRfFrequency+0x98>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	71da      	strb	r2, [r3, #7]
	buff[12] = 0;*/

	/*itoa(frequency, buff, 10);
	ssd1306_SetCursor(1, 0);*/

	ssd1306_WriteString(buff, Font_16x26, White);
 80005da:	4a0a      	ldr	r2, [pc, #40]	; (8000604 <printRfFrequency+0xa4>)
 80005dc:	2301      	movs	r3, #1
 80005de:	ca06      	ldmia	r2, {r1, r2}
 80005e0:	4805      	ldr	r0, [pc, #20]	; (80005f8 <printRfFrequency+0x98>)
 80005e2:	f000 fd9f 	bl	8001124 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 80005e6:	f000 fc8d 	bl	8000f04 <ssd1306_UpdateScreen>
}
 80005ea:	bf00      	nop
 80005ec:	3708      	adds	r7, #8
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	51eb851f 	.word	0x51eb851f
 80005f8:	200004b8 	.word	0x200004b8
 80005fc:	00989680 	.word	0x00989680
 8000600:	000f423f 	.word	0x000f423f
 8000604:	20000020 	.word	0x20000020

08000608 <showTuningStep>:

void showTuningStep(void) {
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
	ssd1306_SetCursor(65, 45);
 800060c:	212d      	movs	r1, #45	; 0x2d
 800060e:	2041      	movs	r0, #65	; 0x41
 8000610:	f000 fdae 	bl	8001170 <ssd1306_SetCursor>
		buff[4] = 0;
	}

	ssd1306_WriteString(buff, Font_11x18, White);*/

	if ( stepBuf[stepBufIdx] == 100 ) {
 8000614:	4b29      	ldr	r3, [pc, #164]	; (80006bc <showTuningStep+0xb4>)
 8000616:	781b      	ldrb	r3, [r3, #0]
 8000618:	461a      	mov	r2, r3
 800061a:	4b29      	ldr	r3, [pc, #164]	; (80006c0 <showTuningStep+0xb8>)
 800061c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000620:	2b64      	cmp	r3, #100	; 0x64
 8000622:	d106      	bne.n	8000632 <showTuningStep+0x2a>
		ssd1306_WriteString("100 ", Font_11x18, White);
 8000624:	4a27      	ldr	r2, [pc, #156]	; (80006c4 <showTuningStep+0xbc>)
 8000626:	2301      	movs	r3, #1
 8000628:	ca06      	ldmia	r2, {r1, r2}
 800062a:	4827      	ldr	r0, [pc, #156]	; (80006c8 <showTuningStep+0xc0>)
 800062c:	f000 fd7a 	bl	8001124 <ssd1306_WriteString>
 8000630:	e03f      	b.n	80006b2 <showTuningStep+0xaa>
	}
	else if ( stepBuf[stepBufIdx] == 500 ) {
 8000632:	4b22      	ldr	r3, [pc, #136]	; (80006bc <showTuningStep+0xb4>)
 8000634:	781b      	ldrb	r3, [r3, #0]
 8000636:	461a      	mov	r2, r3
 8000638:	4b21      	ldr	r3, [pc, #132]	; (80006c0 <showTuningStep+0xb8>)
 800063a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800063e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000642:	d106      	bne.n	8000652 <showTuningStep+0x4a>
		ssd1306_WriteString("500 ", Font_11x18, White);
 8000644:	4a1f      	ldr	r2, [pc, #124]	; (80006c4 <showTuningStep+0xbc>)
 8000646:	2301      	movs	r3, #1
 8000648:	ca06      	ldmia	r2, {r1, r2}
 800064a:	4820      	ldr	r0, [pc, #128]	; (80006cc <showTuningStep+0xc4>)
 800064c:	f000 fd6a 	bl	8001124 <ssd1306_WriteString>
 8000650:	e02f      	b.n	80006b2 <showTuningStep+0xaa>
	}
	else if ( stepBuf[stepBufIdx] == 1000 ) {
 8000652:	4b1a      	ldr	r3, [pc, #104]	; (80006bc <showTuningStep+0xb4>)
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	461a      	mov	r2, r3
 8000658:	4b19      	ldr	r3, [pc, #100]	; (80006c0 <showTuningStep+0xb8>)
 800065a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800065e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000662:	d106      	bne.n	8000672 <showTuningStep+0x6a>
		ssd1306_WriteString("1k  ", Font_11x18, White);
 8000664:	4a17      	ldr	r2, [pc, #92]	; (80006c4 <showTuningStep+0xbc>)
 8000666:	2301      	movs	r3, #1
 8000668:	ca06      	ldmia	r2, {r1, r2}
 800066a:	4819      	ldr	r0, [pc, #100]	; (80006d0 <showTuningStep+0xc8>)
 800066c:	f000 fd5a 	bl	8001124 <ssd1306_WriteString>
 8000670:	e01f      	b.n	80006b2 <showTuningStep+0xaa>
	}
	else if ( stepBuf[stepBufIdx] == 10000 ) {
 8000672:	4b12      	ldr	r3, [pc, #72]	; (80006bc <showTuningStep+0xb4>)
 8000674:	781b      	ldrb	r3, [r3, #0]
 8000676:	461a      	mov	r2, r3
 8000678:	4b11      	ldr	r3, [pc, #68]	; (80006c0 <showTuningStep+0xb8>)
 800067a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800067e:	f242 7210 	movw	r2, #10000	; 0x2710
 8000682:	4293      	cmp	r3, r2
 8000684:	d106      	bne.n	8000694 <showTuningStep+0x8c>
		ssd1306_WriteString("10k ", Font_11x18, White);
 8000686:	4a0f      	ldr	r2, [pc, #60]	; (80006c4 <showTuningStep+0xbc>)
 8000688:	2301      	movs	r3, #1
 800068a:	ca06      	ldmia	r2, {r1, r2}
 800068c:	4811      	ldr	r0, [pc, #68]	; (80006d4 <showTuningStep+0xcc>)
 800068e:	f000 fd49 	bl	8001124 <ssd1306_WriteString>
 8000692:	e00e      	b.n	80006b2 <showTuningStep+0xaa>
	}
	else if ( stepBuf[stepBufIdx] == 100000 ) {
 8000694:	4b09      	ldr	r3, [pc, #36]	; (80006bc <showTuningStep+0xb4>)
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	461a      	mov	r2, r3
 800069a:	4b09      	ldr	r3, [pc, #36]	; (80006c0 <showTuningStep+0xb8>)
 800069c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80006a0:	4a0d      	ldr	r2, [pc, #52]	; (80006d8 <showTuningStep+0xd0>)
 80006a2:	4293      	cmp	r3, r2
 80006a4:	d105      	bne.n	80006b2 <showTuningStep+0xaa>
		ssd1306_WriteString("100k", Font_11x18, White);
 80006a6:	4a07      	ldr	r2, [pc, #28]	; (80006c4 <showTuningStep+0xbc>)
 80006a8:	2301      	movs	r3, #1
 80006aa:	ca06      	ldmia	r2, {r1, r2}
 80006ac:	480b      	ldr	r0, [pc, #44]	; (80006dc <showTuningStep+0xd4>)
 80006ae:	f000 fd39 	bl	8001124 <ssd1306_WriteString>
	}
	ssd1306_UpdateScreen();
 80006b2:	f000 fc27 	bl	8000f04 <ssd1306_UpdateScreen>
}
 80006b6:	bf00      	nop
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	2000004c 	.word	0x2000004c
 80006c0:	20000000 	.word	0x20000000
 80006c4:	20000018 	.word	0x20000018
 80006c8:	08004d78 	.word	0x08004d78
 80006cc:	08004d80 	.word	0x08004d80
 80006d0:	08004d88 	.word	0x08004d88
 80006d4:	08004d90 	.word	0x08004d90
 80006d8:	000186a0 	.word	0x000186a0
 80006dc:	08004d98 	.word	0x08004d98

080006e0 <isEncoderKeyPressed>:
#define NUMBER_TICK_KEY_WAIT	20000

unsigned int countDelayKey = 0;
uint8_t keyPressed = 0;

bool isEncoderKeyPressed() {
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0

		if ( !keyPressed ) {
 80006e4:	4b1e      	ldr	r3, [pc, #120]	; (8000760 <isEncoderKeyPressed+0x80>)
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d109      	bne.n	8000700 <isEncoderKeyPressed+0x20>
			if ( (Enkoder_Key_GPIO_Port->IDR & Enkoder_Key_Pin) == 0 ) {
 80006ec:	4b1d      	ldr	r3, [pc, #116]	; (8000764 <isEncoderKeyPressed+0x84>)
 80006ee:	689b      	ldr	r3, [r3, #8]
 80006f0:	f003 0301 	and.w	r3, r3, #1
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d12e      	bne.n	8000756 <isEncoderKeyPressed+0x76>
				keyPressed = 1;
 80006f8:	4b19      	ldr	r3, [pc, #100]	; (8000760 <isEncoderKeyPressed+0x80>)
 80006fa:	2201      	movs	r2, #1
 80006fc:	701a      	strb	r2, [r3, #0]
 80006fe:	e02a      	b.n	8000756 <isEncoderKeyPressed+0x76>
			}
		}
		else if ( countDelayKey < NUMBER_TICK_KEY_WAIT ) {
 8000700:	4b19      	ldr	r3, [pc, #100]	; (8000768 <isEncoderKeyPressed+0x88>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000708:	4293      	cmp	r3, r2
 800070a:	d824      	bhi.n	8000756 <isEncoderKeyPressed+0x76>
			countDelayKey++;
 800070c:	4b16      	ldr	r3, [pc, #88]	; (8000768 <isEncoderKeyPressed+0x88>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	3301      	adds	r3, #1
 8000712:	4a15      	ldr	r2, [pc, #84]	; (8000768 <isEncoderKeyPressed+0x88>)
 8000714:	6013      	str	r3, [r2, #0]
			if( countDelayKey == NUMBER_TICK_KEY_WAIT ) {
 8000716:	4b14      	ldr	r3, [pc, #80]	; (8000768 <isEncoderKeyPressed+0x88>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	f644 6220 	movw	r2, #20000	; 0x4e20
 800071e:	4293      	cmp	r3, r2
 8000720:	d10d      	bne.n	800073e <isEncoderKeyPressed+0x5e>
				if ( (Enkoder_Key_GPIO_Port->IDR & Enkoder_Key_Pin) == 0 ) {
 8000722:	4b10      	ldr	r3, [pc, #64]	; (8000764 <isEncoderKeyPressed+0x84>)
 8000724:	689b      	ldr	r3, [r3, #8]
 8000726:	f003 0301 	and.w	r3, r3, #1
 800072a:	2b00      	cmp	r3, #0
 800072c:	d107      	bne.n	800073e <isEncoderKeyPressed+0x5e>
					//HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
					keyPressed = 0;
 800072e:	4b0c      	ldr	r3, [pc, #48]	; (8000760 <isEncoderKeyPressed+0x80>)
 8000730:	2200      	movs	r2, #0
 8000732:	701a      	strb	r2, [r3, #0]
					countDelayKey = 0;
 8000734:	4b0c      	ldr	r3, [pc, #48]	; (8000768 <isEncoderKeyPressed+0x88>)
 8000736:	2200      	movs	r2, #0
 8000738:	601a      	str	r2, [r3, #0]
					return true;
 800073a:	2301      	movs	r3, #1
 800073c:	e00c      	b.n	8000758 <isEncoderKeyPressed+0x78>
				}
			}

			if( countDelayKey >= NUMBER_TICK_KEY_WAIT ) {
 800073e:	4b0a      	ldr	r3, [pc, #40]	; (8000768 <isEncoderKeyPressed+0x88>)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000746:	4293      	cmp	r3, r2
 8000748:	d905      	bls.n	8000756 <isEncoderKeyPressed+0x76>
				keyPressed = 0;
 800074a:	4b05      	ldr	r3, [pc, #20]	; (8000760 <isEncoderKeyPressed+0x80>)
 800074c:	2200      	movs	r2, #0
 800074e:	701a      	strb	r2, [r3, #0]
				countDelayKey = 0;
 8000750:	4b05      	ldr	r3, [pc, #20]	; (8000768 <isEncoderKeyPressed+0x88>)
 8000752:	2200      	movs	r2, #0
 8000754:	601a      	str	r2, [r3, #0]
			}
		}
		return false;
 8000756:	2300      	movs	r3, #0
}
 8000758:	4618      	mov	r0, r3
 800075a:	46bd      	mov	sp, r7
 800075c:	bc80      	pop	{r7}
 800075e:	4770      	bx	lr
 8000760:	20000058 	.word	0x20000058
 8000764:	40010c00 	.word	0x40010c00
 8000768:	20000054 	.word	0x20000054
 800076c:	00000000 	.word	0x00000000

08000770 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000770:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000774:	b08c      	sub	sp, #48	; 0x30
 8000776:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	  ENCODER_DIRECTION_TYPE encoderDir;
	  uint32_t pll_frequency = START_FREQUENCY;	//17700000;
 8000778:	4b7f      	ldr	r3, [pc, #508]	; (8000978 <main+0x208>)
 800077a:	627b      	str	r3, [r7, #36]	; 0x24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800077c:	f000 fd10 	bl	80011a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000780:	f000 f90a 	bl	8000998 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000784:	f000 f9d0 	bl	8000b28 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000788:	f000 f94c 	bl	8000a24 <MX_I2C1_Init>
  MX_TIM2_Init();
 800078c:	f000 f978 	bl	8000a80 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  ssd1306_Init();
 8000790:	f000 fb2a 	bl	8000de8 <ssd1306_Init>
    /*ssd1306_SetCursor(5, 0);
    ssd1306_WriteString("Step: 100", Font_11x18, White);
    ssd1306_UpdateScreen();*/
  showTuningStep();
 8000794:	f7ff ff38 	bl	8000608 <showTuningStep>

    //uint32_t xt_freq = SI5351_XTAL_FREQ;
    //Si5351RegSet pll_reg;
    Si5351_init(SI5351_CRYSTAL_LOAD_8PF, SI5351_XTAL_FREQ);
 8000798:	4978      	ldr	r1, [pc, #480]	; (800097c <main+0x20c>)
 800079a:	2080      	movs	r0, #128	; 0x80
 800079c:	f002 ff4e 	bl	800363c <Si5351_init>
    Si5351_set_pll(SI5351_PLL_FIXED, SI5351_PLLA);
 80007a0:	2200      	movs	r2, #0
 80007a2:	a173      	add	r1, pc, #460	; (adr r1, 8000970 <main+0x200>)
 80007a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80007a8:	f003 fe80 	bl	80044ac <Si5351_set_pll>
    Si5351_set_freq(((pll_frequency + INTERMEDIATE_FREQUENCY)* SI5351_FREQ_MULT), SI5351_PLL_FIXED, SI5351_CLK0);
 80007ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80007ae:	4b74      	ldr	r3, [pc, #464]	; (8000980 <main+0x210>)
 80007b0:	4413      	add	r3, r2
 80007b2:	461c      	mov	r4, r3
 80007b4:	f04f 0500 	mov.w	r5, #0
 80007b8:	4622      	mov	r2, r4
 80007ba:	462b      	mov	r3, r5
 80007bc:	eb12 0802 	adds.w	r8, r2, r2
 80007c0:	eb43 0903 	adc.w	r9, r3, r3
 80007c4:	4642      	mov	r2, r8
 80007c6:	464b      	mov	r3, r9
 80007c8:	1912      	adds	r2, r2, r4
 80007ca:	eb45 0303 	adc.w	r3, r5, r3
 80007ce:	f04f 0000 	mov.w	r0, #0
 80007d2:	f04f 0100 	mov.w	r1, #0
 80007d6:	0159      	lsls	r1, r3, #5
 80007d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80007dc:	0150      	lsls	r0, r2, #5
 80007de:	1812      	adds	r2, r2, r0
 80007e0:	eb41 0303 	adc.w	r3, r1, r3
 80007e4:	eb12 0a04 	adds.w	sl, r2, r4
 80007e8:	eb43 0b05 	adc.w	fp, r3, r5
 80007ec:	2300      	movs	r3, #0
 80007ee:	9300      	str	r3, [sp, #0]
 80007f0:	a35f      	add	r3, pc, #380	; (adr r3, 8000970 <main+0x200>)
 80007f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80007f6:	4650      	mov	r0, sl
 80007f8:	4659      	mov	r1, fp
 80007fa:	f003 f995 	bl	8003b28 <Si5351_set_freq>
    Si5351_drive_strength(SI5351_CLK0, SI5351_DRIVE_2MA);
 80007fe:	2100      	movs	r1, #0
 8000800:	2000      	movs	r0, #0
 8000802:	f004 f935 	bl	8004a70 <Si5351_drive_strength>

  //  Si5351_set_pll(SI5351_PLL_FIXED, SI5351_PLLB);
  //  Si5351_set_freq(((pll_frequency)* SI5351_FREQ_MULT), SI5351_PLL_FIXED, SI5351_CLK1);
  //  Si5351_drive_strength(SI5351_CLK1, SI5351_DRIVE_2MA);

    Si5351_set_state_out(SI5351_CLK1, SI5351_OUT_DISABLE);
 8000806:	2100      	movs	r1, #0
 8000808:	2001      	movs	r0, #1
 800080a:	f004 f97f 	bl	8004b0c <Si5351_set_state_out>
    Si5351_set_state_out(SI5351_CLK2, SI5351_OUT_DISABLE);
 800080e:	2100      	movs	r1, #0
 8000810:	2002      	movs	r0, #2
 8000812:	f004 f97b 	bl	8004b0c <Si5351_set_state_out>

    printRfFrequency(pll_frequency);
 8000816:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000818:	f7ff fea2 	bl	8000560 <printRfFrequency>

    HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 800081c:	213c      	movs	r1, #60	; 0x3c
 800081e:	4859      	ldr	r0, [pc, #356]	; (8000984 <main+0x214>)
 8000820:	f002 fd9a 	bl	8003358 <HAL_TIM_Encoder_Start>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000824:	2201      	movs	r2, #1
 8000826:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800082a:	4857      	ldr	r0, [pc, #348]	; (8000988 <main+0x218>)
 800082c:	f000 ffa6 	bl	800177c <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  encoderDir = getEncoderDir();
 8000830:	f7ff fe5a 	bl	80004e8 <getEncoderDir>
 8000834:	4603      	mov	r3, r0
 8000836:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	  		if ( encoderDir == DIRECTION_UP ) {
 800083a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800083e:	2b01      	cmp	r3, #1
 8000840:	d135      	bne.n	80008ae <main+0x13e>
	  			pll_frequency = pll_frequency + stepBuf[stepBufIdx];
 8000842:	4b52      	ldr	r3, [pc, #328]	; (800098c <main+0x21c>)
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	461a      	mov	r2, r3
 8000848:	4b51      	ldr	r3, [pc, #324]	; (8000990 <main+0x220>)
 800084a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800084e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000850:	4413      	add	r3, r2
 8000852:	627b      	str	r3, [r7, #36]	; 0x24
	  			//si5351aSetFrequency(pll_frequency);
	  			Si5351_set_freq(((pll_frequency + INTERMEDIATE_FREQUENCY)* SI5351_FREQ_MULT), SI5351_PLL_FIXED, SI5351_CLK0);
 8000854:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000856:	4b4a      	ldr	r3, [pc, #296]	; (8000980 <main+0x210>)
 8000858:	4413      	add	r3, r2
 800085a:	461c      	mov	r4, r3
 800085c:	f04f 0500 	mov.w	r5, #0
 8000860:	4622      	mov	r2, r4
 8000862:	462b      	mov	r3, r5
 8000864:	1891      	adds	r1, r2, r2
 8000866:	60b9      	str	r1, [r7, #8]
 8000868:	415b      	adcs	r3, r3
 800086a:	60fb      	str	r3, [r7, #12]
 800086c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000870:	1912      	adds	r2, r2, r4
 8000872:	eb45 0303 	adc.w	r3, r5, r3
 8000876:	f04f 0000 	mov.w	r0, #0
 800087a:	f04f 0100 	mov.w	r1, #0
 800087e:	0159      	lsls	r1, r3, #5
 8000880:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8000884:	0150      	lsls	r0, r2, #5
 8000886:	1812      	adds	r2, r2, r0
 8000888:	eb41 0303 	adc.w	r3, r1, r3
 800088c:	1911      	adds	r1, r2, r4
 800088e:	61b9      	str	r1, [r7, #24]
 8000890:	416b      	adcs	r3, r5
 8000892:	61fb      	str	r3, [r7, #28]
 8000894:	2300      	movs	r3, #0
 8000896:	9300      	str	r3, [sp, #0]
 8000898:	a335      	add	r3, pc, #212	; (adr r3, 8000970 <main+0x200>)
 800089a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800089e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80008a2:	f003 f941 	bl	8003b28 <Si5351_set_freq>
	  			printRfFrequency(pll_frequency);
 80008a6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80008a8:	f7ff fe5a 	bl	8000560 <printRfFrequency>
 80008ac:	e046      	b.n	800093c <main+0x1cc>
	  		}
	  		else if ( encoderDir == DIRECTION_DOWN ) {
 80008ae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80008b2:	2b02      	cmp	r3, #2
 80008b4:	d142      	bne.n	800093c <main+0x1cc>
	  			if (pll_frequency > 0 && (pll_frequency - stepBuf[stepBufIdx]) >= 100000) {
 80008b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d03f      	beq.n	800093c <main+0x1cc>
 80008bc:	4b33      	ldr	r3, [pc, #204]	; (800098c <main+0x21c>)
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	461a      	mov	r2, r3
 80008c2:	4b33      	ldr	r3, [pc, #204]	; (8000990 <main+0x220>)
 80008c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80008ca:	1ad3      	subs	r3, r2, r3
 80008cc:	4a31      	ldr	r2, [pc, #196]	; (8000994 <main+0x224>)
 80008ce:	4293      	cmp	r3, r2
 80008d0:	d934      	bls.n	800093c <main+0x1cc>
					pll_frequency = pll_frequency - stepBuf[stepBufIdx];
 80008d2:	4b2e      	ldr	r3, [pc, #184]	; (800098c <main+0x21c>)
 80008d4:	781b      	ldrb	r3, [r3, #0]
 80008d6:	461a      	mov	r2, r3
 80008d8:	4b2d      	ldr	r3, [pc, #180]	; (8000990 <main+0x220>)
 80008da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80008e0:	1ad3      	subs	r3, r2, r3
 80008e2:	627b      	str	r3, [r7, #36]	; 0x24
					//si5351aSetFrequency(pll_frequency);
					Si5351_set_freq(((pll_frequency + INTERMEDIATE_FREQUENCY)* SI5351_FREQ_MULT), SI5351_PLL_FIXED, SI5351_CLK0);
 80008e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80008e6:	4b26      	ldr	r3, [pc, #152]	; (8000980 <main+0x210>)
 80008e8:	4413      	add	r3, r2
 80008ea:	461c      	mov	r4, r3
 80008ec:	f04f 0500 	mov.w	r5, #0
 80008f0:	4622      	mov	r2, r4
 80008f2:	462b      	mov	r3, r5
 80008f4:	1891      	adds	r1, r2, r2
 80008f6:	6039      	str	r1, [r7, #0]
 80008f8:	415b      	adcs	r3, r3
 80008fa:	607b      	str	r3, [r7, #4]
 80008fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000900:	1912      	adds	r2, r2, r4
 8000902:	eb45 0303 	adc.w	r3, r5, r3
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 0100 	mov.w	r1, #0
 800090e:	0159      	lsls	r1, r3, #5
 8000910:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8000914:	0150      	lsls	r0, r2, #5
 8000916:	1812      	adds	r2, r2, r0
 8000918:	eb41 0303 	adc.w	r3, r1, r3
 800091c:	1911      	adds	r1, r2, r4
 800091e:	6139      	str	r1, [r7, #16]
 8000920:	416b      	adcs	r3, r5
 8000922:	617b      	str	r3, [r7, #20]
 8000924:	2300      	movs	r3, #0
 8000926:	9300      	str	r3, [sp, #0]
 8000928:	a311      	add	r3, pc, #68	; (adr r3, 8000970 <main+0x200>)
 800092a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800092e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000932:	f003 f8f9 	bl	8003b28 <Si5351_set_freq>
					printRfFrequency(pll_frequency);
 8000936:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000938:	f7ff fe12 	bl	8000560 <printRfFrequency>
	  			}
	  		}
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  		if ( isEncoderKeyPressed() ) {
 800093c:	f7ff fed0 	bl	80006e0 <isEncoderKeyPressed>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	f43f af74 	beq.w	8000830 <main+0xc0>
	  			//HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
	  			if ( stepBufIdx < STEP_BUF_SIZE ) {
 8000948:	4b10      	ldr	r3, [pc, #64]	; (800098c <main+0x21c>)
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	2b04      	cmp	r3, #4
 800094e:	d80c      	bhi.n	800096a <main+0x1fa>
	  				stepBufIdx++;
 8000950:	4b0e      	ldr	r3, [pc, #56]	; (800098c <main+0x21c>)
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	3301      	adds	r3, #1
 8000956:	b2da      	uxtb	r2, r3
 8000958:	4b0c      	ldr	r3, [pc, #48]	; (800098c <main+0x21c>)
 800095a:	701a      	strb	r2, [r3, #0]
	  				if ( stepBufIdx == STEP_BUF_SIZE )
 800095c:	4b0b      	ldr	r3, [pc, #44]	; (800098c <main+0x21c>)
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	2b05      	cmp	r3, #5
 8000962:	d102      	bne.n	800096a <main+0x1fa>
	  				{
	  					stepBufIdx = 0;
 8000964:	4b09      	ldr	r3, [pc, #36]	; (800098c <main+0x21c>)
 8000966:	2200      	movs	r2, #0
 8000968:	701a      	strb	r2, [r3, #0]
	  				}
	  			}
	  			showTuningStep();
 800096a:	f7ff fe4d 	bl	8000608 <showTuningStep>
	  encoderDir = getEncoderDir();
 800096e:	e75f      	b.n	8000830 <main+0xc0>
 8000970:	a05f2000 	.word	0xa05f2000
 8000974:	00000012 	.word	0x00000012
 8000978:	006acfc0 	.word	0x006acfc0
 800097c:	017d7840 	.word	0x017d7840
 8000980:	00a344e0 	.word	0x00a344e0
 8000984:	200004cc 	.word	0x200004cc
 8000988:	40011000 	.word	0x40011000
 800098c:	2000004c 	.word	0x2000004c
 8000990:	20000000 	.word	0x20000000
 8000994:	0001869f 	.word	0x0001869f

08000998 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b090      	sub	sp, #64	; 0x40
 800099c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800099e:	f107 0318 	add.w	r3, r7, #24
 80009a2:	2228      	movs	r2, #40	; 0x28
 80009a4:	2100      	movs	r1, #0
 80009a6:	4618      	mov	r0, r3
 80009a8:	f004 f990 	bl	8004ccc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009ac:	1d3b      	adds	r3, r7, #4
 80009ae:	2200      	movs	r2, #0
 80009b0:	601a      	str	r2, [r3, #0]
 80009b2:	605a      	str	r2, [r3, #4]
 80009b4:	609a      	str	r2, [r3, #8]
 80009b6:	60da      	str	r2, [r3, #12]
 80009b8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009ba:	2301      	movs	r3, #1
 80009bc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009c2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 80009c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80009c8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009ca:	2301      	movs	r3, #1
 80009cc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009ce:	2302      	movs	r3, #2
 80009d0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009d6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80009d8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80009dc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009de:	f107 0318 	add.w	r3, r7, #24
 80009e2:	4618      	mov	r0, r3
 80009e4:	f002 f810 	bl	8002a08 <HAL_RCC_OscConfig>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <SystemClock_Config+0x5a>
  {
    Error_Handler();
 80009ee:	f000 f8dd 	bl	8000bac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009f2:	230f      	movs	r3, #15
 80009f4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009f6:	2302      	movs	r3, #2
 80009f8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009fa:	2300      	movs	r3, #0
 80009fc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009fe:	2300      	movs	r3, #0
 8000a00:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a02:	2300      	movs	r3, #0
 8000a04:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a06:	1d3b      	adds	r3, r7, #4
 8000a08:	2100      	movs	r1, #0
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f002 fa7c 	bl	8002f08 <HAL_RCC_ClockConfig>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000a16:	f000 f8c9 	bl	8000bac <Error_Handler>
  }
}
 8000a1a:	bf00      	nop
 8000a1c:	3740      	adds	r7, #64	; 0x40
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
	...

08000a24 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a28:	4b12      	ldr	r3, [pc, #72]	; (8000a74 <MX_I2C1_Init+0x50>)
 8000a2a:	4a13      	ldr	r2, [pc, #76]	; (8000a78 <MX_I2C1_Init+0x54>)
 8000a2c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000a2e:	4b11      	ldr	r3, [pc, #68]	; (8000a74 <MX_I2C1_Init+0x50>)
 8000a30:	4a12      	ldr	r2, [pc, #72]	; (8000a7c <MX_I2C1_Init+0x58>)
 8000a32:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a34:	4b0f      	ldr	r3, [pc, #60]	; (8000a74 <MX_I2C1_Init+0x50>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a3a:	4b0e      	ldr	r3, [pc, #56]	; (8000a74 <MX_I2C1_Init+0x50>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a40:	4b0c      	ldr	r3, [pc, #48]	; (8000a74 <MX_I2C1_Init+0x50>)
 8000a42:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a46:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a48:	4b0a      	ldr	r3, [pc, #40]	; (8000a74 <MX_I2C1_Init+0x50>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a4e:	4b09      	ldr	r3, [pc, #36]	; (8000a74 <MX_I2C1_Init+0x50>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a54:	4b07      	ldr	r3, [pc, #28]	; (8000a74 <MX_I2C1_Init+0x50>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a5a:	4b06      	ldr	r3, [pc, #24]	; (8000a74 <MX_I2C1_Init+0x50>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a60:	4804      	ldr	r0, [pc, #16]	; (8000a74 <MX_I2C1_Init+0x50>)
 8000a62:	f000 fea3 	bl	80017ac <HAL_I2C_Init>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a6c:	f000 f89e 	bl	8000bac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a70:	bf00      	nop
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	20000464 	.word	0x20000464
 8000a78:	40005400 	.word	0x40005400
 8000a7c:	00061a80 	.word	0x00061a80

08000a80 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b08c      	sub	sp, #48	; 0x30
 8000a84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000a86:	f107 030c 	add.w	r3, r7, #12
 8000a8a:	2224      	movs	r2, #36	; 0x24
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f004 f91c 	bl	8004ccc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a94:	1d3b      	adds	r3, r7, #4
 8000a96:	2200      	movs	r2, #0
 8000a98:	601a      	str	r2, [r3, #0]
 8000a9a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a9c:	4b21      	ldr	r3, [pc, #132]	; (8000b24 <MX_TIM2_Init+0xa4>)
 8000a9e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000aa2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000aa4:	4b1f      	ldr	r3, [pc, #124]	; (8000b24 <MX_TIM2_Init+0xa4>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aaa:	4b1e      	ldr	r3, [pc, #120]	; (8000b24 <MX_TIM2_Init+0xa4>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000ab0:	4b1c      	ldr	r3, [pc, #112]	; (8000b24 <MX_TIM2_Init+0xa4>)
 8000ab2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ab6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ab8:	4b1a      	ldr	r3, [pc, #104]	; (8000b24 <MX_TIM2_Init+0xa4>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000abe:	4b19      	ldr	r3, [pc, #100]	; (8000b24 <MX_TIM2_Init+0xa4>)
 8000ac0:	2280      	movs	r2, #128	; 0x80
 8000ac2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000ac4:	2303      	movs	r3, #3
 8000ac6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000acc:	2301      	movs	r3, #1
 8000ace:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8000ad4:	230a      	movs	r3, #10
 8000ad6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000adc:	2301      	movs	r3, #1
 8000ade:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8000ae4:	230a      	movs	r3, #10
 8000ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000ae8:	f107 030c 	add.w	r3, r7, #12
 8000aec:	4619      	mov	r1, r3
 8000aee:	480d      	ldr	r0, [pc, #52]	; (8000b24 <MX_TIM2_Init+0xa4>)
 8000af0:	f002 fb90 	bl	8003214 <HAL_TIM_Encoder_Init>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000afa:	f000 f857 	bl	8000bac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000afe:	2300      	movs	r3, #0
 8000b00:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b02:	2300      	movs	r3, #0
 8000b04:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b06:	1d3b      	adds	r3, r7, #4
 8000b08:	4619      	mov	r1, r3
 8000b0a:	4806      	ldr	r0, [pc, #24]	; (8000b24 <MX_TIM2_Init+0xa4>)
 8000b0c:	f002 fd38 	bl	8003580 <HAL_TIMEx_MasterConfigSynchronization>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000b16:	f000 f849 	bl	8000bac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000b1a:	bf00      	nop
 8000b1c:	3730      	adds	r7, #48	; 0x30
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	200004cc 	.word	0x200004cc

08000b28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b088      	sub	sp, #32
 8000b2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b2e:	f107 0310 	add.w	r3, r7, #16
 8000b32:	2200      	movs	r2, #0
 8000b34:	601a      	str	r2, [r3, #0]
 8000b36:	605a      	str	r2, [r3, #4]
 8000b38:	609a      	str	r2, [r3, #8]
 8000b3a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b3c:	4b19      	ldr	r3, [pc, #100]	; (8000ba4 <MX_GPIO_Init+0x7c>)
 8000b3e:	699b      	ldr	r3, [r3, #24]
 8000b40:	4a18      	ldr	r2, [pc, #96]	; (8000ba4 <MX_GPIO_Init+0x7c>)
 8000b42:	f043 0320 	orr.w	r3, r3, #32
 8000b46:	6193      	str	r3, [r2, #24]
 8000b48:	4b16      	ldr	r3, [pc, #88]	; (8000ba4 <MX_GPIO_Init+0x7c>)
 8000b4a:	699b      	ldr	r3, [r3, #24]
 8000b4c:	f003 0320 	and.w	r3, r3, #32
 8000b50:	60fb      	str	r3, [r7, #12]
 8000b52:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b54:	4b13      	ldr	r3, [pc, #76]	; (8000ba4 <MX_GPIO_Init+0x7c>)
 8000b56:	699b      	ldr	r3, [r3, #24]
 8000b58:	4a12      	ldr	r2, [pc, #72]	; (8000ba4 <MX_GPIO_Init+0x7c>)
 8000b5a:	f043 0304 	orr.w	r3, r3, #4
 8000b5e:	6193      	str	r3, [r2, #24]
 8000b60:	4b10      	ldr	r3, [pc, #64]	; (8000ba4 <MX_GPIO_Init+0x7c>)
 8000b62:	699b      	ldr	r3, [r3, #24]
 8000b64:	f003 0304 	and.w	r3, r3, #4
 8000b68:	60bb      	str	r3, [r7, #8]
 8000b6a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b6c:	4b0d      	ldr	r3, [pc, #52]	; (8000ba4 <MX_GPIO_Init+0x7c>)
 8000b6e:	699b      	ldr	r3, [r3, #24]
 8000b70:	4a0c      	ldr	r2, [pc, #48]	; (8000ba4 <MX_GPIO_Init+0x7c>)
 8000b72:	f043 0308 	orr.w	r3, r3, #8
 8000b76:	6193      	str	r3, [r2, #24]
 8000b78:	4b0a      	ldr	r3, [pc, #40]	; (8000ba4 <MX_GPIO_Init+0x7c>)
 8000b7a:	699b      	ldr	r3, [r3, #24]
 8000b7c:	f003 0308 	and.w	r3, r3, #8
 8000b80:	607b      	str	r3, [r7, #4]
 8000b82:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : Enkoder_Key_Pin */
  GPIO_InitStruct.Pin = Enkoder_Key_Pin;
 8000b84:	2301      	movs	r3, #1
 8000b86:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Enkoder_Key_GPIO_Port, &GPIO_InitStruct);
 8000b90:	f107 0310 	add.w	r3, r7, #16
 8000b94:	4619      	mov	r1, r3
 8000b96:	4804      	ldr	r0, [pc, #16]	; (8000ba8 <MX_GPIO_Init+0x80>)
 8000b98:	f000 fc6c 	bl	8001474 <HAL_GPIO_Init>

}
 8000b9c:	bf00      	nop
 8000b9e:	3720      	adds	r7, #32
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	40021000 	.word	0x40021000
 8000ba8:	40010c00 	.word	0x40010c00

08000bac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bb0:	b672      	cpsid	i
}
 8000bb2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bb4:	e7fe      	b.n	8000bb4 <Error_Handler+0x8>
	...

08000bb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b085      	sub	sp, #20
 8000bbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000bbe:	4b15      	ldr	r3, [pc, #84]	; (8000c14 <HAL_MspInit+0x5c>)
 8000bc0:	699b      	ldr	r3, [r3, #24]
 8000bc2:	4a14      	ldr	r2, [pc, #80]	; (8000c14 <HAL_MspInit+0x5c>)
 8000bc4:	f043 0301 	orr.w	r3, r3, #1
 8000bc8:	6193      	str	r3, [r2, #24]
 8000bca:	4b12      	ldr	r3, [pc, #72]	; (8000c14 <HAL_MspInit+0x5c>)
 8000bcc:	699b      	ldr	r3, [r3, #24]
 8000bce:	f003 0301 	and.w	r3, r3, #1
 8000bd2:	60bb      	str	r3, [r7, #8]
 8000bd4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bd6:	4b0f      	ldr	r3, [pc, #60]	; (8000c14 <HAL_MspInit+0x5c>)
 8000bd8:	69db      	ldr	r3, [r3, #28]
 8000bda:	4a0e      	ldr	r2, [pc, #56]	; (8000c14 <HAL_MspInit+0x5c>)
 8000bdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000be0:	61d3      	str	r3, [r2, #28]
 8000be2:	4b0c      	ldr	r3, [pc, #48]	; (8000c14 <HAL_MspInit+0x5c>)
 8000be4:	69db      	ldr	r3, [r3, #28]
 8000be6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bea:	607b      	str	r3, [r7, #4]
 8000bec:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000bee:	4b0a      	ldr	r3, [pc, #40]	; (8000c18 <HAL_MspInit+0x60>)
 8000bf0:	685b      	ldr	r3, [r3, #4]
 8000bf2:	60fb      	str	r3, [r7, #12]
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000bfa:	60fb      	str	r3, [r7, #12]
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c02:	60fb      	str	r3, [r7, #12]
 8000c04:	4a04      	ldr	r2, [pc, #16]	; (8000c18 <HAL_MspInit+0x60>)
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c0a:	bf00      	nop
 8000c0c:	3714      	adds	r7, #20
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bc80      	pop	{r7}
 8000c12:	4770      	bx	lr
 8000c14:	40021000 	.word	0x40021000
 8000c18:	40010000 	.word	0x40010000

08000c1c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b088      	sub	sp, #32
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c24:	f107 0310 	add.w	r3, r7, #16
 8000c28:	2200      	movs	r2, #0
 8000c2a:	601a      	str	r2, [r3, #0]
 8000c2c:	605a      	str	r2, [r3, #4]
 8000c2e:	609a      	str	r2, [r3, #8]
 8000c30:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	4a15      	ldr	r2, [pc, #84]	; (8000c8c <HAL_I2C_MspInit+0x70>)
 8000c38:	4293      	cmp	r3, r2
 8000c3a:	d123      	bne.n	8000c84 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c3c:	4b14      	ldr	r3, [pc, #80]	; (8000c90 <HAL_I2C_MspInit+0x74>)
 8000c3e:	699b      	ldr	r3, [r3, #24]
 8000c40:	4a13      	ldr	r2, [pc, #76]	; (8000c90 <HAL_I2C_MspInit+0x74>)
 8000c42:	f043 0308 	orr.w	r3, r3, #8
 8000c46:	6193      	str	r3, [r2, #24]
 8000c48:	4b11      	ldr	r3, [pc, #68]	; (8000c90 <HAL_I2C_MspInit+0x74>)
 8000c4a:	699b      	ldr	r3, [r3, #24]
 8000c4c:	f003 0308 	and.w	r3, r3, #8
 8000c50:	60fb      	str	r3, [r7, #12]
 8000c52:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c54:	23c0      	movs	r3, #192	; 0xc0
 8000c56:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c58:	2312      	movs	r3, #18
 8000c5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c5c:	2303      	movs	r3, #3
 8000c5e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c60:	f107 0310 	add.w	r3, r7, #16
 8000c64:	4619      	mov	r1, r3
 8000c66:	480b      	ldr	r0, [pc, #44]	; (8000c94 <HAL_I2C_MspInit+0x78>)
 8000c68:	f000 fc04 	bl	8001474 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c6c:	4b08      	ldr	r3, [pc, #32]	; (8000c90 <HAL_I2C_MspInit+0x74>)
 8000c6e:	69db      	ldr	r3, [r3, #28]
 8000c70:	4a07      	ldr	r2, [pc, #28]	; (8000c90 <HAL_I2C_MspInit+0x74>)
 8000c72:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c76:	61d3      	str	r3, [r2, #28]
 8000c78:	4b05      	ldr	r3, [pc, #20]	; (8000c90 <HAL_I2C_MspInit+0x74>)
 8000c7a:	69db      	ldr	r3, [r3, #28]
 8000c7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c80:	60bb      	str	r3, [r7, #8]
 8000c82:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c84:	bf00      	nop
 8000c86:	3720      	adds	r7, #32
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	40005400 	.word	0x40005400
 8000c90:	40021000 	.word	0x40021000
 8000c94:	40010c00 	.word	0x40010c00

08000c98 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b088      	sub	sp, #32
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca0:	f107 0310 	add.w	r3, r7, #16
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	601a      	str	r2, [r3, #0]
 8000ca8:	605a      	str	r2, [r3, #4]
 8000caa:	609a      	str	r2, [r3, #8]
 8000cac:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM2)
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000cb6:	d123      	bne.n	8000d00 <HAL_TIM_Encoder_MspInit+0x68>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000cb8:	4b13      	ldr	r3, [pc, #76]	; (8000d08 <HAL_TIM_Encoder_MspInit+0x70>)
 8000cba:	69db      	ldr	r3, [r3, #28]
 8000cbc:	4a12      	ldr	r2, [pc, #72]	; (8000d08 <HAL_TIM_Encoder_MspInit+0x70>)
 8000cbe:	f043 0301 	orr.w	r3, r3, #1
 8000cc2:	61d3      	str	r3, [r2, #28]
 8000cc4:	4b10      	ldr	r3, [pc, #64]	; (8000d08 <HAL_TIM_Encoder_MspInit+0x70>)
 8000cc6:	69db      	ldr	r3, [r3, #28]
 8000cc8:	f003 0301 	and.w	r3, r3, #1
 8000ccc:	60fb      	str	r3, [r7, #12]
 8000cce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd0:	4b0d      	ldr	r3, [pc, #52]	; (8000d08 <HAL_TIM_Encoder_MspInit+0x70>)
 8000cd2:	699b      	ldr	r3, [r3, #24]
 8000cd4:	4a0c      	ldr	r2, [pc, #48]	; (8000d08 <HAL_TIM_Encoder_MspInit+0x70>)
 8000cd6:	f043 0304 	orr.w	r3, r3, #4
 8000cda:	6193      	str	r3, [r2, #24]
 8000cdc:	4b0a      	ldr	r3, [pc, #40]	; (8000d08 <HAL_TIM_Encoder_MspInit+0x70>)
 8000cde:	699b      	ldr	r3, [r3, #24]
 8000ce0:	f003 0304 	and.w	r3, r3, #4
 8000ce4:	60bb      	str	r3, [r7, #8]
 8000ce6:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000ce8:	2303      	movs	r3, #3
 8000cea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cec:	2300      	movs	r3, #0
 8000cee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cf4:	f107 0310 	add.w	r3, r7, #16
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	4804      	ldr	r0, [pc, #16]	; (8000d0c <HAL_TIM_Encoder_MspInit+0x74>)
 8000cfc:	f000 fbba 	bl	8001474 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000d00:	bf00      	nop
 8000d02:	3720      	adds	r7, #32
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	40021000 	.word	0x40021000
 8000d0c:	40010800 	.word	0x40010800

08000d10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d14:	e7fe      	b.n	8000d14 <NMI_Handler+0x4>

08000d16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d16:	b480      	push	{r7}
 8000d18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d1a:	e7fe      	b.n	8000d1a <HardFault_Handler+0x4>

08000d1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d20:	e7fe      	b.n	8000d20 <MemManage_Handler+0x4>

08000d22 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d22:	b480      	push	{r7}
 8000d24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d26:	e7fe      	b.n	8000d26 <BusFault_Handler+0x4>

08000d28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d2c:	e7fe      	b.n	8000d2c <UsageFault_Handler+0x4>

08000d2e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d2e:	b480      	push	{r7}
 8000d30:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d32:	bf00      	nop
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bc80      	pop	{r7}
 8000d38:	4770      	bx	lr

08000d3a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d3a:	b480      	push	{r7}
 8000d3c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d3e:	bf00      	nop
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bc80      	pop	{r7}
 8000d44:	4770      	bx	lr

08000d46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d46:	b480      	push	{r7}
 8000d48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d4a:	bf00      	nop
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bc80      	pop	{r7}
 8000d50:	4770      	bx	lr

08000d52 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d52:	b580      	push	{r7, lr}
 8000d54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d56:	f000 fa69 	bl	800122c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d5a:	bf00      	nop
 8000d5c:	bd80      	pop	{r7, pc}

08000d5e <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d5e:	b480      	push	{r7}
 8000d60:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d62:	bf00      	nop
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bc80      	pop	{r7}
 8000d68:	4770      	bx	lr
	...

08000d6c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000d6c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000d6e:	e003      	b.n	8000d78 <LoopCopyDataInit>

08000d70 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000d70:	4b0b      	ldr	r3, [pc, #44]	; (8000da0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000d72:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000d74:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000d76:	3104      	adds	r1, #4

08000d78 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000d78:	480a      	ldr	r0, [pc, #40]	; (8000da4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000d7a:	4b0b      	ldr	r3, [pc, #44]	; (8000da8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000d7c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000d7e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000d80:	d3f6      	bcc.n	8000d70 <CopyDataInit>
  ldr r2, =_sbss
 8000d82:	4a0a      	ldr	r2, [pc, #40]	; (8000dac <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000d84:	e002      	b.n	8000d8c <LoopFillZerobss>

08000d86 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000d86:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000d88:	f842 3b04 	str.w	r3, [r2], #4

08000d8c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000d8c:	4b08      	ldr	r3, [pc, #32]	; (8000db0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000d8e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000d90:	d3f9      	bcc.n	8000d86 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000d92:	f7ff ffe4 	bl	8000d5e <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d96:	f003 ff5b 	bl	8004c50 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d9a:	f7ff fce9 	bl	8000770 <main>
  bx lr
 8000d9e:	4770      	bx	lr
  ldr r3, =_sidata
 8000da0:	08006ea8 	.word	0x08006ea8
  ldr r0, =_sdata
 8000da4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000da8:	20000030 	.word	0x20000030
  ldr r2, =_sbss
 8000dac:	20000030 	.word	0x20000030
  ldr r3, = _ebss
 8000db0:	20000570 	.word	0x20000570

08000db4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000db4:	e7fe      	b.n	8000db4 <ADC1_2_IRQHandler>
	...

08000db8 <ssd1306_WriteCommand>:
static SSD1306_t SSD1306;

//
//  Send a byte to the command register
//
static void ssd1306_WriteCommand(uint8_t command) {
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b086      	sub	sp, #24
 8000dbc:	af04      	add	r7, sp, #16
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &command, 1, 10);
 8000dc2:	230a      	movs	r3, #10
 8000dc4:	9302      	str	r3, [sp, #8]
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	9301      	str	r3, [sp, #4]
 8000dca:	1dfb      	adds	r3, r7, #7
 8000dcc:	9300      	str	r3, [sp, #0]
 8000dce:	2301      	movs	r3, #1
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	2178      	movs	r1, #120	; 0x78
 8000dd4:	4803      	ldr	r0, [pc, #12]	; (8000de4 <ssd1306_WriteCommand+0x2c>)
 8000dd6:	f000 fe2d 	bl	8001a34 <HAL_I2C_Mem_Write>
}
 8000dda:	bf00      	nop
 8000ddc:	3708      	adds	r7, #8
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	20000464 	.word	0x20000464

08000de8 <ssd1306_Init>:

//
//	Initialize the oled screen
//
uint8_t ssd1306_Init(void) {
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
	// Wait for the screen to boot
	HAL_Delay(100);
 8000dec:	2064      	movs	r0, #100	; 0x64
 8000dee:	f000 fa39 	bl	8001264 <HAL_Delay>

	/* Init LCD */
	ssd1306_WriteCommand(0xAE); //display off
 8000df2:	20ae      	movs	r0, #174	; 0xae
 8000df4:	f7ff ffe0 	bl	8000db8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode   
 8000df8:	2020      	movs	r0, #32
 8000dfa:	f7ff ffdd 	bl	8000db8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000dfe:	2010      	movs	r0, #16
 8000e00:	f7ff ffda 	bl	8000db8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000e04:	20b0      	movs	r0, #176	; 0xb0
 8000e06:	f7ff ffd7 	bl	8000db8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8000e0a:	20c8      	movs	r0, #200	; 0xc8
 8000e0c:	f7ff ffd4 	bl	8000db8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //---set low column address
 8000e10:	2000      	movs	r0, #0
 8000e12:	f7ff ffd1 	bl	8000db8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //---set high column address
 8000e16:	2010      	movs	r0, #16
 8000e18:	f7ff ffce 	bl	8000db8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x40); //--set start line address
 8000e1c:	2040      	movs	r0, #64	; 0x40
 8000e1e:	f7ff ffcb 	bl	8000db8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x81); //--set contrast control register
 8000e22:	2081      	movs	r0, #129	; 0x81
 8000e24:	f7ff ffc8 	bl	8000db8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xFF);
 8000e28:	20ff      	movs	r0, #255	; 0xff
 8000e2a:	f7ff ffc5 	bl	8000db8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127
 8000e2e:	20a1      	movs	r0, #161	; 0xa1
 8000e30:	f7ff ffc2 	bl	8000db8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA6); //--set normal display
 8000e34:	20a6      	movs	r0, #166	; 0xa6
 8000e36:	f7ff ffbf 	bl	8000db8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64)
 8000e3a:	20a8      	movs	r0, #168	; 0xa8
 8000e3c:	f7ff ffbc 	bl	8000db8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x3F); //
 8000e40:	203f      	movs	r0, #63	; 0x3f
 8000e42:	f7ff ffb9 	bl	8000db8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000e46:	20a4      	movs	r0, #164	; 0xa4
 8000e48:	f7ff ffb6 	bl	8000db8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD3); //-set display offset
 8000e4c:	20d3      	movs	r0, #211	; 0xd3
 8000e4e:	f7ff ffb3 	bl	8000db8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //-not offset
 8000e52:	2000      	movs	r0, #0
 8000e54:	f7ff ffb0 	bl	8000db8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8000e58:	20d5      	movs	r0, #213	; 0xd5
 8000e5a:	f7ff ffad 	bl	8000db8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xF0); //--set divide ratio
 8000e5e:	20f0      	movs	r0, #240	; 0xf0
 8000e60:	f7ff ffaa 	bl	8000db8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8000e64:	20d9      	movs	r0, #217	; 0xd9
 8000e66:	f7ff ffa7 	bl	8000db8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x22); //
 8000e6a:	2022      	movs	r0, #34	; 0x22
 8000e6c:	f7ff ffa4 	bl	8000db8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration
 8000e70:	20da      	movs	r0, #218	; 0xda
 8000e72:	f7ff ffa1 	bl	8000db8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x12);
 8000e76:	2012      	movs	r0, #18
 8000e78:	f7ff ff9e 	bl	8000db8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xDB); //--set vcomh
 8000e7c:	20db      	movs	r0, #219	; 0xdb
 8000e7e:	f7ff ff9b 	bl	8000db8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8000e82:	2020      	movs	r0, #32
 8000e84:	f7ff ff98 	bl	8000db8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8000e88:	208d      	movs	r0, #141	; 0x8d
 8000e8a:	f7ff ff95 	bl	8000db8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x14); //
 8000e8e:	2014      	movs	r0, #20
 8000e90:	f7ff ff92 	bl	8000db8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
 8000e94:	20af      	movs	r0, #175	; 0xaf
 8000e96:	f7ff ff8f 	bl	8000db8 <ssd1306_WriteCommand>

	// Clear screen
	ssd1306_Fill(Black);
 8000e9a:	2000      	movs	r0, #0
 8000e9c:	f000 f810 	bl	8000ec0 <ssd1306_Fill>

	// Flush buffer to screen
	ssd1306_UpdateScreen();
 8000ea0:	f000 f830 	bl	8000f04 <ssd1306_UpdateScreen>

	// Set default values for screen object
	SSD1306.CurrentX = 0;
 8000ea4:	4b05      	ldr	r3, [pc, #20]	; (8000ebc <ssd1306_Init+0xd4>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000eaa:	4b04      	ldr	r3, [pc, #16]	; (8000ebc <ssd1306_Init+0xd4>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	805a      	strh	r2, [r3, #2]

	SSD1306.Initialized = 1;
 8000eb0:	4b02      	ldr	r3, [pc, #8]	; (8000ebc <ssd1306_Init+0xd4>)
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	715a      	strb	r2, [r3, #5]

	return 1;
 8000eb6:	2301      	movs	r3, #1
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	2000045c 	.word	0x2000045c

08000ec0 <ssd1306_Fill>:

//
//  Fill the whole screen with the given color
//
void ssd1306_Fill(SSD1306_COLOR color) {
 8000ec0:	b480      	push	{r7}
 8000ec2:	b085      	sub	sp, #20
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	uint32_t i;

	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8000eca:	2300      	movs	r3, #0
 8000ecc:	60fb      	str	r3, [r7, #12]
 8000ece:	e00d      	b.n	8000eec <ssd1306_Fill+0x2c>
		SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8000ed0:	79fb      	ldrb	r3, [r7, #7]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d101      	bne.n	8000eda <ssd1306_Fill+0x1a>
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	e000      	b.n	8000edc <ssd1306_Fill+0x1c>
 8000eda:	21ff      	movs	r1, #255	; 0xff
 8000edc:	4a08      	ldr	r2, [pc, #32]	; (8000f00 <ssd1306_Fill+0x40>)
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	4413      	add	r3, r2
 8000ee2:	460a      	mov	r2, r1
 8000ee4:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	3301      	adds	r3, #1
 8000eea:	60fb      	str	r3, [r7, #12]
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ef2:	d3ed      	bcc.n	8000ed0 <ssd1306_Fill+0x10>
	}
}
 8000ef4:	bf00      	nop
 8000ef6:	bf00      	nop
 8000ef8:	3714      	adds	r7, #20
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bc80      	pop	{r7}
 8000efe:	4770      	bx	lr
 8000f00:	2000005c 	.word	0x2000005c

08000f04 <ssd1306_UpdateScreen>:

//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(void) {
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b086      	sub	sp, #24
 8000f08:	af04      	add	r7, sp, #16
	uint8_t i;

	for (i = 0; i < 8; i++) {
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	71fb      	strb	r3, [r7, #7]
 8000f0e:	e01d      	b.n	8000f4c <ssd1306_UpdateScreen+0x48>
		ssd1306_WriteCommand(0xB0 + i);
 8000f10:	79fb      	ldrb	r3, [r7, #7]
 8000f12:	3b50      	subs	r3, #80	; 0x50
 8000f14:	b2db      	uxtb	r3, r3
 8000f16:	4618      	mov	r0, r3
 8000f18:	f7ff ff4e 	bl	8000db8 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x00);
 8000f1c:	2000      	movs	r0, #0
 8000f1e:	f7ff ff4b 	bl	8000db8 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x10);
 8000f22:	2010      	movs	r0, #16
 8000f24:	f7ff ff48 	bl	8000db8 <ssd1306_WriteCommand>

		HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1,
				&SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH, 100);
 8000f28:	79fb      	ldrb	r3, [r7, #7]
 8000f2a:	01db      	lsls	r3, r3, #7
		HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1,
 8000f2c:	4a0b      	ldr	r2, [pc, #44]	; (8000f5c <ssd1306_UpdateScreen+0x58>)
 8000f2e:	4413      	add	r3, r2
 8000f30:	2264      	movs	r2, #100	; 0x64
 8000f32:	9202      	str	r2, [sp, #8]
 8000f34:	2280      	movs	r2, #128	; 0x80
 8000f36:	9201      	str	r2, [sp, #4]
 8000f38:	9300      	str	r3, [sp, #0]
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	2240      	movs	r2, #64	; 0x40
 8000f3e:	2178      	movs	r1, #120	; 0x78
 8000f40:	4807      	ldr	r0, [pc, #28]	; (8000f60 <ssd1306_UpdateScreen+0x5c>)
 8000f42:	f000 fd77 	bl	8001a34 <HAL_I2C_Mem_Write>
	for (i = 0; i < 8; i++) {
 8000f46:	79fb      	ldrb	r3, [r7, #7]
 8000f48:	3301      	adds	r3, #1
 8000f4a:	71fb      	strb	r3, [r7, #7]
 8000f4c:	79fb      	ldrb	r3, [r7, #7]
 8000f4e:	2b07      	cmp	r3, #7
 8000f50:	d9de      	bls.n	8000f10 <ssd1306_UpdateScreen+0xc>
	}
}
 8000f52:	bf00      	nop
 8000f54:	bf00      	nop
 8000f56:	3708      	adds	r7, #8
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	2000005c 	.word	0x2000005c
 8000f60:	20000464 	.word	0x20000464

08000f64 <ssd1306_DrawPixel>:
//	Draw one pixel in the screenbuffer
//	X => X Coordinate
//	Y => Y Coordinate
//	color => Pixel color
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	71fb      	strb	r3, [r7, #7]
 8000f6e:	460b      	mov	r3, r1
 8000f70:	71bb      	strb	r3, [r7, #6]
 8000f72:	4613      	mov	r3, r2
 8000f74:	717b      	strb	r3, [r7, #5]
	if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8000f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	db48      	blt.n	8001010 <ssd1306_DrawPixel+0xac>
 8000f7e:	79bb      	ldrb	r3, [r7, #6]
 8000f80:	2b3f      	cmp	r3, #63	; 0x3f
 8000f82:	d845      	bhi.n	8001010 <ssd1306_DrawPixel+0xac>
		// Don't write outside the buffer
		return;
	}

	// Check if pixel should be inverted
	if (SSD1306.Inverted) {
 8000f84:	4b25      	ldr	r3, [pc, #148]	; (800101c <ssd1306_DrawPixel+0xb8>)
 8000f86:	791b      	ldrb	r3, [r3, #4]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d006      	beq.n	8000f9a <ssd1306_DrawPixel+0x36>
		color = (SSD1306_COLOR) !color;
 8000f8c:	797b      	ldrb	r3, [r7, #5]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	bf0c      	ite	eq
 8000f92:	2301      	moveq	r3, #1
 8000f94:	2300      	movne	r3, #0
 8000f96:	b2db      	uxtb	r3, r3
 8000f98:	717b      	strb	r3, [r7, #5]
	}

	// Draw in the right color
	if (color == White) {
 8000f9a:	797b      	ldrb	r3, [r7, #5]
 8000f9c:	2b01      	cmp	r3, #1
 8000f9e:	d11a      	bne.n	8000fd6 <ssd1306_DrawPixel+0x72>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000fa0:	79fa      	ldrb	r2, [r7, #7]
 8000fa2:	79bb      	ldrb	r3, [r7, #6]
 8000fa4:	08db      	lsrs	r3, r3, #3
 8000fa6:	b2d8      	uxtb	r0, r3
 8000fa8:	4603      	mov	r3, r0
 8000faa:	01db      	lsls	r3, r3, #7
 8000fac:	4413      	add	r3, r2
 8000fae:	4a1c      	ldr	r2, [pc, #112]	; (8001020 <ssd1306_DrawPixel+0xbc>)
 8000fb0:	5cd3      	ldrb	r3, [r2, r3]
 8000fb2:	b25a      	sxtb	r2, r3
 8000fb4:	79bb      	ldrb	r3, [r7, #6]
 8000fb6:	f003 0307 	and.w	r3, r3, #7
 8000fba:	2101      	movs	r1, #1
 8000fbc:	fa01 f303 	lsl.w	r3, r1, r3
 8000fc0:	b25b      	sxtb	r3, r3
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	b259      	sxtb	r1, r3
 8000fc6:	79fa      	ldrb	r2, [r7, #7]
 8000fc8:	4603      	mov	r3, r0
 8000fca:	01db      	lsls	r3, r3, #7
 8000fcc:	4413      	add	r3, r2
 8000fce:	b2c9      	uxtb	r1, r1
 8000fd0:	4a13      	ldr	r2, [pc, #76]	; (8001020 <ssd1306_DrawPixel+0xbc>)
 8000fd2:	54d1      	strb	r1, [r2, r3]
 8000fd4:	e01d      	b.n	8001012 <ssd1306_DrawPixel+0xae>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000fd6:	79fa      	ldrb	r2, [r7, #7]
 8000fd8:	79bb      	ldrb	r3, [r7, #6]
 8000fda:	08db      	lsrs	r3, r3, #3
 8000fdc:	b2d8      	uxtb	r0, r3
 8000fde:	4603      	mov	r3, r0
 8000fe0:	01db      	lsls	r3, r3, #7
 8000fe2:	4413      	add	r3, r2
 8000fe4:	4a0e      	ldr	r2, [pc, #56]	; (8001020 <ssd1306_DrawPixel+0xbc>)
 8000fe6:	5cd3      	ldrb	r3, [r2, r3]
 8000fe8:	b25a      	sxtb	r2, r3
 8000fea:	79bb      	ldrb	r3, [r7, #6]
 8000fec:	f003 0307 	and.w	r3, r3, #7
 8000ff0:	2101      	movs	r1, #1
 8000ff2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ff6:	b25b      	sxtb	r3, r3
 8000ff8:	43db      	mvns	r3, r3
 8000ffa:	b25b      	sxtb	r3, r3
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	b259      	sxtb	r1, r3
 8001000:	79fa      	ldrb	r2, [r7, #7]
 8001002:	4603      	mov	r3, r0
 8001004:	01db      	lsls	r3, r3, #7
 8001006:	4413      	add	r3, r2
 8001008:	b2c9      	uxtb	r1, r1
 800100a:	4a05      	ldr	r2, [pc, #20]	; (8001020 <ssd1306_DrawPixel+0xbc>)
 800100c:	54d1      	strb	r1, [r2, r3]
 800100e:	e000      	b.n	8001012 <ssd1306_DrawPixel+0xae>
		return;
 8001010:	bf00      	nop
	}
}
 8001012:	370c      	adds	r7, #12
 8001014:	46bd      	mov	sp, r7
 8001016:	bc80      	pop	{r7}
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	2000045c 	.word	0x2000045c
 8001020:	2000005c 	.word	0x2000005c

08001024 <ssd1306_WriteChar>:
//  Draw 1 char to the screen buffer
//	ch 		=> char om weg te schrijven
//	Font 	=> Font waarmee we gaan schrijven
//	color 	=> Black or White
//
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8001024:	b590      	push	{r4, r7, lr}
 8001026:	b089      	sub	sp, #36	; 0x24
 8001028:	af00      	add	r7, sp, #0
 800102a:	4604      	mov	r4, r0
 800102c:	1d38      	adds	r0, r7, #4
 800102e:	e880 0006 	stmia.w	r0, {r1, r2}
 8001032:	461a      	mov	r2, r3
 8001034:	4623      	mov	r3, r4
 8001036:	73fb      	strb	r3, [r7, #15]
 8001038:	4613      	mov	r3, r2
 800103a:	73bb      	strb	r3, [r7, #14]
	uint32_t i, b, j;

	// Check remaining space on current line
	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 800103c:	4b38      	ldr	r3, [pc, #224]	; (8001120 <ssd1306_WriteChar+0xfc>)
 800103e:	881b      	ldrh	r3, [r3, #0]
 8001040:	461a      	mov	r2, r3
 8001042:	793b      	ldrb	r3, [r7, #4]
 8001044:	4413      	add	r3, r2
 8001046:	2b7f      	cmp	r3, #127	; 0x7f
 8001048:	dc06      	bgt.n	8001058 <ssd1306_WriteChar+0x34>
	SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight)) {
 800104a:	4b35      	ldr	r3, [pc, #212]	; (8001120 <ssd1306_WriteChar+0xfc>)
 800104c:	885b      	ldrh	r3, [r3, #2]
 800104e:	461a      	mov	r2, r3
 8001050:	797b      	ldrb	r3, [r7, #5]
 8001052:	4413      	add	r3, r2
	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8001054:	2b3f      	cmp	r3, #63	; 0x3f
 8001056:	dd01      	ble.n	800105c <ssd1306_WriteChar+0x38>
		// Not enough space on current line
		return 0;
 8001058:	2300      	movs	r3, #0
 800105a:	e05d      	b.n	8001118 <ssd1306_WriteChar+0xf4>
	}

	// Use the font to write
	for (i = 0; i < Font.FontHeight; i++) {
 800105c:	2300      	movs	r3, #0
 800105e:	61fb      	str	r3, [r7, #28]
 8001060:	e04c      	b.n	80010fc <ssd1306_WriteChar+0xd8>
		b = Font.data[(ch - 32) * Font.FontHeight + i];
 8001062:	68ba      	ldr	r2, [r7, #8]
 8001064:	7bfb      	ldrb	r3, [r7, #15]
 8001066:	3b20      	subs	r3, #32
 8001068:	7979      	ldrb	r1, [r7, #5]
 800106a:	fb01 f303 	mul.w	r3, r1, r3
 800106e:	4619      	mov	r1, r3
 8001070:	69fb      	ldr	r3, [r7, #28]
 8001072:	440b      	add	r3, r1
 8001074:	005b      	lsls	r3, r3, #1
 8001076:	4413      	add	r3, r2
 8001078:	881b      	ldrh	r3, [r3, #0]
 800107a:	617b      	str	r3, [r7, #20]
		for (j = 0; j < Font.FontWidth; j++) {
 800107c:	2300      	movs	r3, #0
 800107e:	61bb      	str	r3, [r7, #24]
 8001080:	e034      	b.n	80010ec <ssd1306_WriteChar+0xc8>
			if ((b << j) & 0x8000) {
 8001082:	697a      	ldr	r2, [r7, #20]
 8001084:	69bb      	ldr	r3, [r7, #24]
 8001086:	fa02 f303 	lsl.w	r3, r2, r3
 800108a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800108e:	2b00      	cmp	r3, #0
 8001090:	d012      	beq.n	80010b8 <ssd1306_WriteChar+0x94>
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i),
 8001092:	4b23      	ldr	r3, [pc, #140]	; (8001120 <ssd1306_WriteChar+0xfc>)
 8001094:	881b      	ldrh	r3, [r3, #0]
 8001096:	b2da      	uxtb	r2, r3
 8001098:	69bb      	ldr	r3, [r7, #24]
 800109a:	b2db      	uxtb	r3, r3
 800109c:	4413      	add	r3, r2
 800109e:	b2d8      	uxtb	r0, r3
 80010a0:	4b1f      	ldr	r3, [pc, #124]	; (8001120 <ssd1306_WriteChar+0xfc>)
 80010a2:	885b      	ldrh	r3, [r3, #2]
 80010a4:	b2da      	uxtb	r2, r3
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	4413      	add	r3, r2
 80010ac:	b2db      	uxtb	r3, r3
 80010ae:	7bba      	ldrb	r2, [r7, #14]
 80010b0:	4619      	mov	r1, r3
 80010b2:	f7ff ff57 	bl	8000f64 <ssd1306_DrawPixel>
 80010b6:	e016      	b.n	80010e6 <ssd1306_WriteChar+0xc2>
						(SSD1306_COLOR) color);
			} else {
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i),
 80010b8:	4b19      	ldr	r3, [pc, #100]	; (8001120 <ssd1306_WriteChar+0xfc>)
 80010ba:	881b      	ldrh	r3, [r3, #0]
 80010bc:	b2da      	uxtb	r2, r3
 80010be:	69bb      	ldr	r3, [r7, #24]
 80010c0:	b2db      	uxtb	r3, r3
 80010c2:	4413      	add	r3, r2
 80010c4:	b2d8      	uxtb	r0, r3
 80010c6:	4b16      	ldr	r3, [pc, #88]	; (8001120 <ssd1306_WriteChar+0xfc>)
 80010c8:	885b      	ldrh	r3, [r3, #2]
 80010ca:	b2da      	uxtb	r2, r3
 80010cc:	69fb      	ldr	r3, [r7, #28]
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	4413      	add	r3, r2
 80010d2:	b2d9      	uxtb	r1, r3
 80010d4:	7bbb      	ldrb	r3, [r7, #14]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	bf0c      	ite	eq
 80010da:	2301      	moveq	r3, #1
 80010dc:	2300      	movne	r3, #0
 80010de:	b2db      	uxtb	r3, r3
 80010e0:	461a      	mov	r2, r3
 80010e2:	f7ff ff3f 	bl	8000f64 <ssd1306_DrawPixel>
		for (j = 0; j < Font.FontWidth; j++) {
 80010e6:	69bb      	ldr	r3, [r7, #24]
 80010e8:	3301      	adds	r3, #1
 80010ea:	61bb      	str	r3, [r7, #24]
 80010ec:	793b      	ldrb	r3, [r7, #4]
 80010ee:	461a      	mov	r2, r3
 80010f0:	69bb      	ldr	r3, [r7, #24]
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d3c5      	bcc.n	8001082 <ssd1306_WriteChar+0x5e>
	for (i = 0; i < Font.FontHeight; i++) {
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	3301      	adds	r3, #1
 80010fa:	61fb      	str	r3, [r7, #28]
 80010fc:	797b      	ldrb	r3, [r7, #5]
 80010fe:	461a      	mov	r2, r3
 8001100:	69fb      	ldr	r3, [r7, #28]
 8001102:	4293      	cmp	r3, r2
 8001104:	d3ad      	bcc.n	8001062 <ssd1306_WriteChar+0x3e>
			}
		}
	}

	// The current space is now taken
	SSD1306.CurrentX += Font.FontWidth;
 8001106:	4b06      	ldr	r3, [pc, #24]	; (8001120 <ssd1306_WriteChar+0xfc>)
 8001108:	881a      	ldrh	r2, [r3, #0]
 800110a:	793b      	ldrb	r3, [r7, #4]
 800110c:	b29b      	uxth	r3, r3
 800110e:	4413      	add	r3, r2
 8001110:	b29a      	uxth	r2, r3
 8001112:	4b03      	ldr	r3, [pc, #12]	; (8001120 <ssd1306_WriteChar+0xfc>)
 8001114:	801a      	strh	r2, [r3, #0]

	// Return written char for validation
	return ch;
 8001116:	7bfb      	ldrb	r3, [r7, #15]
}
 8001118:	4618      	mov	r0, r3
 800111a:	3724      	adds	r7, #36	; 0x24
 800111c:	46bd      	mov	sp, r7
 800111e:	bd90      	pop	{r4, r7, pc}
 8001120:	2000045c 	.word	0x2000045c

08001124 <ssd1306_WriteString>:

//
//  Write full string to screenbuffer
//
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8001124:	b580      	push	{r7, lr}
 8001126:	b084      	sub	sp, #16
 8001128:	af00      	add	r7, sp, #0
 800112a:	60f8      	str	r0, [r7, #12]
 800112c:	1d38      	adds	r0, r7, #4
 800112e:	e880 0006 	stmia.w	r0, {r1, r2}
 8001132:	70fb      	strb	r3, [r7, #3]
	// Write until null-byte
	while (*str) {
 8001134:	e012      	b.n	800115c <ssd1306_WriteString+0x38>
		if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	7818      	ldrb	r0, [r3, #0]
 800113a:	78fb      	ldrb	r3, [r7, #3]
 800113c:	1d3a      	adds	r2, r7, #4
 800113e:	ca06      	ldmia	r2, {r1, r2}
 8001140:	f7ff ff70 	bl	8001024 <ssd1306_WriteChar>
 8001144:	4603      	mov	r3, r0
 8001146:	461a      	mov	r2, r3
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	429a      	cmp	r2, r3
 800114e:	d002      	beq.n	8001156 <ssd1306_WriteString+0x32>
			// Char could not be written
			return *str;
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	e008      	b.n	8001168 <ssd1306_WriteString+0x44>
		}

		// Next char
		str++;
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	3301      	adds	r3, #1
 800115a:	60fb      	str	r3, [r7, #12]
	while (*str) {
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d1e8      	bne.n	8001136 <ssd1306_WriteString+0x12>
	}

	// Everything ok
	return *str;
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	781b      	ldrb	r3, [r3, #0]
}
 8001168:	4618      	mov	r0, r3
 800116a:	3710      	adds	r7, #16
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}

08001170 <ssd1306_SetCursor>:

//
//	Position the cursor
//
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	4603      	mov	r3, r0
 8001178:	460a      	mov	r2, r1
 800117a:	71fb      	strb	r3, [r7, #7]
 800117c:	4613      	mov	r3, r2
 800117e:	71bb      	strb	r3, [r7, #6]
	SSD1306.CurrentX = x;
 8001180:	79fb      	ldrb	r3, [r7, #7]
 8001182:	b29a      	uxth	r2, r3
 8001184:	4b05      	ldr	r3, [pc, #20]	; (800119c <ssd1306_SetCursor+0x2c>)
 8001186:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = y;
 8001188:	79bb      	ldrb	r3, [r7, #6]
 800118a:	b29a      	uxth	r2, r3
 800118c:	4b03      	ldr	r3, [pc, #12]	; (800119c <ssd1306_SetCursor+0x2c>)
 800118e:	805a      	strh	r2, [r3, #2]
}
 8001190:	bf00      	nop
 8001192:	370c      	adds	r7, #12
 8001194:	46bd      	mov	sp, r7
 8001196:	bc80      	pop	{r7}
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	2000045c 	.word	0x2000045c

080011a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011a4:	4b08      	ldr	r3, [pc, #32]	; (80011c8 <HAL_Init+0x28>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a07      	ldr	r2, [pc, #28]	; (80011c8 <HAL_Init+0x28>)
 80011aa:	f043 0310 	orr.w	r3, r3, #16
 80011ae:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011b0:	2003      	movs	r0, #3
 80011b2:	f000 f92b 	bl	800140c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011b6:	2000      	movs	r0, #0
 80011b8:	f000 f808 	bl	80011cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011bc:	f7ff fcfc 	bl	8000bb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011c0:	2300      	movs	r3, #0
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	40022000 	.word	0x40022000

080011cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011d4:	4b12      	ldr	r3, [pc, #72]	; (8001220 <HAL_InitTick+0x54>)
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	4b12      	ldr	r3, [pc, #72]	; (8001224 <HAL_InitTick+0x58>)
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	4619      	mov	r1, r3
 80011de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80011e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80011ea:	4618      	mov	r0, r3
 80011ec:	f000 f935 	bl	800145a <HAL_SYSTICK_Config>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011f6:	2301      	movs	r3, #1
 80011f8:	e00e      	b.n	8001218 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	2b0f      	cmp	r3, #15
 80011fe:	d80a      	bhi.n	8001216 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001200:	2200      	movs	r2, #0
 8001202:	6879      	ldr	r1, [r7, #4]
 8001204:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001208:	f000 f90b 	bl	8001422 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800120c:	4a06      	ldr	r2, [pc, #24]	; (8001228 <HAL_InitTick+0x5c>)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001212:	2300      	movs	r3, #0
 8001214:	e000      	b.n	8001218 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001216:	2301      	movs	r3, #1
}
 8001218:	4618      	mov	r0, r3
 800121a:	3708      	adds	r7, #8
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	20000014 	.word	0x20000014
 8001224:	2000002c 	.word	0x2000002c
 8001228:	20000028 	.word	0x20000028

0800122c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001230:	4b05      	ldr	r3, [pc, #20]	; (8001248 <HAL_IncTick+0x1c>)
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	461a      	mov	r2, r3
 8001236:	4b05      	ldr	r3, [pc, #20]	; (800124c <HAL_IncTick+0x20>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4413      	add	r3, r2
 800123c:	4a03      	ldr	r2, [pc, #12]	; (800124c <HAL_IncTick+0x20>)
 800123e:	6013      	str	r3, [r2, #0]
}
 8001240:	bf00      	nop
 8001242:	46bd      	mov	sp, r7
 8001244:	bc80      	pop	{r7}
 8001246:	4770      	bx	lr
 8001248:	2000002c 	.word	0x2000002c
 800124c:	20000514 	.word	0x20000514

08001250 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  return uwTick;
 8001254:	4b02      	ldr	r3, [pc, #8]	; (8001260 <HAL_GetTick+0x10>)
 8001256:	681b      	ldr	r3, [r3, #0]
}
 8001258:	4618      	mov	r0, r3
 800125a:	46bd      	mov	sp, r7
 800125c:	bc80      	pop	{r7}
 800125e:	4770      	bx	lr
 8001260:	20000514 	.word	0x20000514

08001264 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b084      	sub	sp, #16
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800126c:	f7ff fff0 	bl	8001250 <HAL_GetTick>
 8001270:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800127c:	d005      	beq.n	800128a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800127e:	4b0a      	ldr	r3, [pc, #40]	; (80012a8 <HAL_Delay+0x44>)
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	461a      	mov	r2, r3
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	4413      	add	r3, r2
 8001288:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800128a:	bf00      	nop
 800128c:	f7ff ffe0 	bl	8001250 <HAL_GetTick>
 8001290:	4602      	mov	r2, r0
 8001292:	68bb      	ldr	r3, [r7, #8]
 8001294:	1ad3      	subs	r3, r2, r3
 8001296:	68fa      	ldr	r2, [r7, #12]
 8001298:	429a      	cmp	r2, r3
 800129a:	d8f7      	bhi.n	800128c <HAL_Delay+0x28>
  {
  }
}
 800129c:	bf00      	nop
 800129e:	bf00      	nop
 80012a0:	3710      	adds	r7, #16
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	2000002c 	.word	0x2000002c

080012ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b085      	sub	sp, #20
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	f003 0307 	and.w	r3, r3, #7
 80012ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012bc:	4b0c      	ldr	r3, [pc, #48]	; (80012f0 <__NVIC_SetPriorityGrouping+0x44>)
 80012be:	68db      	ldr	r3, [r3, #12]
 80012c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012c2:	68ba      	ldr	r2, [r7, #8]
 80012c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012c8:	4013      	ands	r3, r2
 80012ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012de:	4a04      	ldr	r2, [pc, #16]	; (80012f0 <__NVIC_SetPriorityGrouping+0x44>)
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	60d3      	str	r3, [r2, #12]
}
 80012e4:	bf00      	nop
 80012e6:	3714      	adds	r7, #20
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bc80      	pop	{r7}
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop
 80012f0:	e000ed00 	.word	0xe000ed00

080012f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012f8:	4b04      	ldr	r3, [pc, #16]	; (800130c <__NVIC_GetPriorityGrouping+0x18>)
 80012fa:	68db      	ldr	r3, [r3, #12]
 80012fc:	0a1b      	lsrs	r3, r3, #8
 80012fe:	f003 0307 	and.w	r3, r3, #7
}
 8001302:	4618      	mov	r0, r3
 8001304:	46bd      	mov	sp, r7
 8001306:	bc80      	pop	{r7}
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	e000ed00 	.word	0xe000ed00

08001310 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001310:	b480      	push	{r7}
 8001312:	b083      	sub	sp, #12
 8001314:	af00      	add	r7, sp, #0
 8001316:	4603      	mov	r3, r0
 8001318:	6039      	str	r1, [r7, #0]
 800131a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800131c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001320:	2b00      	cmp	r3, #0
 8001322:	db0a      	blt.n	800133a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	b2da      	uxtb	r2, r3
 8001328:	490c      	ldr	r1, [pc, #48]	; (800135c <__NVIC_SetPriority+0x4c>)
 800132a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800132e:	0112      	lsls	r2, r2, #4
 8001330:	b2d2      	uxtb	r2, r2
 8001332:	440b      	add	r3, r1
 8001334:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001338:	e00a      	b.n	8001350 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	b2da      	uxtb	r2, r3
 800133e:	4908      	ldr	r1, [pc, #32]	; (8001360 <__NVIC_SetPriority+0x50>)
 8001340:	79fb      	ldrb	r3, [r7, #7]
 8001342:	f003 030f 	and.w	r3, r3, #15
 8001346:	3b04      	subs	r3, #4
 8001348:	0112      	lsls	r2, r2, #4
 800134a:	b2d2      	uxtb	r2, r2
 800134c:	440b      	add	r3, r1
 800134e:	761a      	strb	r2, [r3, #24]
}
 8001350:	bf00      	nop
 8001352:	370c      	adds	r7, #12
 8001354:	46bd      	mov	sp, r7
 8001356:	bc80      	pop	{r7}
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	e000e100 	.word	0xe000e100
 8001360:	e000ed00 	.word	0xe000ed00

08001364 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001364:	b480      	push	{r7}
 8001366:	b089      	sub	sp, #36	; 0x24
 8001368:	af00      	add	r7, sp, #0
 800136a:	60f8      	str	r0, [r7, #12]
 800136c:	60b9      	str	r1, [r7, #8]
 800136e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	f003 0307 	and.w	r3, r3, #7
 8001376:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001378:	69fb      	ldr	r3, [r7, #28]
 800137a:	f1c3 0307 	rsb	r3, r3, #7
 800137e:	2b04      	cmp	r3, #4
 8001380:	bf28      	it	cs
 8001382:	2304      	movcs	r3, #4
 8001384:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	3304      	adds	r3, #4
 800138a:	2b06      	cmp	r3, #6
 800138c:	d902      	bls.n	8001394 <NVIC_EncodePriority+0x30>
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	3b03      	subs	r3, #3
 8001392:	e000      	b.n	8001396 <NVIC_EncodePriority+0x32>
 8001394:	2300      	movs	r3, #0
 8001396:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001398:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800139c:	69bb      	ldr	r3, [r7, #24]
 800139e:	fa02 f303 	lsl.w	r3, r2, r3
 80013a2:	43da      	mvns	r2, r3
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	401a      	ands	r2, r3
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013ac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	fa01 f303 	lsl.w	r3, r1, r3
 80013b6:	43d9      	mvns	r1, r3
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013bc:	4313      	orrs	r3, r2
         );
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3724      	adds	r7, #36	; 0x24
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bc80      	pop	{r7}
 80013c6:	4770      	bx	lr

080013c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	3b01      	subs	r3, #1
 80013d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013d8:	d301      	bcc.n	80013de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013da:	2301      	movs	r3, #1
 80013dc:	e00f      	b.n	80013fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013de:	4a0a      	ldr	r2, [pc, #40]	; (8001408 <SysTick_Config+0x40>)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	3b01      	subs	r3, #1
 80013e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013e6:	210f      	movs	r1, #15
 80013e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80013ec:	f7ff ff90 	bl	8001310 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013f0:	4b05      	ldr	r3, [pc, #20]	; (8001408 <SysTick_Config+0x40>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013f6:	4b04      	ldr	r3, [pc, #16]	; (8001408 <SysTick_Config+0x40>)
 80013f8:	2207      	movs	r2, #7
 80013fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013fc:	2300      	movs	r3, #0
}
 80013fe:	4618      	mov	r0, r3
 8001400:	3708      	adds	r7, #8
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	e000e010 	.word	0xe000e010

0800140c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001414:	6878      	ldr	r0, [r7, #4]
 8001416:	f7ff ff49 	bl	80012ac <__NVIC_SetPriorityGrouping>
}
 800141a:	bf00      	nop
 800141c:	3708      	adds	r7, #8
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}

08001422 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001422:	b580      	push	{r7, lr}
 8001424:	b086      	sub	sp, #24
 8001426:	af00      	add	r7, sp, #0
 8001428:	4603      	mov	r3, r0
 800142a:	60b9      	str	r1, [r7, #8]
 800142c:	607a      	str	r2, [r7, #4]
 800142e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001430:	2300      	movs	r3, #0
 8001432:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001434:	f7ff ff5e 	bl	80012f4 <__NVIC_GetPriorityGrouping>
 8001438:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800143a:	687a      	ldr	r2, [r7, #4]
 800143c:	68b9      	ldr	r1, [r7, #8]
 800143e:	6978      	ldr	r0, [r7, #20]
 8001440:	f7ff ff90 	bl	8001364 <NVIC_EncodePriority>
 8001444:	4602      	mov	r2, r0
 8001446:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800144a:	4611      	mov	r1, r2
 800144c:	4618      	mov	r0, r3
 800144e:	f7ff ff5f 	bl	8001310 <__NVIC_SetPriority>
}
 8001452:	bf00      	nop
 8001454:	3718      	adds	r7, #24
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}

0800145a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800145a:	b580      	push	{r7, lr}
 800145c:	b082      	sub	sp, #8
 800145e:	af00      	add	r7, sp, #0
 8001460:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001462:	6878      	ldr	r0, [r7, #4]
 8001464:	f7ff ffb0 	bl	80013c8 <SysTick_Config>
 8001468:	4603      	mov	r3, r0
}
 800146a:	4618      	mov	r0, r3
 800146c:	3708      	adds	r7, #8
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
	...

08001474 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001474:	b480      	push	{r7}
 8001476:	b08b      	sub	sp, #44	; 0x2c
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
 800147c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800147e:	2300      	movs	r3, #0
 8001480:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001482:	2300      	movs	r3, #0
 8001484:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001486:	e169      	b.n	800175c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001488:	2201      	movs	r2, #1
 800148a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800148c:	fa02 f303 	lsl.w	r3, r2, r3
 8001490:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	69fa      	ldr	r2, [r7, #28]
 8001498:	4013      	ands	r3, r2
 800149a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800149c:	69ba      	ldr	r2, [r7, #24]
 800149e:	69fb      	ldr	r3, [r7, #28]
 80014a0:	429a      	cmp	r2, r3
 80014a2:	f040 8158 	bne.w	8001756 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	4a9a      	ldr	r2, [pc, #616]	; (8001714 <HAL_GPIO_Init+0x2a0>)
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d05e      	beq.n	800156e <HAL_GPIO_Init+0xfa>
 80014b0:	4a98      	ldr	r2, [pc, #608]	; (8001714 <HAL_GPIO_Init+0x2a0>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d875      	bhi.n	80015a2 <HAL_GPIO_Init+0x12e>
 80014b6:	4a98      	ldr	r2, [pc, #608]	; (8001718 <HAL_GPIO_Init+0x2a4>)
 80014b8:	4293      	cmp	r3, r2
 80014ba:	d058      	beq.n	800156e <HAL_GPIO_Init+0xfa>
 80014bc:	4a96      	ldr	r2, [pc, #600]	; (8001718 <HAL_GPIO_Init+0x2a4>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d86f      	bhi.n	80015a2 <HAL_GPIO_Init+0x12e>
 80014c2:	4a96      	ldr	r2, [pc, #600]	; (800171c <HAL_GPIO_Init+0x2a8>)
 80014c4:	4293      	cmp	r3, r2
 80014c6:	d052      	beq.n	800156e <HAL_GPIO_Init+0xfa>
 80014c8:	4a94      	ldr	r2, [pc, #592]	; (800171c <HAL_GPIO_Init+0x2a8>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d869      	bhi.n	80015a2 <HAL_GPIO_Init+0x12e>
 80014ce:	4a94      	ldr	r2, [pc, #592]	; (8001720 <HAL_GPIO_Init+0x2ac>)
 80014d0:	4293      	cmp	r3, r2
 80014d2:	d04c      	beq.n	800156e <HAL_GPIO_Init+0xfa>
 80014d4:	4a92      	ldr	r2, [pc, #584]	; (8001720 <HAL_GPIO_Init+0x2ac>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d863      	bhi.n	80015a2 <HAL_GPIO_Init+0x12e>
 80014da:	4a92      	ldr	r2, [pc, #584]	; (8001724 <HAL_GPIO_Init+0x2b0>)
 80014dc:	4293      	cmp	r3, r2
 80014de:	d046      	beq.n	800156e <HAL_GPIO_Init+0xfa>
 80014e0:	4a90      	ldr	r2, [pc, #576]	; (8001724 <HAL_GPIO_Init+0x2b0>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d85d      	bhi.n	80015a2 <HAL_GPIO_Init+0x12e>
 80014e6:	2b12      	cmp	r3, #18
 80014e8:	d82a      	bhi.n	8001540 <HAL_GPIO_Init+0xcc>
 80014ea:	2b12      	cmp	r3, #18
 80014ec:	d859      	bhi.n	80015a2 <HAL_GPIO_Init+0x12e>
 80014ee:	a201      	add	r2, pc, #4	; (adr r2, 80014f4 <HAL_GPIO_Init+0x80>)
 80014f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014f4:	0800156f 	.word	0x0800156f
 80014f8:	08001549 	.word	0x08001549
 80014fc:	0800155b 	.word	0x0800155b
 8001500:	0800159d 	.word	0x0800159d
 8001504:	080015a3 	.word	0x080015a3
 8001508:	080015a3 	.word	0x080015a3
 800150c:	080015a3 	.word	0x080015a3
 8001510:	080015a3 	.word	0x080015a3
 8001514:	080015a3 	.word	0x080015a3
 8001518:	080015a3 	.word	0x080015a3
 800151c:	080015a3 	.word	0x080015a3
 8001520:	080015a3 	.word	0x080015a3
 8001524:	080015a3 	.word	0x080015a3
 8001528:	080015a3 	.word	0x080015a3
 800152c:	080015a3 	.word	0x080015a3
 8001530:	080015a3 	.word	0x080015a3
 8001534:	080015a3 	.word	0x080015a3
 8001538:	08001551 	.word	0x08001551
 800153c:	08001565 	.word	0x08001565
 8001540:	4a79      	ldr	r2, [pc, #484]	; (8001728 <HAL_GPIO_Init+0x2b4>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d013      	beq.n	800156e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001546:	e02c      	b.n	80015a2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	68db      	ldr	r3, [r3, #12]
 800154c:	623b      	str	r3, [r7, #32]
          break;
 800154e:	e029      	b.n	80015a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	68db      	ldr	r3, [r3, #12]
 8001554:	3304      	adds	r3, #4
 8001556:	623b      	str	r3, [r7, #32]
          break;
 8001558:	e024      	b.n	80015a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	68db      	ldr	r3, [r3, #12]
 800155e:	3308      	adds	r3, #8
 8001560:	623b      	str	r3, [r7, #32]
          break;
 8001562:	e01f      	b.n	80015a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	68db      	ldr	r3, [r3, #12]
 8001568:	330c      	adds	r3, #12
 800156a:	623b      	str	r3, [r7, #32]
          break;
 800156c:	e01a      	b.n	80015a4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	689b      	ldr	r3, [r3, #8]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d102      	bne.n	800157c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001576:	2304      	movs	r3, #4
 8001578:	623b      	str	r3, [r7, #32]
          break;
 800157a:	e013      	b.n	80015a4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	689b      	ldr	r3, [r3, #8]
 8001580:	2b01      	cmp	r3, #1
 8001582:	d105      	bne.n	8001590 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001584:	2308      	movs	r3, #8
 8001586:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	69fa      	ldr	r2, [r7, #28]
 800158c:	611a      	str	r2, [r3, #16]
          break;
 800158e:	e009      	b.n	80015a4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001590:	2308      	movs	r3, #8
 8001592:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	69fa      	ldr	r2, [r7, #28]
 8001598:	615a      	str	r2, [r3, #20]
          break;
 800159a:	e003      	b.n	80015a4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800159c:	2300      	movs	r3, #0
 800159e:	623b      	str	r3, [r7, #32]
          break;
 80015a0:	e000      	b.n	80015a4 <HAL_GPIO_Init+0x130>
          break;
 80015a2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80015a4:	69bb      	ldr	r3, [r7, #24]
 80015a6:	2bff      	cmp	r3, #255	; 0xff
 80015a8:	d801      	bhi.n	80015ae <HAL_GPIO_Init+0x13a>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	e001      	b.n	80015b2 <HAL_GPIO_Init+0x13e>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	3304      	adds	r3, #4
 80015b2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80015b4:	69bb      	ldr	r3, [r7, #24]
 80015b6:	2bff      	cmp	r3, #255	; 0xff
 80015b8:	d802      	bhi.n	80015c0 <HAL_GPIO_Init+0x14c>
 80015ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015bc:	009b      	lsls	r3, r3, #2
 80015be:	e002      	b.n	80015c6 <HAL_GPIO_Init+0x152>
 80015c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c2:	3b08      	subs	r3, #8
 80015c4:	009b      	lsls	r3, r3, #2
 80015c6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	210f      	movs	r1, #15
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	fa01 f303 	lsl.w	r3, r1, r3
 80015d4:	43db      	mvns	r3, r3
 80015d6:	401a      	ands	r2, r3
 80015d8:	6a39      	ldr	r1, [r7, #32]
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	fa01 f303 	lsl.w	r3, r1, r3
 80015e0:	431a      	orrs	r2, r3
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	f000 80b1 	beq.w	8001756 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80015f4:	4b4d      	ldr	r3, [pc, #308]	; (800172c <HAL_GPIO_Init+0x2b8>)
 80015f6:	699b      	ldr	r3, [r3, #24]
 80015f8:	4a4c      	ldr	r2, [pc, #304]	; (800172c <HAL_GPIO_Init+0x2b8>)
 80015fa:	f043 0301 	orr.w	r3, r3, #1
 80015fe:	6193      	str	r3, [r2, #24]
 8001600:	4b4a      	ldr	r3, [pc, #296]	; (800172c <HAL_GPIO_Init+0x2b8>)
 8001602:	699b      	ldr	r3, [r3, #24]
 8001604:	f003 0301 	and.w	r3, r3, #1
 8001608:	60bb      	str	r3, [r7, #8]
 800160a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800160c:	4a48      	ldr	r2, [pc, #288]	; (8001730 <HAL_GPIO_Init+0x2bc>)
 800160e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001610:	089b      	lsrs	r3, r3, #2
 8001612:	3302      	adds	r3, #2
 8001614:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001618:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800161a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800161c:	f003 0303 	and.w	r3, r3, #3
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	220f      	movs	r2, #15
 8001624:	fa02 f303 	lsl.w	r3, r2, r3
 8001628:	43db      	mvns	r3, r3
 800162a:	68fa      	ldr	r2, [r7, #12]
 800162c:	4013      	ands	r3, r2
 800162e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	4a40      	ldr	r2, [pc, #256]	; (8001734 <HAL_GPIO_Init+0x2c0>)
 8001634:	4293      	cmp	r3, r2
 8001636:	d013      	beq.n	8001660 <HAL_GPIO_Init+0x1ec>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	4a3f      	ldr	r2, [pc, #252]	; (8001738 <HAL_GPIO_Init+0x2c4>)
 800163c:	4293      	cmp	r3, r2
 800163e:	d00d      	beq.n	800165c <HAL_GPIO_Init+0x1e8>
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	4a3e      	ldr	r2, [pc, #248]	; (800173c <HAL_GPIO_Init+0x2c8>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d007      	beq.n	8001658 <HAL_GPIO_Init+0x1e4>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	4a3d      	ldr	r2, [pc, #244]	; (8001740 <HAL_GPIO_Init+0x2cc>)
 800164c:	4293      	cmp	r3, r2
 800164e:	d101      	bne.n	8001654 <HAL_GPIO_Init+0x1e0>
 8001650:	2303      	movs	r3, #3
 8001652:	e006      	b.n	8001662 <HAL_GPIO_Init+0x1ee>
 8001654:	2304      	movs	r3, #4
 8001656:	e004      	b.n	8001662 <HAL_GPIO_Init+0x1ee>
 8001658:	2302      	movs	r3, #2
 800165a:	e002      	b.n	8001662 <HAL_GPIO_Init+0x1ee>
 800165c:	2301      	movs	r3, #1
 800165e:	e000      	b.n	8001662 <HAL_GPIO_Init+0x1ee>
 8001660:	2300      	movs	r3, #0
 8001662:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001664:	f002 0203 	and.w	r2, r2, #3
 8001668:	0092      	lsls	r2, r2, #2
 800166a:	4093      	lsls	r3, r2
 800166c:	68fa      	ldr	r2, [r7, #12]
 800166e:	4313      	orrs	r3, r2
 8001670:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001672:	492f      	ldr	r1, [pc, #188]	; (8001730 <HAL_GPIO_Init+0x2bc>)
 8001674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001676:	089b      	lsrs	r3, r3, #2
 8001678:	3302      	adds	r3, #2
 800167a:	68fa      	ldr	r2, [r7, #12]
 800167c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001688:	2b00      	cmp	r3, #0
 800168a:	d006      	beq.n	800169a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800168c:	4b2d      	ldr	r3, [pc, #180]	; (8001744 <HAL_GPIO_Init+0x2d0>)
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	492c      	ldr	r1, [pc, #176]	; (8001744 <HAL_GPIO_Init+0x2d0>)
 8001692:	69bb      	ldr	r3, [r7, #24]
 8001694:	4313      	orrs	r3, r2
 8001696:	600b      	str	r3, [r1, #0]
 8001698:	e006      	b.n	80016a8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800169a:	4b2a      	ldr	r3, [pc, #168]	; (8001744 <HAL_GPIO_Init+0x2d0>)
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	69bb      	ldr	r3, [r7, #24]
 80016a0:	43db      	mvns	r3, r3
 80016a2:	4928      	ldr	r1, [pc, #160]	; (8001744 <HAL_GPIO_Init+0x2d0>)
 80016a4:	4013      	ands	r3, r2
 80016a6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d006      	beq.n	80016c2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80016b4:	4b23      	ldr	r3, [pc, #140]	; (8001744 <HAL_GPIO_Init+0x2d0>)
 80016b6:	685a      	ldr	r2, [r3, #4]
 80016b8:	4922      	ldr	r1, [pc, #136]	; (8001744 <HAL_GPIO_Init+0x2d0>)
 80016ba:	69bb      	ldr	r3, [r7, #24]
 80016bc:	4313      	orrs	r3, r2
 80016be:	604b      	str	r3, [r1, #4]
 80016c0:	e006      	b.n	80016d0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80016c2:	4b20      	ldr	r3, [pc, #128]	; (8001744 <HAL_GPIO_Init+0x2d0>)
 80016c4:	685a      	ldr	r2, [r3, #4]
 80016c6:	69bb      	ldr	r3, [r7, #24]
 80016c8:	43db      	mvns	r3, r3
 80016ca:	491e      	ldr	r1, [pc, #120]	; (8001744 <HAL_GPIO_Init+0x2d0>)
 80016cc:	4013      	ands	r3, r2
 80016ce:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d006      	beq.n	80016ea <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80016dc:	4b19      	ldr	r3, [pc, #100]	; (8001744 <HAL_GPIO_Init+0x2d0>)
 80016de:	689a      	ldr	r2, [r3, #8]
 80016e0:	4918      	ldr	r1, [pc, #96]	; (8001744 <HAL_GPIO_Init+0x2d0>)
 80016e2:	69bb      	ldr	r3, [r7, #24]
 80016e4:	4313      	orrs	r3, r2
 80016e6:	608b      	str	r3, [r1, #8]
 80016e8:	e006      	b.n	80016f8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80016ea:	4b16      	ldr	r3, [pc, #88]	; (8001744 <HAL_GPIO_Init+0x2d0>)
 80016ec:	689a      	ldr	r2, [r3, #8]
 80016ee:	69bb      	ldr	r3, [r7, #24]
 80016f0:	43db      	mvns	r3, r3
 80016f2:	4914      	ldr	r1, [pc, #80]	; (8001744 <HAL_GPIO_Init+0x2d0>)
 80016f4:	4013      	ands	r3, r2
 80016f6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001700:	2b00      	cmp	r3, #0
 8001702:	d021      	beq.n	8001748 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001704:	4b0f      	ldr	r3, [pc, #60]	; (8001744 <HAL_GPIO_Init+0x2d0>)
 8001706:	68da      	ldr	r2, [r3, #12]
 8001708:	490e      	ldr	r1, [pc, #56]	; (8001744 <HAL_GPIO_Init+0x2d0>)
 800170a:	69bb      	ldr	r3, [r7, #24]
 800170c:	4313      	orrs	r3, r2
 800170e:	60cb      	str	r3, [r1, #12]
 8001710:	e021      	b.n	8001756 <HAL_GPIO_Init+0x2e2>
 8001712:	bf00      	nop
 8001714:	10320000 	.word	0x10320000
 8001718:	10310000 	.word	0x10310000
 800171c:	10220000 	.word	0x10220000
 8001720:	10210000 	.word	0x10210000
 8001724:	10120000 	.word	0x10120000
 8001728:	10110000 	.word	0x10110000
 800172c:	40021000 	.word	0x40021000
 8001730:	40010000 	.word	0x40010000
 8001734:	40010800 	.word	0x40010800
 8001738:	40010c00 	.word	0x40010c00
 800173c:	40011000 	.word	0x40011000
 8001740:	40011400 	.word	0x40011400
 8001744:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001748:	4b0b      	ldr	r3, [pc, #44]	; (8001778 <HAL_GPIO_Init+0x304>)
 800174a:	68da      	ldr	r2, [r3, #12]
 800174c:	69bb      	ldr	r3, [r7, #24]
 800174e:	43db      	mvns	r3, r3
 8001750:	4909      	ldr	r1, [pc, #36]	; (8001778 <HAL_GPIO_Init+0x304>)
 8001752:	4013      	ands	r3, r2
 8001754:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001758:	3301      	adds	r3, #1
 800175a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001762:	fa22 f303 	lsr.w	r3, r2, r3
 8001766:	2b00      	cmp	r3, #0
 8001768:	f47f ae8e 	bne.w	8001488 <HAL_GPIO_Init+0x14>
  }
}
 800176c:	bf00      	nop
 800176e:	bf00      	nop
 8001770:	372c      	adds	r7, #44	; 0x2c
 8001772:	46bd      	mov	sp, r7
 8001774:	bc80      	pop	{r7}
 8001776:	4770      	bx	lr
 8001778:	40010400 	.word	0x40010400

0800177c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
 8001784:	460b      	mov	r3, r1
 8001786:	807b      	strh	r3, [r7, #2]
 8001788:	4613      	mov	r3, r2
 800178a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800178c:	787b      	ldrb	r3, [r7, #1]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d003      	beq.n	800179a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001792:	887a      	ldrh	r2, [r7, #2]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001798:	e003      	b.n	80017a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800179a:	887b      	ldrh	r3, [r7, #2]
 800179c:	041a      	lsls	r2, r3, #16
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	611a      	str	r2, [r3, #16]
}
 80017a2:	bf00      	nop
 80017a4:	370c      	adds	r7, #12
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bc80      	pop	{r7}
 80017aa:	4770      	bx	lr

080017ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b084      	sub	sp, #16
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d101      	bne.n	80017be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e12b      	b.n	8001a16 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d106      	bne.n	80017d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2200      	movs	r2, #0
 80017ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	f7ff fa22 	bl	8000c1c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2224      	movs	r2, #36	; 0x24
 80017dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f022 0201 	bic.w	r2, r2, #1
 80017ee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80017fe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800180e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001810:	f001 fcce 	bl	80031b0 <HAL_RCC_GetPCLK1Freq>
 8001814:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	4a81      	ldr	r2, [pc, #516]	; (8001a20 <HAL_I2C_Init+0x274>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d807      	bhi.n	8001830 <HAL_I2C_Init+0x84>
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	4a80      	ldr	r2, [pc, #512]	; (8001a24 <HAL_I2C_Init+0x278>)
 8001824:	4293      	cmp	r3, r2
 8001826:	bf94      	ite	ls
 8001828:	2301      	movls	r3, #1
 800182a:	2300      	movhi	r3, #0
 800182c:	b2db      	uxtb	r3, r3
 800182e:	e006      	b.n	800183e <HAL_I2C_Init+0x92>
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	4a7d      	ldr	r2, [pc, #500]	; (8001a28 <HAL_I2C_Init+0x27c>)
 8001834:	4293      	cmp	r3, r2
 8001836:	bf94      	ite	ls
 8001838:	2301      	movls	r3, #1
 800183a:	2300      	movhi	r3, #0
 800183c:	b2db      	uxtb	r3, r3
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e0e7      	b.n	8001a16 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	4a78      	ldr	r2, [pc, #480]	; (8001a2c <HAL_I2C_Init+0x280>)
 800184a:	fba2 2303 	umull	r2, r3, r2, r3
 800184e:	0c9b      	lsrs	r3, r3, #18
 8001850:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	68ba      	ldr	r2, [r7, #8]
 8001862:	430a      	orrs	r2, r1
 8001864:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	6a1b      	ldr	r3, [r3, #32]
 800186c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	4a6a      	ldr	r2, [pc, #424]	; (8001a20 <HAL_I2C_Init+0x274>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d802      	bhi.n	8001880 <HAL_I2C_Init+0xd4>
 800187a:	68bb      	ldr	r3, [r7, #8]
 800187c:	3301      	adds	r3, #1
 800187e:	e009      	b.n	8001894 <HAL_I2C_Init+0xe8>
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001886:	fb02 f303 	mul.w	r3, r2, r3
 800188a:	4a69      	ldr	r2, [pc, #420]	; (8001a30 <HAL_I2C_Init+0x284>)
 800188c:	fba2 2303 	umull	r2, r3, r2, r3
 8001890:	099b      	lsrs	r3, r3, #6
 8001892:	3301      	adds	r3, #1
 8001894:	687a      	ldr	r2, [r7, #4]
 8001896:	6812      	ldr	r2, [r2, #0]
 8001898:	430b      	orrs	r3, r1
 800189a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	69db      	ldr	r3, [r3, #28]
 80018a2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80018a6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	495c      	ldr	r1, [pc, #368]	; (8001a20 <HAL_I2C_Init+0x274>)
 80018b0:	428b      	cmp	r3, r1
 80018b2:	d819      	bhi.n	80018e8 <HAL_I2C_Init+0x13c>
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	1e59      	subs	r1, r3, #1
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	005b      	lsls	r3, r3, #1
 80018be:	fbb1 f3f3 	udiv	r3, r1, r3
 80018c2:	1c59      	adds	r1, r3, #1
 80018c4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80018c8:	400b      	ands	r3, r1
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d00a      	beq.n	80018e4 <HAL_I2C_Init+0x138>
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	1e59      	subs	r1, r3, #1
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	005b      	lsls	r3, r3, #1
 80018d8:	fbb1 f3f3 	udiv	r3, r1, r3
 80018dc:	3301      	adds	r3, #1
 80018de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018e2:	e051      	b.n	8001988 <HAL_I2C_Init+0x1dc>
 80018e4:	2304      	movs	r3, #4
 80018e6:	e04f      	b.n	8001988 <HAL_I2C_Init+0x1dc>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d111      	bne.n	8001914 <HAL_I2C_Init+0x168>
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	1e58      	subs	r0, r3, #1
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6859      	ldr	r1, [r3, #4]
 80018f8:	460b      	mov	r3, r1
 80018fa:	005b      	lsls	r3, r3, #1
 80018fc:	440b      	add	r3, r1
 80018fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8001902:	3301      	adds	r3, #1
 8001904:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001908:	2b00      	cmp	r3, #0
 800190a:	bf0c      	ite	eq
 800190c:	2301      	moveq	r3, #1
 800190e:	2300      	movne	r3, #0
 8001910:	b2db      	uxtb	r3, r3
 8001912:	e012      	b.n	800193a <HAL_I2C_Init+0x18e>
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	1e58      	subs	r0, r3, #1
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6859      	ldr	r1, [r3, #4]
 800191c:	460b      	mov	r3, r1
 800191e:	009b      	lsls	r3, r3, #2
 8001920:	440b      	add	r3, r1
 8001922:	0099      	lsls	r1, r3, #2
 8001924:	440b      	add	r3, r1
 8001926:	fbb0 f3f3 	udiv	r3, r0, r3
 800192a:	3301      	adds	r3, #1
 800192c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001930:	2b00      	cmp	r3, #0
 8001932:	bf0c      	ite	eq
 8001934:	2301      	moveq	r3, #1
 8001936:	2300      	movne	r3, #0
 8001938:	b2db      	uxtb	r3, r3
 800193a:	2b00      	cmp	r3, #0
 800193c:	d001      	beq.n	8001942 <HAL_I2C_Init+0x196>
 800193e:	2301      	movs	r3, #1
 8001940:	e022      	b.n	8001988 <HAL_I2C_Init+0x1dc>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d10e      	bne.n	8001968 <HAL_I2C_Init+0x1bc>
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	1e58      	subs	r0, r3, #1
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6859      	ldr	r1, [r3, #4]
 8001952:	460b      	mov	r3, r1
 8001954:	005b      	lsls	r3, r3, #1
 8001956:	440b      	add	r3, r1
 8001958:	fbb0 f3f3 	udiv	r3, r0, r3
 800195c:	3301      	adds	r3, #1
 800195e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001962:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001966:	e00f      	b.n	8001988 <HAL_I2C_Init+0x1dc>
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	1e58      	subs	r0, r3, #1
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6859      	ldr	r1, [r3, #4]
 8001970:	460b      	mov	r3, r1
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	440b      	add	r3, r1
 8001976:	0099      	lsls	r1, r3, #2
 8001978:	440b      	add	r3, r1
 800197a:	fbb0 f3f3 	udiv	r3, r0, r3
 800197e:	3301      	adds	r3, #1
 8001980:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001984:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001988:	6879      	ldr	r1, [r7, #4]
 800198a:	6809      	ldr	r1, [r1, #0]
 800198c:	4313      	orrs	r3, r2
 800198e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	69da      	ldr	r2, [r3, #28]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6a1b      	ldr	r3, [r3, #32]
 80019a2:	431a      	orrs	r2, r3
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	430a      	orrs	r2, r1
 80019aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80019b6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80019ba:	687a      	ldr	r2, [r7, #4]
 80019bc:	6911      	ldr	r1, [r2, #16]
 80019be:	687a      	ldr	r2, [r7, #4]
 80019c0:	68d2      	ldr	r2, [r2, #12]
 80019c2:	4311      	orrs	r1, r2
 80019c4:	687a      	ldr	r2, [r7, #4]
 80019c6:	6812      	ldr	r2, [r2, #0]
 80019c8:	430b      	orrs	r3, r1
 80019ca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	68db      	ldr	r3, [r3, #12]
 80019d2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	695a      	ldr	r2, [r3, #20]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	699b      	ldr	r3, [r3, #24]
 80019de:	431a      	orrs	r2, r3
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	430a      	orrs	r2, r1
 80019e6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f042 0201 	orr.w	r2, r2, #1
 80019f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2200      	movs	r2, #0
 80019fc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2220      	movs	r2, #32
 8001a02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2200      	movs	r2, #0
 8001a0a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001a14:	2300      	movs	r3, #0
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3710      	adds	r7, #16
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	000186a0 	.word	0x000186a0
 8001a24:	001e847f 	.word	0x001e847f
 8001a28:	003d08ff 	.word	0x003d08ff
 8001a2c:	431bde83 	.word	0x431bde83
 8001a30:	10624dd3 	.word	0x10624dd3

08001a34 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b088      	sub	sp, #32
 8001a38:	af02      	add	r7, sp, #8
 8001a3a:	60f8      	str	r0, [r7, #12]
 8001a3c:	4608      	mov	r0, r1
 8001a3e:	4611      	mov	r1, r2
 8001a40:	461a      	mov	r2, r3
 8001a42:	4603      	mov	r3, r0
 8001a44:	817b      	strh	r3, [r7, #10]
 8001a46:	460b      	mov	r3, r1
 8001a48:	813b      	strh	r3, [r7, #8]
 8001a4a:	4613      	mov	r3, r2
 8001a4c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001a4e:	f7ff fbff 	bl	8001250 <HAL_GetTick>
 8001a52:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	2b20      	cmp	r3, #32
 8001a5e:	f040 80d9 	bne.w	8001c14 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	9300      	str	r3, [sp, #0]
 8001a66:	2319      	movs	r3, #25
 8001a68:	2201      	movs	r2, #1
 8001a6a:	496d      	ldr	r1, [pc, #436]	; (8001c20 <HAL_I2C_Mem_Write+0x1ec>)
 8001a6c:	68f8      	ldr	r0, [r7, #12]
 8001a6e:	f000 fdef 	bl	8002650 <I2C_WaitOnFlagUntilTimeout>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d001      	beq.n	8001a7c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001a78:	2302      	movs	r3, #2
 8001a7a:	e0cc      	b.n	8001c16 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a82:	2b01      	cmp	r3, #1
 8001a84:	d101      	bne.n	8001a8a <HAL_I2C_Mem_Write+0x56>
 8001a86:	2302      	movs	r3, #2
 8001a88:	e0c5      	b.n	8001c16 <HAL_I2C_Mem_Write+0x1e2>
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f003 0301 	and.w	r3, r3, #1
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d007      	beq.n	8001ab0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f042 0201 	orr.w	r2, r2, #1
 8001aae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001abe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	2221      	movs	r2, #33	; 0x21
 8001ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	2240      	movs	r2, #64	; 0x40
 8001acc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	6a3a      	ldr	r2, [r7, #32]
 8001ada:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001ae0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ae6:	b29a      	uxth	r2, r3
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	4a4d      	ldr	r2, [pc, #308]	; (8001c24 <HAL_I2C_Mem_Write+0x1f0>)
 8001af0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001af2:	88f8      	ldrh	r0, [r7, #6]
 8001af4:	893a      	ldrh	r2, [r7, #8]
 8001af6:	8979      	ldrh	r1, [r7, #10]
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	9301      	str	r3, [sp, #4]
 8001afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001afe:	9300      	str	r3, [sp, #0]
 8001b00:	4603      	mov	r3, r0
 8001b02:	68f8      	ldr	r0, [r7, #12]
 8001b04:	f000 fc26 	bl	8002354 <I2C_RequestMemoryWrite>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d052      	beq.n	8001bb4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e081      	b.n	8001c16 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b12:	697a      	ldr	r2, [r7, #20]
 8001b14:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001b16:	68f8      	ldr	r0, [r7, #12]
 8001b18:	f000 fe70 	bl	80027fc <I2C_WaitOnTXEFlagUntilTimeout>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d00d      	beq.n	8001b3e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b26:	2b04      	cmp	r3, #4
 8001b28:	d107      	bne.n	8001b3a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b38:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e06b      	b.n	8001c16 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b42:	781a      	ldrb	r2, [r3, #0]
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b4e:	1c5a      	adds	r2, r3, #1
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b58:	3b01      	subs	r3, #1
 8001b5a:	b29a      	uxth	r2, r3
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b64:	b29b      	uxth	r3, r3
 8001b66:	3b01      	subs	r3, #1
 8001b68:	b29a      	uxth	r2, r3
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	695b      	ldr	r3, [r3, #20]
 8001b74:	f003 0304 	and.w	r3, r3, #4
 8001b78:	2b04      	cmp	r3, #4
 8001b7a:	d11b      	bne.n	8001bb4 <HAL_I2C_Mem_Write+0x180>
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d017      	beq.n	8001bb4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b88:	781a      	ldrb	r2, [r3, #0]
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b94:	1c5a      	adds	r2, r3, #1
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b9e:	3b01      	subs	r3, #1
 8001ba0:	b29a      	uxth	r2, r3
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001baa:	b29b      	uxth	r3, r3
 8001bac:	3b01      	subs	r3, #1
 8001bae:	b29a      	uxth	r2, r3
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d1aa      	bne.n	8001b12 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bbc:	697a      	ldr	r2, [r7, #20]
 8001bbe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001bc0:	68f8      	ldr	r0, [r7, #12]
 8001bc2:	f000 fe5c 	bl	800287e <I2C_WaitOnBTFFlagUntilTimeout>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d00d      	beq.n	8001be8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd0:	2b04      	cmp	r3, #4
 8001bd2:	d107      	bne.n	8001be4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001be2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	e016      	b.n	8001c16 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001bf6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	2220      	movs	r2, #32
 8001bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	2200      	movs	r2, #0
 8001c04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001c10:	2300      	movs	r3, #0
 8001c12:	e000      	b.n	8001c16 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001c14:	2302      	movs	r3, #2
  }
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	3718      	adds	r7, #24
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	00100002 	.word	0x00100002
 8001c24:	ffff0000 	.word	0xffff0000

08001c28 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b08c      	sub	sp, #48	; 0x30
 8001c2c:	af02      	add	r7, sp, #8
 8001c2e:	60f8      	str	r0, [r7, #12]
 8001c30:	4608      	mov	r0, r1
 8001c32:	4611      	mov	r1, r2
 8001c34:	461a      	mov	r2, r3
 8001c36:	4603      	mov	r3, r0
 8001c38:	817b      	strh	r3, [r7, #10]
 8001c3a:	460b      	mov	r3, r1
 8001c3c:	813b      	strh	r3, [r7, #8]
 8001c3e:	4613      	mov	r3, r2
 8001c40:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8001c42:	2300      	movs	r3, #0
 8001c44:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001c46:	f7ff fb03 	bl	8001250 <HAL_GetTick>
 8001c4a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c52:	b2db      	uxtb	r3, r3
 8001c54:	2b20      	cmp	r3, #32
 8001c56:	f040 8244 	bne.w	80020e2 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c5c:	9300      	str	r3, [sp, #0]
 8001c5e:	2319      	movs	r3, #25
 8001c60:	2201      	movs	r2, #1
 8001c62:	4982      	ldr	r1, [pc, #520]	; (8001e6c <HAL_I2C_Mem_Read+0x244>)
 8001c64:	68f8      	ldr	r0, [r7, #12]
 8001c66:	f000 fcf3 	bl	8002650 <I2C_WaitOnFlagUntilTimeout>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d001      	beq.n	8001c74 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8001c70:	2302      	movs	r3, #2
 8001c72:	e237      	b.n	80020e4 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c7a:	2b01      	cmp	r3, #1
 8001c7c:	d101      	bne.n	8001c82 <HAL_I2C_Mem_Read+0x5a>
 8001c7e:	2302      	movs	r3, #2
 8001c80:	e230      	b.n	80020e4 <HAL_I2C_Mem_Read+0x4bc>
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	2201      	movs	r2, #1
 8001c86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 0301 	and.w	r3, r3, #1
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	d007      	beq.n	8001ca8 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f042 0201 	orr.w	r2, r2, #1
 8001ca6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001cb6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	2222      	movs	r2, #34	; 0x22
 8001cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	2240      	movs	r2, #64	; 0x40
 8001cc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001cd2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001cd8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cde:	b29a      	uxth	r2, r3
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	4a62      	ldr	r2, [pc, #392]	; (8001e70 <HAL_I2C_Mem_Read+0x248>)
 8001ce8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001cea:	88f8      	ldrh	r0, [r7, #6]
 8001cec:	893a      	ldrh	r2, [r7, #8]
 8001cee:	8979      	ldrh	r1, [r7, #10]
 8001cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf2:	9301      	str	r3, [sp, #4]
 8001cf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cf6:	9300      	str	r3, [sp, #0]
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	68f8      	ldr	r0, [r7, #12]
 8001cfc:	f000 fbc0 	bl	8002480 <I2C_RequestMemoryRead>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d001      	beq.n	8001d0a <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e1ec      	b.n	80020e4 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d113      	bne.n	8001d3a <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d12:	2300      	movs	r3, #0
 8001d14:	61fb      	str	r3, [r7, #28]
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	695b      	ldr	r3, [r3, #20]
 8001d1c:	61fb      	str	r3, [r7, #28]
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	699b      	ldr	r3, [r3, #24]
 8001d24:	61fb      	str	r3, [r7, #28]
 8001d26:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d36:	601a      	str	r2, [r3, #0]
 8001d38:	e1c0      	b.n	80020bc <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d3e:	2b01      	cmp	r3, #1
 8001d40:	d11e      	bne.n	8001d80 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d50:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001d52:	b672      	cpsid	i
}
 8001d54:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d56:	2300      	movs	r3, #0
 8001d58:	61bb      	str	r3, [r7, #24]
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	695b      	ldr	r3, [r3, #20]
 8001d60:	61bb      	str	r3, [r7, #24]
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	699b      	ldr	r3, [r3, #24]
 8001d68:	61bb      	str	r3, [r7, #24]
 8001d6a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d7a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001d7c:	b662      	cpsie	i
}
 8001d7e:	e035      	b.n	8001dec <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d84:	2b02      	cmp	r3, #2
 8001d86:	d11e      	bne.n	8001dc6 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001d96:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001d98:	b672      	cpsid	i
}
 8001d9a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	617b      	str	r3, [r7, #20]
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	695b      	ldr	r3, [r3, #20]
 8001da6:	617b      	str	r3, [r7, #20]
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	699b      	ldr	r3, [r3, #24]
 8001dae:	617b      	str	r3, [r7, #20]
 8001db0:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001dc0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001dc2:	b662      	cpsie	i
}
 8001dc4:	e012      	b.n	8001dec <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001dd4:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	613b      	str	r3, [r7, #16]
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	695b      	ldr	r3, [r3, #20]
 8001de0:	613b      	str	r3, [r7, #16]
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	699b      	ldr	r3, [r3, #24]
 8001de8:	613b      	str	r3, [r7, #16]
 8001dea:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8001dec:	e166      	b.n	80020bc <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001df2:	2b03      	cmp	r3, #3
 8001df4:	f200 811f 	bhi.w	8002036 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d123      	bne.n	8001e48 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e02:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001e04:	68f8      	ldr	r0, [r7, #12]
 8001e06:	f000 fd7b 	bl	8002900 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d001      	beq.n	8001e14 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	e167      	b.n	80020e4 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	691a      	ldr	r2, [r3, #16]
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e1e:	b2d2      	uxtb	r2, r2
 8001e20:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e26:	1c5a      	adds	r2, r3, #1
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e30:	3b01      	subs	r3, #1
 8001e32:	b29a      	uxth	r2, r3
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e3c:	b29b      	uxth	r3, r3
 8001e3e:	3b01      	subs	r3, #1
 8001e40:	b29a      	uxth	r2, r3
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001e46:	e139      	b.n	80020bc <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e4c:	2b02      	cmp	r3, #2
 8001e4e:	d152      	bne.n	8001ef6 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e52:	9300      	str	r3, [sp, #0]
 8001e54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e56:	2200      	movs	r2, #0
 8001e58:	4906      	ldr	r1, [pc, #24]	; (8001e74 <HAL_I2C_Mem_Read+0x24c>)
 8001e5a:	68f8      	ldr	r0, [r7, #12]
 8001e5c:	f000 fbf8 	bl	8002650 <I2C_WaitOnFlagUntilTimeout>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d008      	beq.n	8001e78 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e13c      	b.n	80020e4 <HAL_I2C_Mem_Read+0x4bc>
 8001e6a:	bf00      	nop
 8001e6c:	00100002 	.word	0x00100002
 8001e70:	ffff0000 	.word	0xffff0000
 8001e74:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8001e78:	b672      	cpsid	i
}
 8001e7a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e8a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	691a      	ldr	r2, [r3, #16]
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e96:	b2d2      	uxtb	r2, r2
 8001e98:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e9e:	1c5a      	adds	r2, r3, #1
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ea8:	3b01      	subs	r3, #1
 8001eaa:	b29a      	uxth	r2, r3
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001eb4:	b29b      	uxth	r3, r3
 8001eb6:	3b01      	subs	r3, #1
 8001eb8:	b29a      	uxth	r2, r3
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001ebe:	b662      	cpsie	i
}
 8001ec0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	691a      	ldr	r2, [r3, #16]
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ecc:	b2d2      	uxtb	r2, r2
 8001ece:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed4:	1c5a      	adds	r2, r3, #1
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ede:	3b01      	subs	r3, #1
 8001ee0:	b29a      	uxth	r2, r3
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001eea:	b29b      	uxth	r3, r3
 8001eec:	3b01      	subs	r3, #1
 8001eee:	b29a      	uxth	r2, r3
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001ef4:	e0e2      	b.n	80020bc <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef8:	9300      	str	r3, [sp, #0]
 8001efa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001efc:	2200      	movs	r2, #0
 8001efe:	497b      	ldr	r1, [pc, #492]	; (80020ec <HAL_I2C_Mem_Read+0x4c4>)
 8001f00:	68f8      	ldr	r0, [r7, #12]
 8001f02:	f000 fba5 	bl	8002650 <I2C_WaitOnFlagUntilTimeout>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d001      	beq.n	8001f10 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e0e9      	b.n	80020e4 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f1e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001f20:	b672      	cpsid	i
}
 8001f22:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	691a      	ldr	r2, [r3, #16]
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f2e:	b2d2      	uxtb	r2, r2
 8001f30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f36:	1c5a      	adds	r2, r3, #1
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f40:	3b01      	subs	r3, #1
 8001f42:	b29a      	uxth	r2, r3
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f4c:	b29b      	uxth	r3, r3
 8001f4e:	3b01      	subs	r3, #1
 8001f50:	b29a      	uxth	r2, r3
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8001f56:	4b66      	ldr	r3, [pc, #408]	; (80020f0 <HAL_I2C_Mem_Read+0x4c8>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	08db      	lsrs	r3, r3, #3
 8001f5c:	4a65      	ldr	r2, [pc, #404]	; (80020f4 <HAL_I2C_Mem_Read+0x4cc>)
 8001f5e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f62:	0a1a      	lsrs	r2, r3, #8
 8001f64:	4613      	mov	r3, r2
 8001f66:	009b      	lsls	r3, r3, #2
 8001f68:	4413      	add	r3, r2
 8001f6a:	00da      	lsls	r2, r3, #3
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8001f70:	6a3b      	ldr	r3, [r7, #32]
 8001f72:	3b01      	subs	r3, #1
 8001f74:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8001f76:	6a3b      	ldr	r3, [r7, #32]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d118      	bne.n	8001fae <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	2220      	movs	r2, #32
 8001f86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f96:	f043 0220 	orr.w	r2, r3, #32
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8001f9e:	b662      	cpsie	i
}
 8001fa0:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e09a      	b.n	80020e4 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	695b      	ldr	r3, [r3, #20]
 8001fb4:	f003 0304 	and.w	r3, r3, #4
 8001fb8:	2b04      	cmp	r3, #4
 8001fba:	d1d9      	bne.n	8001f70 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	691a      	ldr	r2, [r3, #16]
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd6:	b2d2      	uxtb	r2, r2
 8001fd8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fde:	1c5a      	adds	r2, r3, #1
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fe8:	3b01      	subs	r3, #1
 8001fea:	b29a      	uxth	r2, r3
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ff4:	b29b      	uxth	r3, r3
 8001ff6:	3b01      	subs	r3, #1
 8001ff8:	b29a      	uxth	r2, r3
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001ffe:	b662      	cpsie	i
}
 8002000:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	691a      	ldr	r2, [r3, #16]
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800200c:	b2d2      	uxtb	r2, r2
 800200e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002014:	1c5a      	adds	r2, r3, #1
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800201e:	3b01      	subs	r3, #1
 8002020:	b29a      	uxth	r2, r3
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800202a:	b29b      	uxth	r3, r3
 800202c:	3b01      	subs	r3, #1
 800202e:	b29a      	uxth	r2, r3
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002034:	e042      	b.n	80020bc <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002036:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002038:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800203a:	68f8      	ldr	r0, [r7, #12]
 800203c:	f000 fc60 	bl	8002900 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d001      	beq.n	800204a <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e04c      	b.n	80020e4 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	691a      	ldr	r2, [r3, #16]
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002054:	b2d2      	uxtb	r2, r2
 8002056:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800205c:	1c5a      	adds	r2, r3, #1
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002066:	3b01      	subs	r3, #1
 8002068:	b29a      	uxth	r2, r3
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002072:	b29b      	uxth	r3, r3
 8002074:	3b01      	subs	r3, #1
 8002076:	b29a      	uxth	r2, r3
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	695b      	ldr	r3, [r3, #20]
 8002082:	f003 0304 	and.w	r3, r3, #4
 8002086:	2b04      	cmp	r3, #4
 8002088:	d118      	bne.n	80020bc <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	691a      	ldr	r2, [r3, #16]
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002094:	b2d2      	uxtb	r2, r2
 8002096:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800209c:	1c5a      	adds	r2, r3, #1
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020a6:	3b01      	subs	r3, #1
 80020a8:	b29a      	uxth	r2, r3
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020b2:	b29b      	uxth	r3, r3
 80020b4:	3b01      	subs	r3, #1
 80020b6:	b29a      	uxth	r2, r3
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	f47f ae94 	bne.w	8001dee <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	2220      	movs	r2, #32
 80020ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	2200      	movs	r2, #0
 80020d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	2200      	movs	r2, #0
 80020da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80020de:	2300      	movs	r3, #0
 80020e0:	e000      	b.n	80020e4 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 80020e2:	2302      	movs	r3, #2
  }
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	3728      	adds	r7, #40	; 0x28
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	00010004 	.word	0x00010004
 80020f0:	20000014 	.word	0x20000014
 80020f4:	14f8b589 	.word	0x14f8b589

080020f8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b08a      	sub	sp, #40	; 0x28
 80020fc:	af02      	add	r7, sp, #8
 80020fe:	60f8      	str	r0, [r7, #12]
 8002100:	607a      	str	r2, [r7, #4]
 8002102:	603b      	str	r3, [r7, #0]
 8002104:	460b      	mov	r3, r1
 8002106:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002108:	f7ff f8a2 	bl	8001250 <HAL_GetTick>
 800210c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 800210e:	2301      	movs	r3, #1
 8002110:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002118:	b2db      	uxtb	r3, r3
 800211a:	2b20      	cmp	r3, #32
 800211c:	f040 8111 	bne.w	8002342 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	9300      	str	r3, [sp, #0]
 8002124:	2319      	movs	r3, #25
 8002126:	2201      	movs	r2, #1
 8002128:	4988      	ldr	r1, [pc, #544]	; (800234c <HAL_I2C_IsDeviceReady+0x254>)
 800212a:	68f8      	ldr	r0, [r7, #12]
 800212c:	f000 fa90 	bl	8002650 <I2C_WaitOnFlagUntilTimeout>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d001      	beq.n	800213a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002136:	2302      	movs	r3, #2
 8002138:	e104      	b.n	8002344 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002140:	2b01      	cmp	r3, #1
 8002142:	d101      	bne.n	8002148 <HAL_I2C_IsDeviceReady+0x50>
 8002144:	2302      	movs	r3, #2
 8002146:	e0fd      	b.n	8002344 <HAL_I2C_IsDeviceReady+0x24c>
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	2201      	movs	r2, #1
 800214c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f003 0301 	and.w	r3, r3, #1
 800215a:	2b01      	cmp	r3, #1
 800215c:	d007      	beq.n	800216e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f042 0201 	orr.w	r2, r2, #1
 800216c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800217c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	2224      	movs	r2, #36	; 0x24
 8002182:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	2200      	movs	r2, #0
 800218a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	4a70      	ldr	r2, [pc, #448]	; (8002350 <HAL_I2C_IsDeviceReady+0x258>)
 8002190:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80021a0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	9300      	str	r3, [sp, #0]
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	2200      	movs	r2, #0
 80021aa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80021ae:	68f8      	ldr	r0, [r7, #12]
 80021b0:	f000 fa4e 	bl	8002650 <I2C_WaitOnFlagUntilTimeout>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d00d      	beq.n	80021d6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80021c8:	d103      	bne.n	80021d2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021d0:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80021d2:	2303      	movs	r3, #3
 80021d4:	e0b6      	b.n	8002344 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80021d6:	897b      	ldrh	r3, [r7, #10]
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	461a      	mov	r2, r3
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80021e4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80021e6:	f7ff f833 	bl	8001250 <HAL_GetTick>
 80021ea:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	695b      	ldr	r3, [r3, #20]
 80021f2:	f003 0302 	and.w	r3, r3, #2
 80021f6:	2b02      	cmp	r3, #2
 80021f8:	bf0c      	ite	eq
 80021fa:	2301      	moveq	r3, #1
 80021fc:	2300      	movne	r3, #0
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	695b      	ldr	r3, [r3, #20]
 8002208:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800220c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002210:	bf0c      	ite	eq
 8002212:	2301      	moveq	r3, #1
 8002214:	2300      	movne	r3, #0
 8002216:	b2db      	uxtb	r3, r3
 8002218:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800221a:	e025      	b.n	8002268 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800221c:	f7ff f818 	bl	8001250 <HAL_GetTick>
 8002220:	4602      	mov	r2, r0
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	1ad3      	subs	r3, r2, r3
 8002226:	683a      	ldr	r2, [r7, #0]
 8002228:	429a      	cmp	r2, r3
 800222a:	d302      	bcc.n	8002232 <HAL_I2C_IsDeviceReady+0x13a>
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d103      	bne.n	800223a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	22a0      	movs	r2, #160	; 0xa0
 8002236:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	695b      	ldr	r3, [r3, #20]
 8002240:	f003 0302 	and.w	r3, r3, #2
 8002244:	2b02      	cmp	r3, #2
 8002246:	bf0c      	ite	eq
 8002248:	2301      	moveq	r3, #1
 800224a:	2300      	movne	r3, #0
 800224c:	b2db      	uxtb	r3, r3
 800224e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	695b      	ldr	r3, [r3, #20]
 8002256:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800225a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800225e:	bf0c      	ite	eq
 8002260:	2301      	moveq	r3, #1
 8002262:	2300      	movne	r3, #0
 8002264:	b2db      	uxtb	r3, r3
 8002266:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800226e:	b2db      	uxtb	r3, r3
 8002270:	2ba0      	cmp	r3, #160	; 0xa0
 8002272:	d005      	beq.n	8002280 <HAL_I2C_IsDeviceReady+0x188>
 8002274:	7dfb      	ldrb	r3, [r7, #23]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d102      	bne.n	8002280 <HAL_I2C_IsDeviceReady+0x188>
 800227a:	7dbb      	ldrb	r3, [r7, #22]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d0cd      	beq.n	800221c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	2220      	movs	r2, #32
 8002284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	695b      	ldr	r3, [r3, #20]
 800228e:	f003 0302 	and.w	r3, r3, #2
 8002292:	2b02      	cmp	r3, #2
 8002294:	d129      	bne.n	80022ea <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022a4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022a6:	2300      	movs	r3, #0
 80022a8:	613b      	str	r3, [r7, #16]
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	695b      	ldr	r3, [r3, #20]
 80022b0:	613b      	str	r3, [r7, #16]
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	699b      	ldr	r3, [r3, #24]
 80022b8:	613b      	str	r3, [r7, #16]
 80022ba:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80022bc:	69fb      	ldr	r3, [r7, #28]
 80022be:	9300      	str	r3, [sp, #0]
 80022c0:	2319      	movs	r3, #25
 80022c2:	2201      	movs	r2, #1
 80022c4:	4921      	ldr	r1, [pc, #132]	; (800234c <HAL_I2C_IsDeviceReady+0x254>)
 80022c6:	68f8      	ldr	r0, [r7, #12]
 80022c8:	f000 f9c2 	bl	8002650 <I2C_WaitOnFlagUntilTimeout>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d001      	beq.n	80022d6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e036      	b.n	8002344 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	2220      	movs	r2, #32
 80022da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2200      	movs	r2, #0
 80022e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80022e6:	2300      	movs	r3, #0
 80022e8:	e02c      	b.n	8002344 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022f8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002302:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002304:	69fb      	ldr	r3, [r7, #28]
 8002306:	9300      	str	r3, [sp, #0]
 8002308:	2319      	movs	r3, #25
 800230a:	2201      	movs	r2, #1
 800230c:	490f      	ldr	r1, [pc, #60]	; (800234c <HAL_I2C_IsDeviceReady+0x254>)
 800230e:	68f8      	ldr	r0, [r7, #12]
 8002310:	f000 f99e 	bl	8002650 <I2C_WaitOnFlagUntilTimeout>
 8002314:	4603      	mov	r3, r0
 8002316:	2b00      	cmp	r3, #0
 8002318:	d001      	beq.n	800231e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	e012      	b.n	8002344 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800231e:	69bb      	ldr	r3, [r7, #24]
 8002320:	3301      	adds	r3, #1
 8002322:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002324:	69ba      	ldr	r2, [r7, #24]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	429a      	cmp	r2, r3
 800232a:	f4ff af32 	bcc.w	8002192 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	2220      	movs	r2, #32
 8002332:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2200      	movs	r2, #0
 800233a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e000      	b.n	8002344 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002342:	2302      	movs	r3, #2
  }
}
 8002344:	4618      	mov	r0, r3
 8002346:	3720      	adds	r7, #32
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}
 800234c:	00100002 	.word	0x00100002
 8002350:	ffff0000 	.word	0xffff0000

08002354 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b088      	sub	sp, #32
 8002358:	af02      	add	r7, sp, #8
 800235a:	60f8      	str	r0, [r7, #12]
 800235c:	4608      	mov	r0, r1
 800235e:	4611      	mov	r1, r2
 8002360:	461a      	mov	r2, r3
 8002362:	4603      	mov	r3, r0
 8002364:	817b      	strh	r3, [r7, #10]
 8002366:	460b      	mov	r3, r1
 8002368:	813b      	strh	r3, [r7, #8]
 800236a:	4613      	mov	r3, r2
 800236c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800237c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800237e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002380:	9300      	str	r3, [sp, #0]
 8002382:	6a3b      	ldr	r3, [r7, #32]
 8002384:	2200      	movs	r2, #0
 8002386:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800238a:	68f8      	ldr	r0, [r7, #12]
 800238c:	f000 f960 	bl	8002650 <I2C_WaitOnFlagUntilTimeout>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	d00d      	beq.n	80023b2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023a4:	d103      	bne.n	80023ae <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023ac:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80023ae:	2303      	movs	r3, #3
 80023b0:	e05f      	b.n	8002472 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80023b2:	897b      	ldrh	r3, [r7, #10]
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	461a      	mov	r2, r3
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80023c0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80023c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c4:	6a3a      	ldr	r2, [r7, #32]
 80023c6:	492d      	ldr	r1, [pc, #180]	; (800247c <I2C_RequestMemoryWrite+0x128>)
 80023c8:	68f8      	ldr	r0, [r7, #12]
 80023ca:	f000 f998 	bl	80026fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d001      	beq.n	80023d8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	e04c      	b.n	8002472 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023d8:	2300      	movs	r3, #0
 80023da:	617b      	str	r3, [r7, #20]
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	695b      	ldr	r3, [r3, #20]
 80023e2:	617b      	str	r3, [r7, #20]
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	699b      	ldr	r3, [r3, #24]
 80023ea:	617b      	str	r3, [r7, #20]
 80023ec:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80023ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023f0:	6a39      	ldr	r1, [r7, #32]
 80023f2:	68f8      	ldr	r0, [r7, #12]
 80023f4:	f000 fa02 	bl	80027fc <I2C_WaitOnTXEFlagUntilTimeout>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d00d      	beq.n	800241a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002402:	2b04      	cmp	r3, #4
 8002404:	d107      	bne.n	8002416 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002414:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e02b      	b.n	8002472 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800241a:	88fb      	ldrh	r3, [r7, #6]
 800241c:	2b01      	cmp	r3, #1
 800241e:	d105      	bne.n	800242c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002420:	893b      	ldrh	r3, [r7, #8]
 8002422:	b2da      	uxtb	r2, r3
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	611a      	str	r2, [r3, #16]
 800242a:	e021      	b.n	8002470 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800242c:	893b      	ldrh	r3, [r7, #8]
 800242e:	0a1b      	lsrs	r3, r3, #8
 8002430:	b29b      	uxth	r3, r3
 8002432:	b2da      	uxtb	r2, r3
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800243a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800243c:	6a39      	ldr	r1, [r7, #32]
 800243e:	68f8      	ldr	r0, [r7, #12]
 8002440:	f000 f9dc 	bl	80027fc <I2C_WaitOnTXEFlagUntilTimeout>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d00d      	beq.n	8002466 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244e:	2b04      	cmp	r3, #4
 8002450:	d107      	bne.n	8002462 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002460:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e005      	b.n	8002472 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002466:	893b      	ldrh	r3, [r7, #8]
 8002468:	b2da      	uxtb	r2, r3
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002470:	2300      	movs	r3, #0
}
 8002472:	4618      	mov	r0, r3
 8002474:	3718      	adds	r7, #24
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	00010002 	.word	0x00010002

08002480 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b088      	sub	sp, #32
 8002484:	af02      	add	r7, sp, #8
 8002486:	60f8      	str	r0, [r7, #12]
 8002488:	4608      	mov	r0, r1
 800248a:	4611      	mov	r1, r2
 800248c:	461a      	mov	r2, r3
 800248e:	4603      	mov	r3, r0
 8002490:	817b      	strh	r3, [r7, #10]
 8002492:	460b      	mov	r3, r1
 8002494:	813b      	strh	r3, [r7, #8]
 8002496:	4613      	mov	r3, r2
 8002498:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80024a8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024b8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80024ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024bc:	9300      	str	r3, [sp, #0]
 80024be:	6a3b      	ldr	r3, [r7, #32]
 80024c0:	2200      	movs	r2, #0
 80024c2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80024c6:	68f8      	ldr	r0, [r7, #12]
 80024c8:	f000 f8c2 	bl	8002650 <I2C_WaitOnFlagUntilTimeout>
 80024cc:	4603      	mov	r3, r0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d00d      	beq.n	80024ee <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024e0:	d103      	bne.n	80024ea <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024e8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80024ea:	2303      	movs	r3, #3
 80024ec:	e0aa      	b.n	8002644 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80024ee:	897b      	ldrh	r3, [r7, #10]
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	461a      	mov	r2, r3
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80024fc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80024fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002500:	6a3a      	ldr	r2, [r7, #32]
 8002502:	4952      	ldr	r1, [pc, #328]	; (800264c <I2C_RequestMemoryRead+0x1cc>)
 8002504:	68f8      	ldr	r0, [r7, #12]
 8002506:	f000 f8fa 	bl	80026fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800250a:	4603      	mov	r3, r0
 800250c:	2b00      	cmp	r3, #0
 800250e:	d001      	beq.n	8002514 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	e097      	b.n	8002644 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002514:	2300      	movs	r3, #0
 8002516:	617b      	str	r3, [r7, #20]
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	695b      	ldr	r3, [r3, #20]
 800251e:	617b      	str	r3, [r7, #20]
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	699b      	ldr	r3, [r3, #24]
 8002526:	617b      	str	r3, [r7, #20]
 8002528:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800252a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800252c:	6a39      	ldr	r1, [r7, #32]
 800252e:	68f8      	ldr	r0, [r7, #12]
 8002530:	f000 f964 	bl	80027fc <I2C_WaitOnTXEFlagUntilTimeout>
 8002534:	4603      	mov	r3, r0
 8002536:	2b00      	cmp	r3, #0
 8002538:	d00d      	beq.n	8002556 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253e:	2b04      	cmp	r3, #4
 8002540:	d107      	bne.n	8002552 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002550:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e076      	b.n	8002644 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002556:	88fb      	ldrh	r3, [r7, #6]
 8002558:	2b01      	cmp	r3, #1
 800255a:	d105      	bne.n	8002568 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800255c:	893b      	ldrh	r3, [r7, #8]
 800255e:	b2da      	uxtb	r2, r3
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	611a      	str	r2, [r3, #16]
 8002566:	e021      	b.n	80025ac <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002568:	893b      	ldrh	r3, [r7, #8]
 800256a:	0a1b      	lsrs	r3, r3, #8
 800256c:	b29b      	uxth	r3, r3
 800256e:	b2da      	uxtb	r2, r3
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002576:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002578:	6a39      	ldr	r1, [r7, #32]
 800257a:	68f8      	ldr	r0, [r7, #12]
 800257c:	f000 f93e 	bl	80027fc <I2C_WaitOnTXEFlagUntilTimeout>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d00d      	beq.n	80025a2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258a:	2b04      	cmp	r3, #4
 800258c:	d107      	bne.n	800259e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800259c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e050      	b.n	8002644 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80025a2:	893b      	ldrh	r3, [r7, #8]
 80025a4:	b2da      	uxtb	r2, r3
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80025ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025ae:	6a39      	ldr	r1, [r7, #32]
 80025b0:	68f8      	ldr	r0, [r7, #12]
 80025b2:	f000 f923 	bl	80027fc <I2C_WaitOnTXEFlagUntilTimeout>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d00d      	beq.n	80025d8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c0:	2b04      	cmp	r3, #4
 80025c2:	d107      	bne.n	80025d4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025d2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	e035      	b.n	8002644 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025e6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80025e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ea:	9300      	str	r3, [sp, #0]
 80025ec:	6a3b      	ldr	r3, [r7, #32]
 80025ee:	2200      	movs	r2, #0
 80025f0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80025f4:	68f8      	ldr	r0, [r7, #12]
 80025f6:	f000 f82b 	bl	8002650 <I2C_WaitOnFlagUntilTimeout>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d00d      	beq.n	800261c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800260a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800260e:	d103      	bne.n	8002618 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002616:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002618:	2303      	movs	r3, #3
 800261a:	e013      	b.n	8002644 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800261c:	897b      	ldrh	r3, [r7, #10]
 800261e:	b2db      	uxtb	r3, r3
 8002620:	f043 0301 	orr.w	r3, r3, #1
 8002624:	b2da      	uxtb	r2, r3
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800262c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800262e:	6a3a      	ldr	r2, [r7, #32]
 8002630:	4906      	ldr	r1, [pc, #24]	; (800264c <I2C_RequestMemoryRead+0x1cc>)
 8002632:	68f8      	ldr	r0, [r7, #12]
 8002634:	f000 f863 	bl	80026fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d001      	beq.n	8002642 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e000      	b.n	8002644 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002642:	2300      	movs	r3, #0
}
 8002644:	4618      	mov	r0, r3
 8002646:	3718      	adds	r7, #24
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}
 800264c:	00010002 	.word	0x00010002

08002650 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b084      	sub	sp, #16
 8002654:	af00      	add	r7, sp, #0
 8002656:	60f8      	str	r0, [r7, #12]
 8002658:	60b9      	str	r1, [r7, #8]
 800265a:	603b      	str	r3, [r7, #0]
 800265c:	4613      	mov	r3, r2
 800265e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002660:	e025      	b.n	80026ae <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002668:	d021      	beq.n	80026ae <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800266a:	f7fe fdf1 	bl	8001250 <HAL_GetTick>
 800266e:	4602      	mov	r2, r0
 8002670:	69bb      	ldr	r3, [r7, #24]
 8002672:	1ad3      	subs	r3, r2, r3
 8002674:	683a      	ldr	r2, [r7, #0]
 8002676:	429a      	cmp	r2, r3
 8002678:	d302      	bcc.n	8002680 <I2C_WaitOnFlagUntilTimeout+0x30>
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d116      	bne.n	80026ae <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	2200      	movs	r2, #0
 8002684:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2220      	movs	r2, #32
 800268a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	2200      	movs	r2, #0
 8002692:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269a:	f043 0220 	orr.w	r2, r3, #32
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2200      	movs	r2, #0
 80026a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e023      	b.n	80026f6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	0c1b      	lsrs	r3, r3, #16
 80026b2:	b2db      	uxtb	r3, r3
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d10d      	bne.n	80026d4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	695b      	ldr	r3, [r3, #20]
 80026be:	43da      	mvns	r2, r3
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	4013      	ands	r3, r2
 80026c4:	b29b      	uxth	r3, r3
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	bf0c      	ite	eq
 80026ca:	2301      	moveq	r3, #1
 80026cc:	2300      	movne	r3, #0
 80026ce:	b2db      	uxtb	r3, r3
 80026d0:	461a      	mov	r2, r3
 80026d2:	e00c      	b.n	80026ee <I2C_WaitOnFlagUntilTimeout+0x9e>
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	699b      	ldr	r3, [r3, #24]
 80026da:	43da      	mvns	r2, r3
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	4013      	ands	r3, r2
 80026e0:	b29b      	uxth	r3, r3
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	bf0c      	ite	eq
 80026e6:	2301      	moveq	r3, #1
 80026e8:	2300      	movne	r3, #0
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	461a      	mov	r2, r3
 80026ee:	79fb      	ldrb	r3, [r7, #7]
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d0b6      	beq.n	8002662 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80026f4:	2300      	movs	r3, #0
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3710      	adds	r7, #16
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}

080026fe <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80026fe:	b580      	push	{r7, lr}
 8002700:	b084      	sub	sp, #16
 8002702:	af00      	add	r7, sp, #0
 8002704:	60f8      	str	r0, [r7, #12]
 8002706:	60b9      	str	r1, [r7, #8]
 8002708:	607a      	str	r2, [r7, #4]
 800270a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800270c:	e051      	b.n	80027b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	695b      	ldr	r3, [r3, #20]
 8002714:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002718:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800271c:	d123      	bne.n	8002766 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800272c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002736:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2200      	movs	r2, #0
 800273c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2220      	movs	r2, #32
 8002742:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	2200      	movs	r2, #0
 800274a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002752:	f043 0204 	orr.w	r2, r3, #4
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	2200      	movs	r2, #0
 800275e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e046      	b.n	80027f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800276c:	d021      	beq.n	80027b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800276e:	f7fe fd6f 	bl	8001250 <HAL_GetTick>
 8002772:	4602      	mov	r2, r0
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	1ad3      	subs	r3, r2, r3
 8002778:	687a      	ldr	r2, [r7, #4]
 800277a:	429a      	cmp	r2, r3
 800277c:	d302      	bcc.n	8002784 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d116      	bne.n	80027b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	2200      	movs	r2, #0
 8002788:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2220      	movs	r2, #32
 800278e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	2200      	movs	r2, #0
 8002796:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279e:	f043 0220 	orr.w	r2, r3, #32
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	2200      	movs	r2, #0
 80027aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e020      	b.n	80027f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	0c1b      	lsrs	r3, r3, #16
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d10c      	bne.n	80027d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	695b      	ldr	r3, [r3, #20]
 80027c2:	43da      	mvns	r2, r3
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	4013      	ands	r3, r2
 80027c8:	b29b      	uxth	r3, r3
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	bf14      	ite	ne
 80027ce:	2301      	movne	r3, #1
 80027d0:	2300      	moveq	r3, #0
 80027d2:	b2db      	uxtb	r3, r3
 80027d4:	e00b      	b.n	80027ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	699b      	ldr	r3, [r3, #24]
 80027dc:	43da      	mvns	r2, r3
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	4013      	ands	r3, r2
 80027e2:	b29b      	uxth	r3, r3
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	bf14      	ite	ne
 80027e8:	2301      	movne	r3, #1
 80027ea:	2300      	moveq	r3, #0
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d18d      	bne.n	800270e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80027f2:	2300      	movs	r3, #0
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	3710      	adds	r7, #16
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}

080027fc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b084      	sub	sp, #16
 8002800:	af00      	add	r7, sp, #0
 8002802:	60f8      	str	r0, [r7, #12]
 8002804:	60b9      	str	r1, [r7, #8]
 8002806:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002808:	e02d      	b.n	8002866 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800280a:	68f8      	ldr	r0, [r7, #12]
 800280c:	f000 f8ce 	bl	80029ac <I2C_IsAcknowledgeFailed>
 8002810:	4603      	mov	r3, r0
 8002812:	2b00      	cmp	r3, #0
 8002814:	d001      	beq.n	800281a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e02d      	b.n	8002876 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002820:	d021      	beq.n	8002866 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002822:	f7fe fd15 	bl	8001250 <HAL_GetTick>
 8002826:	4602      	mov	r2, r0
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	1ad3      	subs	r3, r2, r3
 800282c:	68ba      	ldr	r2, [r7, #8]
 800282e:	429a      	cmp	r2, r3
 8002830:	d302      	bcc.n	8002838 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d116      	bne.n	8002866 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2200      	movs	r2, #0
 800283c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	2220      	movs	r2, #32
 8002842:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	2200      	movs	r2, #0
 800284a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002852:	f043 0220 	orr.w	r2, r3, #32
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2200      	movs	r2, #0
 800285e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e007      	b.n	8002876 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	695b      	ldr	r3, [r3, #20]
 800286c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002870:	2b80      	cmp	r3, #128	; 0x80
 8002872:	d1ca      	bne.n	800280a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002874:	2300      	movs	r3, #0
}
 8002876:	4618      	mov	r0, r3
 8002878:	3710      	adds	r7, #16
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}

0800287e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800287e:	b580      	push	{r7, lr}
 8002880:	b084      	sub	sp, #16
 8002882:	af00      	add	r7, sp, #0
 8002884:	60f8      	str	r0, [r7, #12]
 8002886:	60b9      	str	r1, [r7, #8]
 8002888:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800288a:	e02d      	b.n	80028e8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800288c:	68f8      	ldr	r0, [r7, #12]
 800288e:	f000 f88d 	bl	80029ac <I2C_IsAcknowledgeFailed>
 8002892:	4603      	mov	r3, r0
 8002894:	2b00      	cmp	r3, #0
 8002896:	d001      	beq.n	800289c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	e02d      	b.n	80028f8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80028a2:	d021      	beq.n	80028e8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028a4:	f7fe fcd4 	bl	8001250 <HAL_GetTick>
 80028a8:	4602      	mov	r2, r0
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	68ba      	ldr	r2, [r7, #8]
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d302      	bcc.n	80028ba <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d116      	bne.n	80028e8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2200      	movs	r2, #0
 80028be:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2220      	movs	r2, #32
 80028c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2200      	movs	r2, #0
 80028cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d4:	f043 0220 	orr.w	r2, r3, #32
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2200      	movs	r2, #0
 80028e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	e007      	b.n	80028f8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	695b      	ldr	r3, [r3, #20]
 80028ee:	f003 0304 	and.w	r3, r3, #4
 80028f2:	2b04      	cmp	r3, #4
 80028f4:	d1ca      	bne.n	800288c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80028f6:	2300      	movs	r3, #0
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	3710      	adds	r7, #16
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}

08002900 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b084      	sub	sp, #16
 8002904:	af00      	add	r7, sp, #0
 8002906:	60f8      	str	r0, [r7, #12]
 8002908:	60b9      	str	r1, [r7, #8]
 800290a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800290c:	e042      	b.n	8002994 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	695b      	ldr	r3, [r3, #20]
 8002914:	f003 0310 	and.w	r3, r3, #16
 8002918:	2b10      	cmp	r3, #16
 800291a:	d119      	bne.n	8002950 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f06f 0210 	mvn.w	r2, #16
 8002924:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2200      	movs	r2, #0
 800292a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2220      	movs	r2, #32
 8002930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	2200      	movs	r2, #0
 8002938:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	2200      	movs	r2, #0
 8002948:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	e029      	b.n	80029a4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002950:	f7fe fc7e 	bl	8001250 <HAL_GetTick>
 8002954:	4602      	mov	r2, r0
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	68ba      	ldr	r2, [r7, #8]
 800295c:	429a      	cmp	r2, r3
 800295e:	d302      	bcc.n	8002966 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d116      	bne.n	8002994 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2200      	movs	r2, #0
 800296a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	2220      	movs	r2, #32
 8002970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2200      	movs	r2, #0
 8002978:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002980:	f043 0220 	orr.w	r2, r3, #32
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2200      	movs	r2, #0
 800298c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	e007      	b.n	80029a4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	695b      	ldr	r3, [r3, #20]
 800299a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800299e:	2b40      	cmp	r3, #64	; 0x40
 80029a0:	d1b5      	bne.n	800290e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80029a2:	2300      	movs	r3, #0
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	3710      	adds	r7, #16
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}

080029ac <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b083      	sub	sp, #12
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	695b      	ldr	r3, [r3, #20]
 80029ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029c2:	d11b      	bne.n	80029fc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80029cc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2200      	movs	r2, #0
 80029d2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2220      	movs	r2, #32
 80029d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2200      	movs	r2, #0
 80029e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e8:	f043 0204 	orr.w	r2, r3, #4
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2200      	movs	r2, #0
 80029f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	e000      	b.n	80029fe <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80029fc:	2300      	movs	r3, #0
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	370c      	adds	r7, #12
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bc80      	pop	{r7}
 8002a06:	4770      	bx	lr

08002a08 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b086      	sub	sp, #24
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d101      	bne.n	8002a1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e26c      	b.n	8002ef4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 0301 	and.w	r3, r3, #1
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	f000 8087 	beq.w	8002b36 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a28:	4b92      	ldr	r3, [pc, #584]	; (8002c74 <HAL_RCC_OscConfig+0x26c>)
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	f003 030c 	and.w	r3, r3, #12
 8002a30:	2b04      	cmp	r3, #4
 8002a32:	d00c      	beq.n	8002a4e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002a34:	4b8f      	ldr	r3, [pc, #572]	; (8002c74 <HAL_RCC_OscConfig+0x26c>)
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	f003 030c 	and.w	r3, r3, #12
 8002a3c:	2b08      	cmp	r3, #8
 8002a3e:	d112      	bne.n	8002a66 <HAL_RCC_OscConfig+0x5e>
 8002a40:	4b8c      	ldr	r3, [pc, #560]	; (8002c74 <HAL_RCC_OscConfig+0x26c>)
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a4c:	d10b      	bne.n	8002a66 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a4e:	4b89      	ldr	r3, [pc, #548]	; (8002c74 <HAL_RCC_OscConfig+0x26c>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d06c      	beq.n	8002b34 <HAL_RCC_OscConfig+0x12c>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d168      	bne.n	8002b34 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e246      	b.n	8002ef4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a6e:	d106      	bne.n	8002a7e <HAL_RCC_OscConfig+0x76>
 8002a70:	4b80      	ldr	r3, [pc, #512]	; (8002c74 <HAL_RCC_OscConfig+0x26c>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a7f      	ldr	r2, [pc, #508]	; (8002c74 <HAL_RCC_OscConfig+0x26c>)
 8002a76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a7a:	6013      	str	r3, [r2, #0]
 8002a7c:	e02e      	b.n	8002adc <HAL_RCC_OscConfig+0xd4>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d10c      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x98>
 8002a86:	4b7b      	ldr	r3, [pc, #492]	; (8002c74 <HAL_RCC_OscConfig+0x26c>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a7a      	ldr	r2, [pc, #488]	; (8002c74 <HAL_RCC_OscConfig+0x26c>)
 8002a8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a90:	6013      	str	r3, [r2, #0]
 8002a92:	4b78      	ldr	r3, [pc, #480]	; (8002c74 <HAL_RCC_OscConfig+0x26c>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a77      	ldr	r2, [pc, #476]	; (8002c74 <HAL_RCC_OscConfig+0x26c>)
 8002a98:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a9c:	6013      	str	r3, [r2, #0]
 8002a9e:	e01d      	b.n	8002adc <HAL_RCC_OscConfig+0xd4>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002aa8:	d10c      	bne.n	8002ac4 <HAL_RCC_OscConfig+0xbc>
 8002aaa:	4b72      	ldr	r3, [pc, #456]	; (8002c74 <HAL_RCC_OscConfig+0x26c>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a71      	ldr	r2, [pc, #452]	; (8002c74 <HAL_RCC_OscConfig+0x26c>)
 8002ab0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ab4:	6013      	str	r3, [r2, #0]
 8002ab6:	4b6f      	ldr	r3, [pc, #444]	; (8002c74 <HAL_RCC_OscConfig+0x26c>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a6e      	ldr	r2, [pc, #440]	; (8002c74 <HAL_RCC_OscConfig+0x26c>)
 8002abc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ac0:	6013      	str	r3, [r2, #0]
 8002ac2:	e00b      	b.n	8002adc <HAL_RCC_OscConfig+0xd4>
 8002ac4:	4b6b      	ldr	r3, [pc, #428]	; (8002c74 <HAL_RCC_OscConfig+0x26c>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a6a      	ldr	r2, [pc, #424]	; (8002c74 <HAL_RCC_OscConfig+0x26c>)
 8002aca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ace:	6013      	str	r3, [r2, #0]
 8002ad0:	4b68      	ldr	r3, [pc, #416]	; (8002c74 <HAL_RCC_OscConfig+0x26c>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a67      	ldr	r2, [pc, #412]	; (8002c74 <HAL_RCC_OscConfig+0x26c>)
 8002ad6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ada:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d013      	beq.n	8002b0c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ae4:	f7fe fbb4 	bl	8001250 <HAL_GetTick>
 8002ae8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aea:	e008      	b.n	8002afe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002aec:	f7fe fbb0 	bl	8001250 <HAL_GetTick>
 8002af0:	4602      	mov	r2, r0
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	2b64      	cmp	r3, #100	; 0x64
 8002af8:	d901      	bls.n	8002afe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002afa:	2303      	movs	r3, #3
 8002afc:	e1fa      	b.n	8002ef4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002afe:	4b5d      	ldr	r3, [pc, #372]	; (8002c74 <HAL_RCC_OscConfig+0x26c>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d0f0      	beq.n	8002aec <HAL_RCC_OscConfig+0xe4>
 8002b0a:	e014      	b.n	8002b36 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b0c:	f7fe fba0 	bl	8001250 <HAL_GetTick>
 8002b10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b12:	e008      	b.n	8002b26 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b14:	f7fe fb9c 	bl	8001250 <HAL_GetTick>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	2b64      	cmp	r3, #100	; 0x64
 8002b20:	d901      	bls.n	8002b26 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002b22:	2303      	movs	r3, #3
 8002b24:	e1e6      	b.n	8002ef4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b26:	4b53      	ldr	r3, [pc, #332]	; (8002c74 <HAL_RCC_OscConfig+0x26c>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d1f0      	bne.n	8002b14 <HAL_RCC_OscConfig+0x10c>
 8002b32:	e000      	b.n	8002b36 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 0302 	and.w	r3, r3, #2
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d063      	beq.n	8002c0a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b42:	4b4c      	ldr	r3, [pc, #304]	; (8002c74 <HAL_RCC_OscConfig+0x26c>)
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	f003 030c 	and.w	r3, r3, #12
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d00b      	beq.n	8002b66 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002b4e:	4b49      	ldr	r3, [pc, #292]	; (8002c74 <HAL_RCC_OscConfig+0x26c>)
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	f003 030c 	and.w	r3, r3, #12
 8002b56:	2b08      	cmp	r3, #8
 8002b58:	d11c      	bne.n	8002b94 <HAL_RCC_OscConfig+0x18c>
 8002b5a:	4b46      	ldr	r3, [pc, #280]	; (8002c74 <HAL_RCC_OscConfig+0x26c>)
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d116      	bne.n	8002b94 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b66:	4b43      	ldr	r3, [pc, #268]	; (8002c74 <HAL_RCC_OscConfig+0x26c>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 0302 	and.w	r3, r3, #2
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d005      	beq.n	8002b7e <HAL_RCC_OscConfig+0x176>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	691b      	ldr	r3, [r3, #16]
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d001      	beq.n	8002b7e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e1ba      	b.n	8002ef4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b7e:	4b3d      	ldr	r3, [pc, #244]	; (8002c74 <HAL_RCC_OscConfig+0x26c>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	695b      	ldr	r3, [r3, #20]
 8002b8a:	00db      	lsls	r3, r3, #3
 8002b8c:	4939      	ldr	r1, [pc, #228]	; (8002c74 <HAL_RCC_OscConfig+0x26c>)
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b92:	e03a      	b.n	8002c0a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	691b      	ldr	r3, [r3, #16]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d020      	beq.n	8002bde <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b9c:	4b36      	ldr	r3, [pc, #216]	; (8002c78 <HAL_RCC_OscConfig+0x270>)
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ba2:	f7fe fb55 	bl	8001250 <HAL_GetTick>
 8002ba6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ba8:	e008      	b.n	8002bbc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002baa:	f7fe fb51 	bl	8001250 <HAL_GetTick>
 8002bae:	4602      	mov	r2, r0
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	1ad3      	subs	r3, r2, r3
 8002bb4:	2b02      	cmp	r3, #2
 8002bb6:	d901      	bls.n	8002bbc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002bb8:	2303      	movs	r3, #3
 8002bba:	e19b      	b.n	8002ef4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bbc:	4b2d      	ldr	r3, [pc, #180]	; (8002c74 <HAL_RCC_OscConfig+0x26c>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 0302 	and.w	r3, r3, #2
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d0f0      	beq.n	8002baa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bc8:	4b2a      	ldr	r3, [pc, #168]	; (8002c74 <HAL_RCC_OscConfig+0x26c>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	695b      	ldr	r3, [r3, #20]
 8002bd4:	00db      	lsls	r3, r3, #3
 8002bd6:	4927      	ldr	r1, [pc, #156]	; (8002c74 <HAL_RCC_OscConfig+0x26c>)
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	600b      	str	r3, [r1, #0]
 8002bdc:	e015      	b.n	8002c0a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bde:	4b26      	ldr	r3, [pc, #152]	; (8002c78 <HAL_RCC_OscConfig+0x270>)
 8002be0:	2200      	movs	r2, #0
 8002be2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002be4:	f7fe fb34 	bl	8001250 <HAL_GetTick>
 8002be8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bea:	e008      	b.n	8002bfe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bec:	f7fe fb30 	bl	8001250 <HAL_GetTick>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	2b02      	cmp	r3, #2
 8002bf8:	d901      	bls.n	8002bfe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	e17a      	b.n	8002ef4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bfe:	4b1d      	ldr	r3, [pc, #116]	; (8002c74 <HAL_RCC_OscConfig+0x26c>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 0302 	and.w	r3, r3, #2
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d1f0      	bne.n	8002bec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0308 	and.w	r3, r3, #8
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d03a      	beq.n	8002c8c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	699b      	ldr	r3, [r3, #24]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d019      	beq.n	8002c52 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c1e:	4b17      	ldr	r3, [pc, #92]	; (8002c7c <HAL_RCC_OscConfig+0x274>)
 8002c20:	2201      	movs	r2, #1
 8002c22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c24:	f7fe fb14 	bl	8001250 <HAL_GetTick>
 8002c28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c2a:	e008      	b.n	8002c3e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c2c:	f7fe fb10 	bl	8001250 <HAL_GetTick>
 8002c30:	4602      	mov	r2, r0
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	1ad3      	subs	r3, r2, r3
 8002c36:	2b02      	cmp	r3, #2
 8002c38:	d901      	bls.n	8002c3e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002c3a:	2303      	movs	r3, #3
 8002c3c:	e15a      	b.n	8002ef4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c3e:	4b0d      	ldr	r3, [pc, #52]	; (8002c74 <HAL_RCC_OscConfig+0x26c>)
 8002c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c42:	f003 0302 	and.w	r3, r3, #2
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d0f0      	beq.n	8002c2c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002c4a:	2001      	movs	r0, #1
 8002c4c:	f000 fac4 	bl	80031d8 <RCC_Delay>
 8002c50:	e01c      	b.n	8002c8c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c52:	4b0a      	ldr	r3, [pc, #40]	; (8002c7c <HAL_RCC_OscConfig+0x274>)
 8002c54:	2200      	movs	r2, #0
 8002c56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c58:	f7fe fafa 	bl	8001250 <HAL_GetTick>
 8002c5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c5e:	e00f      	b.n	8002c80 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c60:	f7fe faf6 	bl	8001250 <HAL_GetTick>
 8002c64:	4602      	mov	r2, r0
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	2b02      	cmp	r3, #2
 8002c6c:	d908      	bls.n	8002c80 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	e140      	b.n	8002ef4 <HAL_RCC_OscConfig+0x4ec>
 8002c72:	bf00      	nop
 8002c74:	40021000 	.word	0x40021000
 8002c78:	42420000 	.word	0x42420000
 8002c7c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c80:	4b9e      	ldr	r3, [pc, #632]	; (8002efc <HAL_RCC_OscConfig+0x4f4>)
 8002c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c84:	f003 0302 	and.w	r3, r3, #2
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d1e9      	bne.n	8002c60 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 0304 	and.w	r3, r3, #4
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	f000 80a6 	beq.w	8002de6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c9e:	4b97      	ldr	r3, [pc, #604]	; (8002efc <HAL_RCC_OscConfig+0x4f4>)
 8002ca0:	69db      	ldr	r3, [r3, #28]
 8002ca2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d10d      	bne.n	8002cc6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002caa:	4b94      	ldr	r3, [pc, #592]	; (8002efc <HAL_RCC_OscConfig+0x4f4>)
 8002cac:	69db      	ldr	r3, [r3, #28]
 8002cae:	4a93      	ldr	r2, [pc, #588]	; (8002efc <HAL_RCC_OscConfig+0x4f4>)
 8002cb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cb4:	61d3      	str	r3, [r2, #28]
 8002cb6:	4b91      	ldr	r3, [pc, #580]	; (8002efc <HAL_RCC_OscConfig+0x4f4>)
 8002cb8:	69db      	ldr	r3, [r3, #28]
 8002cba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cbe:	60bb      	str	r3, [r7, #8]
 8002cc0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cc6:	4b8e      	ldr	r3, [pc, #568]	; (8002f00 <HAL_RCC_OscConfig+0x4f8>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d118      	bne.n	8002d04 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cd2:	4b8b      	ldr	r3, [pc, #556]	; (8002f00 <HAL_RCC_OscConfig+0x4f8>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a8a      	ldr	r2, [pc, #552]	; (8002f00 <HAL_RCC_OscConfig+0x4f8>)
 8002cd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cdc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cde:	f7fe fab7 	bl	8001250 <HAL_GetTick>
 8002ce2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ce4:	e008      	b.n	8002cf8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ce6:	f7fe fab3 	bl	8001250 <HAL_GetTick>
 8002cea:	4602      	mov	r2, r0
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	1ad3      	subs	r3, r2, r3
 8002cf0:	2b64      	cmp	r3, #100	; 0x64
 8002cf2:	d901      	bls.n	8002cf8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002cf4:	2303      	movs	r3, #3
 8002cf6:	e0fd      	b.n	8002ef4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cf8:	4b81      	ldr	r3, [pc, #516]	; (8002f00 <HAL_RCC_OscConfig+0x4f8>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d0f0      	beq.n	8002ce6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	d106      	bne.n	8002d1a <HAL_RCC_OscConfig+0x312>
 8002d0c:	4b7b      	ldr	r3, [pc, #492]	; (8002efc <HAL_RCC_OscConfig+0x4f4>)
 8002d0e:	6a1b      	ldr	r3, [r3, #32]
 8002d10:	4a7a      	ldr	r2, [pc, #488]	; (8002efc <HAL_RCC_OscConfig+0x4f4>)
 8002d12:	f043 0301 	orr.w	r3, r3, #1
 8002d16:	6213      	str	r3, [r2, #32]
 8002d18:	e02d      	b.n	8002d76 <HAL_RCC_OscConfig+0x36e>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	68db      	ldr	r3, [r3, #12]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d10c      	bne.n	8002d3c <HAL_RCC_OscConfig+0x334>
 8002d22:	4b76      	ldr	r3, [pc, #472]	; (8002efc <HAL_RCC_OscConfig+0x4f4>)
 8002d24:	6a1b      	ldr	r3, [r3, #32]
 8002d26:	4a75      	ldr	r2, [pc, #468]	; (8002efc <HAL_RCC_OscConfig+0x4f4>)
 8002d28:	f023 0301 	bic.w	r3, r3, #1
 8002d2c:	6213      	str	r3, [r2, #32]
 8002d2e:	4b73      	ldr	r3, [pc, #460]	; (8002efc <HAL_RCC_OscConfig+0x4f4>)
 8002d30:	6a1b      	ldr	r3, [r3, #32]
 8002d32:	4a72      	ldr	r2, [pc, #456]	; (8002efc <HAL_RCC_OscConfig+0x4f4>)
 8002d34:	f023 0304 	bic.w	r3, r3, #4
 8002d38:	6213      	str	r3, [r2, #32]
 8002d3a:	e01c      	b.n	8002d76 <HAL_RCC_OscConfig+0x36e>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	68db      	ldr	r3, [r3, #12]
 8002d40:	2b05      	cmp	r3, #5
 8002d42:	d10c      	bne.n	8002d5e <HAL_RCC_OscConfig+0x356>
 8002d44:	4b6d      	ldr	r3, [pc, #436]	; (8002efc <HAL_RCC_OscConfig+0x4f4>)
 8002d46:	6a1b      	ldr	r3, [r3, #32]
 8002d48:	4a6c      	ldr	r2, [pc, #432]	; (8002efc <HAL_RCC_OscConfig+0x4f4>)
 8002d4a:	f043 0304 	orr.w	r3, r3, #4
 8002d4e:	6213      	str	r3, [r2, #32]
 8002d50:	4b6a      	ldr	r3, [pc, #424]	; (8002efc <HAL_RCC_OscConfig+0x4f4>)
 8002d52:	6a1b      	ldr	r3, [r3, #32]
 8002d54:	4a69      	ldr	r2, [pc, #420]	; (8002efc <HAL_RCC_OscConfig+0x4f4>)
 8002d56:	f043 0301 	orr.w	r3, r3, #1
 8002d5a:	6213      	str	r3, [r2, #32]
 8002d5c:	e00b      	b.n	8002d76 <HAL_RCC_OscConfig+0x36e>
 8002d5e:	4b67      	ldr	r3, [pc, #412]	; (8002efc <HAL_RCC_OscConfig+0x4f4>)
 8002d60:	6a1b      	ldr	r3, [r3, #32]
 8002d62:	4a66      	ldr	r2, [pc, #408]	; (8002efc <HAL_RCC_OscConfig+0x4f4>)
 8002d64:	f023 0301 	bic.w	r3, r3, #1
 8002d68:	6213      	str	r3, [r2, #32]
 8002d6a:	4b64      	ldr	r3, [pc, #400]	; (8002efc <HAL_RCC_OscConfig+0x4f4>)
 8002d6c:	6a1b      	ldr	r3, [r3, #32]
 8002d6e:	4a63      	ldr	r2, [pc, #396]	; (8002efc <HAL_RCC_OscConfig+0x4f4>)
 8002d70:	f023 0304 	bic.w	r3, r3, #4
 8002d74:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	68db      	ldr	r3, [r3, #12]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d015      	beq.n	8002daa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d7e:	f7fe fa67 	bl	8001250 <HAL_GetTick>
 8002d82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d84:	e00a      	b.n	8002d9c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d86:	f7fe fa63 	bl	8001250 <HAL_GetTick>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	1ad3      	subs	r3, r2, r3
 8002d90:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d901      	bls.n	8002d9c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002d98:	2303      	movs	r3, #3
 8002d9a:	e0ab      	b.n	8002ef4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d9c:	4b57      	ldr	r3, [pc, #348]	; (8002efc <HAL_RCC_OscConfig+0x4f4>)
 8002d9e:	6a1b      	ldr	r3, [r3, #32]
 8002da0:	f003 0302 	and.w	r3, r3, #2
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d0ee      	beq.n	8002d86 <HAL_RCC_OscConfig+0x37e>
 8002da8:	e014      	b.n	8002dd4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002daa:	f7fe fa51 	bl	8001250 <HAL_GetTick>
 8002dae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002db0:	e00a      	b.n	8002dc8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002db2:	f7fe fa4d 	bl	8001250 <HAL_GetTick>
 8002db6:	4602      	mov	r2, r0
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	1ad3      	subs	r3, r2, r3
 8002dbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d901      	bls.n	8002dc8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002dc4:	2303      	movs	r3, #3
 8002dc6:	e095      	b.n	8002ef4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dc8:	4b4c      	ldr	r3, [pc, #304]	; (8002efc <HAL_RCC_OscConfig+0x4f4>)
 8002dca:	6a1b      	ldr	r3, [r3, #32]
 8002dcc:	f003 0302 	and.w	r3, r3, #2
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d1ee      	bne.n	8002db2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002dd4:	7dfb      	ldrb	r3, [r7, #23]
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d105      	bne.n	8002de6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dda:	4b48      	ldr	r3, [pc, #288]	; (8002efc <HAL_RCC_OscConfig+0x4f4>)
 8002ddc:	69db      	ldr	r3, [r3, #28]
 8002dde:	4a47      	ldr	r2, [pc, #284]	; (8002efc <HAL_RCC_OscConfig+0x4f4>)
 8002de0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002de4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	69db      	ldr	r3, [r3, #28]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	f000 8081 	beq.w	8002ef2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002df0:	4b42      	ldr	r3, [pc, #264]	; (8002efc <HAL_RCC_OscConfig+0x4f4>)
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	f003 030c 	and.w	r3, r3, #12
 8002df8:	2b08      	cmp	r3, #8
 8002dfa:	d061      	beq.n	8002ec0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	69db      	ldr	r3, [r3, #28]
 8002e00:	2b02      	cmp	r3, #2
 8002e02:	d146      	bne.n	8002e92 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e04:	4b3f      	ldr	r3, [pc, #252]	; (8002f04 <HAL_RCC_OscConfig+0x4fc>)
 8002e06:	2200      	movs	r2, #0
 8002e08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e0a:	f7fe fa21 	bl	8001250 <HAL_GetTick>
 8002e0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e10:	e008      	b.n	8002e24 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e12:	f7fe fa1d 	bl	8001250 <HAL_GetTick>
 8002e16:	4602      	mov	r2, r0
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	1ad3      	subs	r3, r2, r3
 8002e1c:	2b02      	cmp	r3, #2
 8002e1e:	d901      	bls.n	8002e24 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002e20:	2303      	movs	r3, #3
 8002e22:	e067      	b.n	8002ef4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e24:	4b35      	ldr	r3, [pc, #212]	; (8002efc <HAL_RCC_OscConfig+0x4f4>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d1f0      	bne.n	8002e12 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6a1b      	ldr	r3, [r3, #32]
 8002e34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e38:	d108      	bne.n	8002e4c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002e3a:	4b30      	ldr	r3, [pc, #192]	; (8002efc <HAL_RCC_OscConfig+0x4f4>)
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	492d      	ldr	r1, [pc, #180]	; (8002efc <HAL_RCC_OscConfig+0x4f4>)
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e4c:	4b2b      	ldr	r3, [pc, #172]	; (8002efc <HAL_RCC_OscConfig+0x4f4>)
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6a19      	ldr	r1, [r3, #32]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e5c:	430b      	orrs	r3, r1
 8002e5e:	4927      	ldr	r1, [pc, #156]	; (8002efc <HAL_RCC_OscConfig+0x4f4>)
 8002e60:	4313      	orrs	r3, r2
 8002e62:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e64:	4b27      	ldr	r3, [pc, #156]	; (8002f04 <HAL_RCC_OscConfig+0x4fc>)
 8002e66:	2201      	movs	r2, #1
 8002e68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e6a:	f7fe f9f1 	bl	8001250 <HAL_GetTick>
 8002e6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e70:	e008      	b.n	8002e84 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e72:	f7fe f9ed 	bl	8001250 <HAL_GetTick>
 8002e76:	4602      	mov	r2, r0
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	1ad3      	subs	r3, r2, r3
 8002e7c:	2b02      	cmp	r3, #2
 8002e7e:	d901      	bls.n	8002e84 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002e80:	2303      	movs	r3, #3
 8002e82:	e037      	b.n	8002ef4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e84:	4b1d      	ldr	r3, [pc, #116]	; (8002efc <HAL_RCC_OscConfig+0x4f4>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d0f0      	beq.n	8002e72 <HAL_RCC_OscConfig+0x46a>
 8002e90:	e02f      	b.n	8002ef2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e92:	4b1c      	ldr	r3, [pc, #112]	; (8002f04 <HAL_RCC_OscConfig+0x4fc>)
 8002e94:	2200      	movs	r2, #0
 8002e96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e98:	f7fe f9da 	bl	8001250 <HAL_GetTick>
 8002e9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e9e:	e008      	b.n	8002eb2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ea0:	f7fe f9d6 	bl	8001250 <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	2b02      	cmp	r3, #2
 8002eac:	d901      	bls.n	8002eb2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	e020      	b.n	8002ef4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002eb2:	4b12      	ldr	r3, [pc, #72]	; (8002efc <HAL_RCC_OscConfig+0x4f4>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d1f0      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x498>
 8002ebe:	e018      	b.n	8002ef2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	69db      	ldr	r3, [r3, #28]
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	d101      	bne.n	8002ecc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e013      	b.n	8002ef4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002ecc:	4b0b      	ldr	r3, [pc, #44]	; (8002efc <HAL_RCC_OscConfig+0x4f4>)
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6a1b      	ldr	r3, [r3, #32]
 8002edc:	429a      	cmp	r2, r3
 8002ede:	d106      	bne.n	8002eee <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eea:	429a      	cmp	r2, r3
 8002eec:	d001      	beq.n	8002ef2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e000      	b.n	8002ef4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002ef2:	2300      	movs	r3, #0
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	3718      	adds	r7, #24
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}
 8002efc:	40021000 	.word	0x40021000
 8002f00:	40007000 	.word	0x40007000
 8002f04:	42420060 	.word	0x42420060

08002f08 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b084      	sub	sp, #16
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
 8002f10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d101      	bne.n	8002f1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e0d0      	b.n	80030be <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f1c:	4b6a      	ldr	r3, [pc, #424]	; (80030c8 <HAL_RCC_ClockConfig+0x1c0>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f003 0307 	and.w	r3, r3, #7
 8002f24:	683a      	ldr	r2, [r7, #0]
 8002f26:	429a      	cmp	r2, r3
 8002f28:	d910      	bls.n	8002f4c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f2a:	4b67      	ldr	r3, [pc, #412]	; (80030c8 <HAL_RCC_ClockConfig+0x1c0>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f023 0207 	bic.w	r2, r3, #7
 8002f32:	4965      	ldr	r1, [pc, #404]	; (80030c8 <HAL_RCC_ClockConfig+0x1c0>)
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	4313      	orrs	r3, r2
 8002f38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f3a:	4b63      	ldr	r3, [pc, #396]	; (80030c8 <HAL_RCC_ClockConfig+0x1c0>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 0307 	and.w	r3, r3, #7
 8002f42:	683a      	ldr	r2, [r7, #0]
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d001      	beq.n	8002f4c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e0b8      	b.n	80030be <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 0302 	and.w	r3, r3, #2
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d020      	beq.n	8002f9a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 0304 	and.w	r3, r3, #4
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d005      	beq.n	8002f70 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f64:	4b59      	ldr	r3, [pc, #356]	; (80030cc <HAL_RCC_ClockConfig+0x1c4>)
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	4a58      	ldr	r2, [pc, #352]	; (80030cc <HAL_RCC_ClockConfig+0x1c4>)
 8002f6a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002f6e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 0308 	and.w	r3, r3, #8
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d005      	beq.n	8002f88 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f7c:	4b53      	ldr	r3, [pc, #332]	; (80030cc <HAL_RCC_ClockConfig+0x1c4>)
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	4a52      	ldr	r2, [pc, #328]	; (80030cc <HAL_RCC_ClockConfig+0x1c4>)
 8002f82:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002f86:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f88:	4b50      	ldr	r3, [pc, #320]	; (80030cc <HAL_RCC_ClockConfig+0x1c4>)
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	494d      	ldr	r1, [pc, #308]	; (80030cc <HAL_RCC_ClockConfig+0x1c4>)
 8002f96:	4313      	orrs	r3, r2
 8002f98:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 0301 	and.w	r3, r3, #1
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d040      	beq.n	8003028 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d107      	bne.n	8002fbe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fae:	4b47      	ldr	r3, [pc, #284]	; (80030cc <HAL_RCC_ClockConfig+0x1c4>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d115      	bne.n	8002fe6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e07f      	b.n	80030be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	2b02      	cmp	r3, #2
 8002fc4:	d107      	bne.n	8002fd6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fc6:	4b41      	ldr	r3, [pc, #260]	; (80030cc <HAL_RCC_ClockConfig+0x1c4>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d109      	bne.n	8002fe6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e073      	b.n	80030be <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fd6:	4b3d      	ldr	r3, [pc, #244]	; (80030cc <HAL_RCC_ClockConfig+0x1c4>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 0302 	and.w	r3, r3, #2
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d101      	bne.n	8002fe6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e06b      	b.n	80030be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fe6:	4b39      	ldr	r3, [pc, #228]	; (80030cc <HAL_RCC_ClockConfig+0x1c4>)
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	f023 0203 	bic.w	r2, r3, #3
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	4936      	ldr	r1, [pc, #216]	; (80030cc <HAL_RCC_ClockConfig+0x1c4>)
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ff8:	f7fe f92a 	bl	8001250 <HAL_GetTick>
 8002ffc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ffe:	e00a      	b.n	8003016 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003000:	f7fe f926 	bl	8001250 <HAL_GetTick>
 8003004:	4602      	mov	r2, r0
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	f241 3288 	movw	r2, #5000	; 0x1388
 800300e:	4293      	cmp	r3, r2
 8003010:	d901      	bls.n	8003016 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003012:	2303      	movs	r3, #3
 8003014:	e053      	b.n	80030be <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003016:	4b2d      	ldr	r3, [pc, #180]	; (80030cc <HAL_RCC_ClockConfig+0x1c4>)
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	f003 020c 	and.w	r2, r3, #12
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	429a      	cmp	r2, r3
 8003026:	d1eb      	bne.n	8003000 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003028:	4b27      	ldr	r3, [pc, #156]	; (80030c8 <HAL_RCC_ClockConfig+0x1c0>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f003 0307 	and.w	r3, r3, #7
 8003030:	683a      	ldr	r2, [r7, #0]
 8003032:	429a      	cmp	r2, r3
 8003034:	d210      	bcs.n	8003058 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003036:	4b24      	ldr	r3, [pc, #144]	; (80030c8 <HAL_RCC_ClockConfig+0x1c0>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f023 0207 	bic.w	r2, r3, #7
 800303e:	4922      	ldr	r1, [pc, #136]	; (80030c8 <HAL_RCC_ClockConfig+0x1c0>)
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	4313      	orrs	r3, r2
 8003044:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003046:	4b20      	ldr	r3, [pc, #128]	; (80030c8 <HAL_RCC_ClockConfig+0x1c0>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 0307 	and.w	r3, r3, #7
 800304e:	683a      	ldr	r2, [r7, #0]
 8003050:	429a      	cmp	r2, r3
 8003052:	d001      	beq.n	8003058 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	e032      	b.n	80030be <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f003 0304 	and.w	r3, r3, #4
 8003060:	2b00      	cmp	r3, #0
 8003062:	d008      	beq.n	8003076 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003064:	4b19      	ldr	r3, [pc, #100]	; (80030cc <HAL_RCC_ClockConfig+0x1c4>)
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	68db      	ldr	r3, [r3, #12]
 8003070:	4916      	ldr	r1, [pc, #88]	; (80030cc <HAL_RCC_ClockConfig+0x1c4>)
 8003072:	4313      	orrs	r3, r2
 8003074:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 0308 	and.w	r3, r3, #8
 800307e:	2b00      	cmp	r3, #0
 8003080:	d009      	beq.n	8003096 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003082:	4b12      	ldr	r3, [pc, #72]	; (80030cc <HAL_RCC_ClockConfig+0x1c4>)
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	691b      	ldr	r3, [r3, #16]
 800308e:	00db      	lsls	r3, r3, #3
 8003090:	490e      	ldr	r1, [pc, #56]	; (80030cc <HAL_RCC_ClockConfig+0x1c4>)
 8003092:	4313      	orrs	r3, r2
 8003094:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003096:	f000 f821 	bl	80030dc <HAL_RCC_GetSysClockFreq>
 800309a:	4602      	mov	r2, r0
 800309c:	4b0b      	ldr	r3, [pc, #44]	; (80030cc <HAL_RCC_ClockConfig+0x1c4>)
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	091b      	lsrs	r3, r3, #4
 80030a2:	f003 030f 	and.w	r3, r3, #15
 80030a6:	490a      	ldr	r1, [pc, #40]	; (80030d0 <HAL_RCC_ClockConfig+0x1c8>)
 80030a8:	5ccb      	ldrb	r3, [r1, r3]
 80030aa:	fa22 f303 	lsr.w	r3, r2, r3
 80030ae:	4a09      	ldr	r2, [pc, #36]	; (80030d4 <HAL_RCC_ClockConfig+0x1cc>)
 80030b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80030b2:	4b09      	ldr	r3, [pc, #36]	; (80030d8 <HAL_RCC_ClockConfig+0x1d0>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4618      	mov	r0, r3
 80030b8:	f7fe f888 	bl	80011cc <HAL_InitTick>

  return HAL_OK;
 80030bc:	2300      	movs	r3, #0
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3710      	adds	r7, #16
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	bf00      	nop
 80030c8:	40022000 	.word	0x40022000
 80030cc:	40021000 	.word	0x40021000
 80030d0:	08004db0 	.word	0x08004db0
 80030d4:	20000014 	.word	0x20000014
 80030d8:	20000028 	.word	0x20000028

080030dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030dc:	b490      	push	{r4, r7}
 80030de:	b08a      	sub	sp, #40	; 0x28
 80030e0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80030e2:	4b2a      	ldr	r3, [pc, #168]	; (800318c <HAL_RCC_GetSysClockFreq+0xb0>)
 80030e4:	1d3c      	adds	r4, r7, #4
 80030e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80030e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80030ec:	f240 2301 	movw	r3, #513	; 0x201
 80030f0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80030f2:	2300      	movs	r3, #0
 80030f4:	61fb      	str	r3, [r7, #28]
 80030f6:	2300      	movs	r3, #0
 80030f8:	61bb      	str	r3, [r7, #24]
 80030fa:	2300      	movs	r3, #0
 80030fc:	627b      	str	r3, [r7, #36]	; 0x24
 80030fe:	2300      	movs	r3, #0
 8003100:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003102:	2300      	movs	r3, #0
 8003104:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003106:	4b22      	ldr	r3, [pc, #136]	; (8003190 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800310c:	69fb      	ldr	r3, [r7, #28]
 800310e:	f003 030c 	and.w	r3, r3, #12
 8003112:	2b04      	cmp	r3, #4
 8003114:	d002      	beq.n	800311c <HAL_RCC_GetSysClockFreq+0x40>
 8003116:	2b08      	cmp	r3, #8
 8003118:	d003      	beq.n	8003122 <HAL_RCC_GetSysClockFreq+0x46>
 800311a:	e02d      	b.n	8003178 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800311c:	4b1d      	ldr	r3, [pc, #116]	; (8003194 <HAL_RCC_GetSysClockFreq+0xb8>)
 800311e:	623b      	str	r3, [r7, #32]
      break;
 8003120:	e02d      	b.n	800317e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003122:	69fb      	ldr	r3, [r7, #28]
 8003124:	0c9b      	lsrs	r3, r3, #18
 8003126:	f003 030f 	and.w	r3, r3, #15
 800312a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800312e:	4413      	add	r3, r2
 8003130:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003134:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003136:	69fb      	ldr	r3, [r7, #28]
 8003138:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800313c:	2b00      	cmp	r3, #0
 800313e:	d013      	beq.n	8003168 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003140:	4b13      	ldr	r3, [pc, #76]	; (8003190 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	0c5b      	lsrs	r3, r3, #17
 8003146:	f003 0301 	and.w	r3, r3, #1
 800314a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800314e:	4413      	add	r3, r2
 8003150:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003154:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	4a0e      	ldr	r2, [pc, #56]	; (8003194 <HAL_RCC_GetSysClockFreq+0xb8>)
 800315a:	fb02 f203 	mul.w	r2, r2, r3
 800315e:	69bb      	ldr	r3, [r7, #24]
 8003160:	fbb2 f3f3 	udiv	r3, r2, r3
 8003164:	627b      	str	r3, [r7, #36]	; 0x24
 8003166:	e004      	b.n	8003172 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	4a0b      	ldr	r2, [pc, #44]	; (8003198 <HAL_RCC_GetSysClockFreq+0xbc>)
 800316c:	fb02 f303 	mul.w	r3, r2, r3
 8003170:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003174:	623b      	str	r3, [r7, #32]
      break;
 8003176:	e002      	b.n	800317e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003178:	4b06      	ldr	r3, [pc, #24]	; (8003194 <HAL_RCC_GetSysClockFreq+0xb8>)
 800317a:	623b      	str	r3, [r7, #32]
      break;
 800317c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800317e:	6a3b      	ldr	r3, [r7, #32]
}
 8003180:	4618      	mov	r0, r3
 8003182:	3728      	adds	r7, #40	; 0x28
 8003184:	46bd      	mov	sp, r7
 8003186:	bc90      	pop	{r4, r7}
 8003188:	4770      	bx	lr
 800318a:	bf00      	nop
 800318c:	08004da0 	.word	0x08004da0
 8003190:	40021000 	.word	0x40021000
 8003194:	007a1200 	.word	0x007a1200
 8003198:	003d0900 	.word	0x003d0900

0800319c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800319c:	b480      	push	{r7}
 800319e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031a0:	4b02      	ldr	r3, [pc, #8]	; (80031ac <HAL_RCC_GetHCLKFreq+0x10>)
 80031a2:	681b      	ldr	r3, [r3, #0]
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bc80      	pop	{r7}
 80031aa:	4770      	bx	lr
 80031ac:	20000014 	.word	0x20000014

080031b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80031b4:	f7ff fff2 	bl	800319c <HAL_RCC_GetHCLKFreq>
 80031b8:	4602      	mov	r2, r0
 80031ba:	4b05      	ldr	r3, [pc, #20]	; (80031d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	0a1b      	lsrs	r3, r3, #8
 80031c0:	f003 0307 	and.w	r3, r3, #7
 80031c4:	4903      	ldr	r1, [pc, #12]	; (80031d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80031c6:	5ccb      	ldrb	r3, [r1, r3]
 80031c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	bd80      	pop	{r7, pc}
 80031d0:	40021000 	.word	0x40021000
 80031d4:	08004dc0 	.word	0x08004dc0

080031d8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80031d8:	b480      	push	{r7}
 80031da:	b085      	sub	sp, #20
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80031e0:	4b0a      	ldr	r3, [pc, #40]	; (800320c <RCC_Delay+0x34>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a0a      	ldr	r2, [pc, #40]	; (8003210 <RCC_Delay+0x38>)
 80031e6:	fba2 2303 	umull	r2, r3, r2, r3
 80031ea:	0a5b      	lsrs	r3, r3, #9
 80031ec:	687a      	ldr	r2, [r7, #4]
 80031ee:	fb02 f303 	mul.w	r3, r2, r3
 80031f2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80031f4:	bf00      	nop
  }
  while (Delay --);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	1e5a      	subs	r2, r3, #1
 80031fa:	60fa      	str	r2, [r7, #12]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d1f9      	bne.n	80031f4 <RCC_Delay+0x1c>
}
 8003200:	bf00      	nop
 8003202:	bf00      	nop
 8003204:	3714      	adds	r7, #20
 8003206:	46bd      	mov	sp, r7
 8003208:	bc80      	pop	{r7}
 800320a:	4770      	bx	lr
 800320c:	20000014 	.word	0x20000014
 8003210:	10624dd3 	.word	0x10624dd3

08003214 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b086      	sub	sp, #24
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
 800321c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d101      	bne.n	8003228 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	e093      	b.n	8003350 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800322e:	b2db      	uxtb	r3, r3
 8003230:	2b00      	cmp	r3, #0
 8003232:	d106      	bne.n	8003242 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2200      	movs	r2, #0
 8003238:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800323c:	6878      	ldr	r0, [r7, #4]
 800323e:	f7fd fd2b 	bl	8000c98 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2202      	movs	r2, #2
 8003246:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	687a      	ldr	r2, [r7, #4]
 8003252:	6812      	ldr	r2, [r2, #0]
 8003254:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003258:	f023 0307 	bic.w	r3, r3, #7
 800325c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	3304      	adds	r3, #4
 8003266:	4619      	mov	r1, r3
 8003268:	4610      	mov	r0, r2
 800326a:	f000 f903 	bl	8003474 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	699b      	ldr	r3, [r3, #24]
 800327c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	6a1b      	ldr	r3, [r3, #32]
 8003284:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	697a      	ldr	r2, [r7, #20]
 800328c:	4313      	orrs	r3, r2
 800328e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003296:	f023 0303 	bic.w	r3, r3, #3
 800329a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	689a      	ldr	r2, [r3, #8]
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	699b      	ldr	r3, [r3, #24]
 80032a4:	021b      	lsls	r3, r3, #8
 80032a6:	4313      	orrs	r3, r2
 80032a8:	693a      	ldr	r2, [r7, #16]
 80032aa:	4313      	orrs	r3, r2
 80032ac:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80032b4:	f023 030c 	bic.w	r3, r3, #12
 80032b8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80032c0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80032c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	68da      	ldr	r2, [r3, #12]
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	69db      	ldr	r3, [r3, #28]
 80032ce:	021b      	lsls	r3, r3, #8
 80032d0:	4313      	orrs	r3, r2
 80032d2:	693a      	ldr	r2, [r7, #16]
 80032d4:	4313      	orrs	r3, r2
 80032d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	691b      	ldr	r3, [r3, #16]
 80032dc:	011a      	lsls	r2, r3, #4
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	6a1b      	ldr	r3, [r3, #32]
 80032e2:	031b      	lsls	r3, r3, #12
 80032e4:	4313      	orrs	r3, r2
 80032e6:	693a      	ldr	r2, [r7, #16]
 80032e8:	4313      	orrs	r3, r2
 80032ea:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80032f2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	685a      	ldr	r2, [r3, #4]
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	695b      	ldr	r3, [r3, #20]
 80032fc:	011b      	lsls	r3, r3, #4
 80032fe:	4313      	orrs	r3, r2
 8003300:	68fa      	ldr	r2, [r7, #12]
 8003302:	4313      	orrs	r3, r2
 8003304:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	697a      	ldr	r2, [r7, #20]
 800330c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	693a      	ldr	r2, [r7, #16]
 8003314:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	68fa      	ldr	r2, [r7, #12]
 800331c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2201      	movs	r2, #1
 8003322:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2201      	movs	r2, #1
 800332a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2201      	movs	r2, #1
 8003332:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2201      	movs	r2, #1
 800333a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2201      	movs	r2, #1
 8003342:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2201      	movs	r2, #1
 800334a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800334e:	2300      	movs	r3, #0
}
 8003350:	4618      	mov	r0, r3
 8003352:	3718      	adds	r7, #24
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}

08003358 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b084      	sub	sp, #16
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
 8003360:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003368:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003370:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003378:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003380:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d110      	bne.n	80033aa <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003388:	7bfb      	ldrb	r3, [r7, #15]
 800338a:	2b01      	cmp	r3, #1
 800338c:	d102      	bne.n	8003394 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800338e:	7b7b      	ldrb	r3, [r7, #13]
 8003390:	2b01      	cmp	r3, #1
 8003392:	d001      	beq.n	8003398 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e069      	b.n	800346c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2202      	movs	r2, #2
 800339c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2202      	movs	r2, #2
 80033a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80033a8:	e031      	b.n	800340e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	2b04      	cmp	r3, #4
 80033ae:	d110      	bne.n	80033d2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80033b0:	7bbb      	ldrb	r3, [r7, #14]
 80033b2:	2b01      	cmp	r3, #1
 80033b4:	d102      	bne.n	80033bc <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80033b6:	7b3b      	ldrb	r3, [r7, #12]
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d001      	beq.n	80033c0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	e055      	b.n	800346c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2202      	movs	r2, #2
 80033c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2202      	movs	r2, #2
 80033cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80033d0:	e01d      	b.n	800340e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80033d2:	7bfb      	ldrb	r3, [r7, #15]
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d108      	bne.n	80033ea <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80033d8:	7bbb      	ldrb	r3, [r7, #14]
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d105      	bne.n	80033ea <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80033de:	7b7b      	ldrb	r3, [r7, #13]
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	d102      	bne.n	80033ea <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80033e4:	7b3b      	ldrb	r3, [r7, #12]
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	d001      	beq.n	80033ee <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e03e      	b.n	800346c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2202      	movs	r2, #2
 80033f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2202      	movs	r2, #2
 80033fa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2202      	movs	r2, #2
 8003402:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2202      	movs	r2, #2
 800340a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d003      	beq.n	800341c <HAL_TIM_Encoder_Start+0xc4>
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	2b04      	cmp	r3, #4
 8003418:	d008      	beq.n	800342c <HAL_TIM_Encoder_Start+0xd4>
 800341a:	e00f      	b.n	800343c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	2201      	movs	r2, #1
 8003422:	2100      	movs	r1, #0
 8003424:	4618      	mov	r0, r3
 8003426:	f000 f887 	bl	8003538 <TIM_CCxChannelCmd>
      break;
 800342a:	e016      	b.n	800345a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	2201      	movs	r2, #1
 8003432:	2104      	movs	r1, #4
 8003434:	4618      	mov	r0, r3
 8003436:	f000 f87f 	bl	8003538 <TIM_CCxChannelCmd>
      break;
 800343a:	e00e      	b.n	800345a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	2201      	movs	r2, #1
 8003442:	2100      	movs	r1, #0
 8003444:	4618      	mov	r0, r3
 8003446:	f000 f877 	bl	8003538 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	2201      	movs	r2, #1
 8003450:	2104      	movs	r1, #4
 8003452:	4618      	mov	r0, r3
 8003454:	f000 f870 	bl	8003538 <TIM_CCxChannelCmd>
      break;
 8003458:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f042 0201 	orr.w	r2, r2, #1
 8003468:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800346a:	2300      	movs	r3, #0
}
 800346c:	4618      	mov	r0, r3
 800346e:	3710      	adds	r7, #16
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}

08003474 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003474:	b480      	push	{r7}
 8003476:	b085      	sub	sp, #20
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
 800347c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	4a29      	ldr	r2, [pc, #164]	; (800352c <TIM_Base_SetConfig+0xb8>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d00b      	beq.n	80034a4 <TIM_Base_SetConfig+0x30>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003492:	d007      	beq.n	80034a4 <TIM_Base_SetConfig+0x30>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	4a26      	ldr	r2, [pc, #152]	; (8003530 <TIM_Base_SetConfig+0xbc>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d003      	beq.n	80034a4 <TIM_Base_SetConfig+0x30>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	4a25      	ldr	r2, [pc, #148]	; (8003534 <TIM_Base_SetConfig+0xc0>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d108      	bne.n	80034b6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	68fa      	ldr	r2, [r7, #12]
 80034b2:	4313      	orrs	r3, r2
 80034b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	4a1c      	ldr	r2, [pc, #112]	; (800352c <TIM_Base_SetConfig+0xb8>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d00b      	beq.n	80034d6 <TIM_Base_SetConfig+0x62>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034c4:	d007      	beq.n	80034d6 <TIM_Base_SetConfig+0x62>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	4a19      	ldr	r2, [pc, #100]	; (8003530 <TIM_Base_SetConfig+0xbc>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d003      	beq.n	80034d6 <TIM_Base_SetConfig+0x62>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	4a18      	ldr	r2, [pc, #96]	; (8003534 <TIM_Base_SetConfig+0xc0>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d108      	bne.n	80034e8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	68db      	ldr	r3, [r3, #12]
 80034e2:	68fa      	ldr	r2, [r7, #12]
 80034e4:	4313      	orrs	r3, r2
 80034e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	695b      	ldr	r3, [r3, #20]
 80034f2:	4313      	orrs	r3, r2
 80034f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	68fa      	ldr	r2, [r7, #12]
 80034fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	689a      	ldr	r2, [r3, #8]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	4a07      	ldr	r2, [pc, #28]	; (800352c <TIM_Base_SetConfig+0xb8>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d103      	bne.n	800351c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	691a      	ldr	r2, [r3, #16]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2201      	movs	r2, #1
 8003520:	615a      	str	r2, [r3, #20]
}
 8003522:	bf00      	nop
 8003524:	3714      	adds	r7, #20
 8003526:	46bd      	mov	sp, r7
 8003528:	bc80      	pop	{r7}
 800352a:	4770      	bx	lr
 800352c:	40012c00 	.word	0x40012c00
 8003530:	40000400 	.word	0x40000400
 8003534:	40000800 	.word	0x40000800

08003538 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003538:	b480      	push	{r7}
 800353a:	b087      	sub	sp, #28
 800353c:	af00      	add	r7, sp, #0
 800353e:	60f8      	str	r0, [r7, #12]
 8003540:	60b9      	str	r1, [r7, #8]
 8003542:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	f003 031f 	and.w	r3, r3, #31
 800354a:	2201      	movs	r2, #1
 800354c:	fa02 f303 	lsl.w	r3, r2, r3
 8003550:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	6a1a      	ldr	r2, [r3, #32]
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	43db      	mvns	r3, r3
 800355a:	401a      	ands	r2, r3
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	6a1a      	ldr	r2, [r3, #32]
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	f003 031f 	and.w	r3, r3, #31
 800356a:	6879      	ldr	r1, [r7, #4]
 800356c:	fa01 f303 	lsl.w	r3, r1, r3
 8003570:	431a      	orrs	r2, r3
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	621a      	str	r2, [r3, #32]
}
 8003576:	bf00      	nop
 8003578:	371c      	adds	r7, #28
 800357a:	46bd      	mov	sp, r7
 800357c:	bc80      	pop	{r7}
 800357e:	4770      	bx	lr

08003580 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003580:	b480      	push	{r7}
 8003582:	b085      	sub	sp, #20
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
 8003588:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003590:	2b01      	cmp	r3, #1
 8003592:	d101      	bne.n	8003598 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003594:	2302      	movs	r3, #2
 8003596:	e046      	b.n	8003626 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2201      	movs	r2, #1
 800359c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2202      	movs	r2, #2
 80035a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	68fa      	ldr	r2, [r7, #12]
 80035c6:	4313      	orrs	r3, r2
 80035c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	68fa      	ldr	r2, [r7, #12]
 80035d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a16      	ldr	r2, [pc, #88]	; (8003630 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d00e      	beq.n	80035fa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035e4:	d009      	beq.n	80035fa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a12      	ldr	r2, [pc, #72]	; (8003634 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d004      	beq.n	80035fa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a10      	ldr	r2, [pc, #64]	; (8003638 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d10c      	bne.n	8003614 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003600:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	68ba      	ldr	r2, [r7, #8]
 8003608:	4313      	orrs	r3, r2
 800360a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	68ba      	ldr	r2, [r7, #8]
 8003612:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2201      	movs	r2, #1
 8003618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2200      	movs	r2, #0
 8003620:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003624:	2300      	movs	r3, #0
}
 8003626:	4618      	mov	r0, r3
 8003628:	3714      	adds	r7, #20
 800362a:	46bd      	mov	sp, r7
 800362c:	bc80      	pop	{r7}
 800362e:	4770      	bx	lr
 8003630:	40012c00 	.word	0x40012c00
 8003634:	40000400 	.word	0x40000400
 8003638:	40000800 	.word	0x40000800

0800363c <Si5351_init>:
 * ref_osc_freq - Crystal/reference oscillator frequency in 1 Hz increments.
 * Defaults to 25000000 if a 0 is used here.
 *
 */
void Si5351_init(uint8_t xtal_load_c, uint32_t ref_osc_freq)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b082      	sub	sp, #8
 8003640:	af00      	add	r7, sp, #0
 8003642:	4603      	mov	r3, r0
 8003644:	6039      	str	r1, [r7, #0]
 8003646:	71fb      	strb	r3, [r7, #7]
	lock_plla = SI5351_CLKNONE;
 8003648:	4b32      	ldr	r3, [pc, #200]	; (8003714 <Si5351_init+0xd8>)
 800364a:	2208      	movs	r2, #8
 800364c:	701a      	strb	r2, [r3, #0]
	lock_pllb = SI5351_CLKNONE;
 800364e:	4b32      	ldr	r3, [pc, #200]	; (8003718 <Si5351_init+0xdc>)
 8003650:	2208      	movs	r2, #8
 8003652:	701a      	strb	r2, [r3, #0]
	clk0_int_mode = 0;
 8003654:	4b31      	ldr	r3, [pc, #196]	; (800371c <Si5351_init+0xe0>)
 8003656:	2200      	movs	r2, #0
 8003658:	701a      	strb	r2, [r3, #0]
	clk1_int_mode = 0;
 800365a:	4b31      	ldr	r3, [pc, #196]	; (8003720 <Si5351_init+0xe4>)
 800365c:	2200      	movs	r2, #0
 800365e:	701a      	strb	r2, [r3, #0]
	clk2_int_mode = 0;
 8003660:	4b30      	ldr	r3, [pc, #192]	; (8003724 <Si5351_init+0xe8>)
 8003662:	2200      	movs	r2, #0
 8003664:	701a      	strb	r2, [r3, #0]
	plla_freq = 0ULL;
 8003666:	4930      	ldr	r1, [pc, #192]	; (8003728 <Si5351_init+0xec>)
 8003668:	f04f 0200 	mov.w	r2, #0
 800366c:	f04f 0300 	mov.w	r3, #0
 8003670:	e9c1 2300 	strd	r2, r3, [r1]
	pllb_freq = 0ULL;
 8003674:	492d      	ldr	r1, [pc, #180]	; (800372c <Si5351_init+0xf0>)
 8003676:	f04f 0200 	mov.w	r2, #0
 800367a:	f04f 0300 	mov.w	r3, #0
 800367e:	e9c1 2300 	strd	r2, r3, [r1]
	clk0_freq = 0ULL;
 8003682:	492b      	ldr	r1, [pc, #172]	; (8003730 <Si5351_init+0xf4>)
 8003684:	f04f 0200 	mov.w	r2, #0
 8003688:	f04f 0300 	mov.w	r3, #0
 800368c:	e9c1 2300 	strd	r2, r3, [r1]
	clk1_freq = 0ULL;
 8003690:	4928      	ldr	r1, [pc, #160]	; (8003734 <Si5351_init+0xf8>)
 8003692:	f04f 0200 	mov.w	r2, #0
 8003696:	f04f 0300 	mov.w	r3, #0
 800369a:	e9c1 2300 	strd	r2, r3, [r1]
	clk2_freq = 0ULL;
 800369e:	4926      	ldr	r1, [pc, #152]	; (8003738 <Si5351_init+0xfc>)
 80036a0:	f04f 0200 	mov.w	r2, #0
 80036a4:	f04f 0300 	mov.w	r3, #0
 80036a8:	e9c1 2300 	strd	r2, r3, [r1]
	xtal_freq = SI5351_XTAL_FREQ;
 80036ac:	4b23      	ldr	r3, [pc, #140]	; (800373c <Si5351_init+0x100>)
 80036ae:	4a24      	ldr	r2, [pc, #144]	; (8003740 <Si5351_init+0x104>)
 80036b0:	601a      	str	r2, [r3, #0]

	ref_correction = 0;
 80036b2:	4b24      	ldr	r3, [pc, #144]	; (8003744 <Si5351_init+0x108>)
 80036b4:	2200      	movs	r2, #0
 80036b6:	601a      	str	r2, [r3, #0]

	// Set crystal load capacitance
	si5351_write8(SI5351_CRYSTAL_LOAD, xtal_load_c);
 80036b8:	79fb      	ldrb	r3, [r7, #7]
 80036ba:	4619      	mov	r1, r3
 80036bc:	20b7      	movs	r0, #183	; 0xb7
 80036be:	f001 fa75 	bl	8004bac <si5351_write8>

	// Change the ref osc freq if different from default
	if (ref_osc_freq != 0)
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d002      	beq.n	80036ce <Si5351_init+0x92>
	{
		xtal_freq = ref_osc_freq;
 80036c8:	4a1c      	ldr	r2, [pc, #112]	; (800373c <Si5351_init+0x100>)
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	6013      	str	r3, [r2, #0]
	}

	// Initialize the CLK outputs according to flowchart in datasheet
	// First, turn them off
	si5351_write8(16, 0x80);
 80036ce:	2180      	movs	r1, #128	; 0x80
 80036d0:	2010      	movs	r0, #16
 80036d2:	f001 fa6b 	bl	8004bac <si5351_write8>
	si5351_write8(17, 0x80);
 80036d6:	2180      	movs	r1, #128	; 0x80
 80036d8:	2011      	movs	r0, #17
 80036da:	f001 fa67 	bl	8004bac <si5351_write8>
	si5351_write8(18, 0x80);
 80036de:	2180      	movs	r1, #128	; 0x80
 80036e0:	2012      	movs	r0, #18
 80036e2:	f001 fa63 	bl	8004bac <si5351_write8>

	// Turn the clocks back on...
	si5351_write8(16, 0x0c);
 80036e6:	210c      	movs	r1, #12
 80036e8:	2010      	movs	r0, #16
 80036ea:	f001 fa5f 	bl	8004bac <si5351_write8>
	si5351_write8(17, 0x0c);
 80036ee:	210c      	movs	r1, #12
 80036f0:	2011      	movs	r0, #17
 80036f2:	f001 fa5b 	bl	8004bac <si5351_write8>
	si5351_write8(18, 0x0c);
 80036f6:	210c      	movs	r1, #12
 80036f8:	2012      	movs	r0, #18
 80036fa:	f001 fa57 	bl	8004bac <si5351_write8>

	// Then reset the PLLs
	pll_reset(SI5351_PLLA);
 80036fe:	2000      	movs	r0, #0
 8003700:	f000 f822 	bl	8003748 <pll_reset>
	pll_reset(SI5351_PLLB);
 8003704:	2001      	movs	r0, #1
 8003706:	f000 f81f 	bl	8003748 <pll_reset>
}
 800370a:	bf00      	nop
 800370c:	3708      	adds	r7, #8
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}
 8003712:	bf00      	nop
 8003714:	20000548 	.word	0x20000548
 8003718:	20000568 	.word	0x20000568
 800371c:	20000559 	.word	0x20000559
 8003720:	20000558 	.word	0x20000558
 8003724:	20000529 	.word	0x20000529
 8003728:	20000540 	.word	0x20000540
 800372c:	20000550 	.word	0x20000550
 8003730:	20000560 	.word	0x20000560
 8003734:	20000530 	.word	0x20000530
 8003738:	20000518 	.word	0x20000518
 800373c:	20000520 	.word	0x20000520
 8003740:	017d7840 	.word	0x017d7840
 8003744:	2000056c 	.word	0x2000056c

08003748 <pll_reset>:
 *     (use the si5351_pll enum)
 *
 * Apply a reset to the indicated PLL.
 */
void pll_reset(enum si5351_pll target_pll)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b082      	sub	sp, #8
 800374c:	af00      	add	r7, sp, #0
 800374e:	4603      	mov	r3, r0
 8003750:	71fb      	strb	r3, [r7, #7]
	if(target_pll == SI5351_PLLA)
 8003752:	79fb      	ldrb	r3, [r7, #7]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d104      	bne.n	8003762 <pll_reset+0x1a>
 	{
    	si5351_write8(SI5351_PLL_RESET, SI5351_PLL_RESET_A);
 8003758:	2120      	movs	r1, #32
 800375a:	20b1      	movs	r0, #177	; 0xb1
 800375c:	f001 fa26 	bl	8004bac <si5351_write8>
	}
	else if(target_pll == SI5351_PLLB)
	{
	    si5351_write8(SI5351_PLL_RESET, SI5351_PLL_RESET_B);
	}
}
 8003760:	e006      	b.n	8003770 <pll_reset+0x28>
	else if(target_pll == SI5351_PLLB)
 8003762:	79fb      	ldrb	r3, [r7, #7]
 8003764:	2b01      	cmp	r3, #1
 8003766:	d103      	bne.n	8003770 <pll_reset+0x28>
	    si5351_write8(SI5351_PLL_RESET, SI5351_PLL_RESET_B);
 8003768:	2180      	movs	r1, #128	; 0x80
 800376a:	20b1      	movs	r0, #177	; 0xb1
 800376c:	f001 fa1e 	bl	8004bac <si5351_write8>
}
 8003770:	bf00      	nop
 8003772:	3708      	adds	r7, #8
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}

08003778 <Si5351_pllCalc>:

uint64_t Si5351_pllCalc(uint64_t freq, Si5351RegSet *reg, int32_t correction)
{
 8003778:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800377c:	b0a8      	sub	sp, #160	; 0xa0
 800377e:	af00      	add	r7, sp, #0
 8003780:	e9c7 0110 	strd	r0, r1, [r7, #64]	; 0x40
 8003784:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003786:	63bb      	str	r3, [r7, #56]	; 0x38
	uint64_t ref_freq = xtal_freq * SI5351_FREQ_MULT;	//xtal_freq
 8003788:	4ba3      	ldr	r3, [pc, #652]	; (8003a18 <Si5351_pllCalc+0x2a0>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	461c      	mov	r4, r3
 800378e:	f04f 0500 	mov.w	r5, #0
 8003792:	4622      	mov	r2, r4
 8003794:	462b      	mov	r3, r5
 8003796:	eb12 0802 	adds.w	r8, r2, r2
 800379a:	eb43 0903 	adc.w	r9, r3, r3
 800379e:	4642      	mov	r2, r8
 80037a0:	464b      	mov	r3, r9
 80037a2:	1912      	adds	r2, r2, r4
 80037a4:	eb45 0303 	adc.w	r3, r5, r3
 80037a8:	f04f 0000 	mov.w	r0, #0
 80037ac:	f04f 0100 	mov.w	r1, #0
 80037b0:	0159      	lsls	r1, r3, #5
 80037b2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037b6:	0150      	lsls	r0, r2, #5
 80037b8:	1812      	adds	r2, r2, r0
 80037ba:	eb41 0303 	adc.w	r3, r1, r3
 80037be:	eb12 0a04 	adds.w	sl, r2, r4
 80037c2:	eb43 0b05 	adc.w	fp, r3, r5
 80037c6:	e9c7 ab26 	strd	sl, fp, [r7, #152]	; 0x98
	uint64_t lltmp, denom;

	// Factor calibration value into nominal crystal frequency
	// Measured in parts-per-billion

	ref_freq = ref_freq + (int32_t)((((((int64_t)correction) << 31) / 1000000000LL) * ref_freq) >> 31);
 80037ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037cc:	461a      	mov	r2, r3
 80037ce:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80037d2:	1051      	asrs	r1, r2, #1
 80037d4:	6379      	str	r1, [r7, #52]	; 0x34
 80037d6:	07d3      	lsls	r3, r2, #31
 80037d8:	633b      	str	r3, [r7, #48]	; 0x30
 80037da:	a389      	add	r3, pc, #548	; (adr r3, 8003a00 <Si5351_pllCalc+0x288>)
 80037dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037e0:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80037e4:	f7fc fcb4 	bl	8000150 <__aeabi_ldivmod>
 80037e8:	4602      	mov	r2, r0
 80037ea:	460b      	mov	r3, r1
 80037ec:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 80037f0:	fb03 f001 	mul.w	r0, r3, r1
 80037f4:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 80037f8:	fb02 f101 	mul.w	r1, r2, r1
 80037fc:	4408      	add	r0, r1
 80037fe:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8003802:	fba1 2302 	umull	r2, r3, r1, r2
 8003806:	18c1      	adds	r1, r0, r3
 8003808:	460b      	mov	r3, r1
 800380a:	f04f 0000 	mov.w	r0, #0
 800380e:	f04f 0100 	mov.w	r1, #0
 8003812:	0fd0      	lsrs	r0, r2, #31
 8003814:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8003818:	0fd9      	lsrs	r1, r3, #31
 800381a:	4603      	mov	r3, r0
 800381c:	4618      	mov	r0, r3
 800381e:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8003822:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8003826:	1814      	adds	r4, r2, r0
 8003828:	623c      	str	r4, [r7, #32]
 800382a:	414b      	adcs	r3, r1
 800382c:	627b      	str	r3, [r7, #36]	; 0x24
 800382e:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8003832:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98

	// PLL bounds checking
	if (freq < SI5351_PLL_VCO_MIN * SI5351_FREQ_MULT)
 8003836:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800383a:	4878      	ldr	r0, [pc, #480]	; (8003a1c <Si5351_pllCalc+0x2a4>)
 800383c:	f04f 010d 	mov.w	r1, #13
 8003840:	4299      	cmp	r1, r3
 8003842:	bf08      	it	eq
 8003844:	4290      	cmpeq	r0, r2
 8003846:	d304      	bcc.n	8003852 <Si5351_pllCalc+0xda>
	{
		freq = SI5351_PLL_VCO_MIN * SI5351_FREQ_MULT;
 8003848:	a36f      	add	r3, pc, #444	; (adr r3, 8003a08 <Si5351_pllCalc+0x290>)
 800384a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800384e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	}
	if (freq > SI5351_PLL_VCO_MAX * SI5351_FREQ_MULT)
 8003852:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003856:	a16e      	add	r1, pc, #440	; (adr r1, 8003a10 <Si5351_pllCalc+0x298>)
 8003858:	e9d1 0100 	ldrd	r0, r1, [r1]
 800385c:	4299      	cmp	r1, r3
 800385e:	bf08      	it	eq
 8003860:	4290      	cmpeq	r0, r2
 8003862:	d204      	bcs.n	800386e <Si5351_pllCalc+0xf6>
	{
		freq = SI5351_PLL_VCO_MAX * SI5351_FREQ_MULT;
 8003864:	a36a      	add	r3, pc, #424	; (adr r3, 8003a10 <Si5351_pllCalc+0x298>)
 8003866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800386a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	}

	// Determine integer part of feedback equation
	a = freq / ref_freq;
 800386e:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8003872:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8003876:	f7fc fcbb 	bl	80001f0 <__aeabi_uldivmod>
 800387a:	4602      	mov	r2, r0
 800387c:	460b      	mov	r3, r1
 800387e:	4613      	mov	r3, r2
 8003880:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

	if (a < SI5351_PLL_A_MIN)
 8003884:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003888:	2b0e      	cmp	r3, #14
 800388a:	d816      	bhi.n	80038ba <Si5351_pllCalc+0x142>
	{
		freq = ref_freq * SI5351_PLL_A_MIN;
 800388c:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 8003890:	4622      	mov	r2, r4
 8003892:	462b      	mov	r3, r5
 8003894:	f04f 0000 	mov.w	r0, #0
 8003898:	f04f 0100 	mov.w	r1, #0
 800389c:	0119      	lsls	r1, r3, #4
 800389e:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 80038a2:	0110      	lsls	r0, r2, #4
 80038a4:	4602      	mov	r2, r0
 80038a6:	460b      	mov	r3, r1
 80038a8:	1b11      	subs	r1, r2, r4
 80038aa:	61b9      	str	r1, [r7, #24]
 80038ac:	eb63 0305 	sbc.w	r3, r3, r5
 80038b0:	61fb      	str	r3, [r7, #28]
 80038b2:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80038b6:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
	}
	if (a > SI5351_PLL_A_MAX)
 80038ba:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80038be:	2b5a      	cmp	r3, #90	; 0x5a
 80038c0:	d91f      	bls.n	8003902 <Si5351_pllCalc+0x18a>
	{
		freq = ref_freq * SI5351_PLL_A_MAX;
 80038c2:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 80038c6:	4610      	mov	r0, r2
 80038c8:	4619      	mov	r1, r3
 80038ca:	1804      	adds	r4, r0, r0
 80038cc:	613c      	str	r4, [r7, #16]
 80038ce:	4149      	adcs	r1, r1
 80038d0:	6179      	str	r1, [r7, #20]
 80038d2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80038d6:	1880      	adds	r0, r0, r2
 80038d8:	eb43 0101 	adc.w	r1, r3, r1
 80038dc:	f04f 0200 	mov.w	r2, #0
 80038e0:	f04f 0300 	mov.w	r3, #0
 80038e4:	010b      	lsls	r3, r1, #4
 80038e6:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 80038ea:	0102      	lsls	r2, r0, #4
 80038ec:	1a12      	subs	r2, r2, r0
 80038ee:	eb63 0301 	sbc.w	r3, r3, r1
 80038f2:	1891      	adds	r1, r2, r2
 80038f4:	60b9      	str	r1, [r7, #8]
 80038f6:	415b      	adcs	r3, r3
 80038f8:	60fb      	str	r3, [r7, #12]
 80038fa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80038fe:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	}

	// Find best approximation for b/c = fVCO mod fIN
	denom = 1000ULL * 1000ULL;
 8003902:	4a47      	ldr	r2, [pc, #284]	; (8003a20 <Si5351_pllCalc+0x2a8>)
 8003904:	f04f 0300 	mov.w	r3, #0
 8003908:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
	lltmp = freq % ref_freq;
 800390c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8003910:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8003914:	f7fc fc6c 	bl	80001f0 <__aeabi_uldivmod>
 8003918:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
	lltmp *= denom;
 800391c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003920:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8003924:	fb02 f203 	mul.w	r2, r2, r3
 8003928:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800392c:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8003930:	fb01 f303 	mul.w	r3, r1, r3
 8003934:	18d1      	adds	r1, r2, r3
 8003936:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800393a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800393e:	fba2 2303 	umull	r2, r3, r2, r3
 8003942:	4419      	add	r1, r3
 8003944:	460b      	mov	r3, r1
 8003946:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
 800394a:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
	do_div(lltmp, ref_freq);
 800394e:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8003952:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
 8003956:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800395a:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800395e:	f7fc fc47 	bl	80001f0 <__aeabi_uldivmod>
 8003962:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 8003966:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800396a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800396e:	f7fc fc3f 	bl	80001f0 <__aeabi_uldivmod>
 8003972:	4602      	mov	r2, r0
 8003974:	460b      	mov	r3, r1
 8003976:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80

	b = (((uint64_t)(freq % ref_freq)) * RFRAC_DENOM) / ref_freq;
 800397a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800397e:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8003982:	f7fc fc35 	bl	80001f0 <__aeabi_uldivmod>
 8003986:	4614      	mov	r4, r2
 8003988:	461d      	mov	r5, r3
 800398a:	4622      	mov	r2, r4
 800398c:	462b      	mov	r3, r5
 800398e:	f04f 0000 	mov.w	r0, #0
 8003992:	f04f 0100 	mov.w	r1, #0
 8003996:	0159      	lsls	r1, r3, #5
 8003998:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800399c:	0150      	lsls	r0, r2, #5
 800399e:	4602      	mov	r2, r0
 80039a0:	460b      	mov	r3, r1
 80039a2:	1b12      	subs	r2, r2, r4
 80039a4:	eb63 0305 	sbc.w	r3, r3, r5
 80039a8:	f04f 0000 	mov.w	r0, #0
 80039ac:	f04f 0100 	mov.w	r1, #0
 80039b0:	0259      	lsls	r1, r3, #9
 80039b2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80039b6:	0250      	lsls	r0, r2, #9
 80039b8:	4602      	mov	r2, r0
 80039ba:	460b      	mov	r3, r1
 80039bc:	1912      	adds	r2, r2, r4
 80039be:	eb45 0303 	adc.w	r3, r5, r3
 80039c2:	f04f 0000 	mov.w	r0, #0
 80039c6:	f04f 0100 	mov.w	r1, #0
 80039ca:	0199      	lsls	r1, r3, #6
 80039cc:	ea41 6192 	orr.w	r1, r1, r2, lsr #26
 80039d0:	0190      	lsls	r0, r2, #6
 80039d2:	1a80      	subs	r0, r0, r2
 80039d4:	eb61 0103 	sbc.w	r1, r1, r3
 80039d8:	1903      	adds	r3, r0, r4
 80039da:	62bb      	str	r3, [r7, #40]	; 0x28
 80039dc:	eb41 0305 	adc.w	r3, r1, r5
 80039e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039e2:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 80039e6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80039ea:	f7fc fc01 	bl	80001f0 <__aeabi_uldivmod>
 80039ee:	4602      	mov	r2, r0
 80039f0:	460b      	mov	r3, r1
 80039f2:	4613      	mov	r3, r2
 80039f4:	66fb      	str	r3, [r7, #108]	; 0x6c
	c = b ? RFRAC_DENOM : 1;
 80039f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d013      	beq.n	8003a24 <Si5351_pllCalc+0x2ac>
 80039fc:	4b08      	ldr	r3, [pc, #32]	; (8003a20 <Si5351_pllCalc+0x2a8>)
 80039fe:	e012      	b.n	8003a26 <Si5351_pllCalc+0x2ae>
 8003a00:	3b9aca00 	.word	0x3b9aca00
 8003a04:	00000000 	.word	0x00000000
 8003a08:	f8475800 	.word	0xf8475800
 8003a0c:	0000000d 	.word	0x0000000d
 8003a10:	f46b0400 	.word	0xf46b0400
 8003a14:	00000014 	.word	0x00000014
 8003a18:	20000520 	.word	0x20000520
 8003a1c:	f84757ff 	.word	0xf84757ff
 8003a20:	000f4240 	.word	0x000f4240
 8003a24:	2301      	movs	r3, #1
 8003a26:	66bb      	str	r3, [r7, #104]	; 0x68

	// Calculate parameters
    p1 = 128 * a + ((128 * b) / c) - 512;
 8003a28:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003a2c:	01da      	lsls	r2, r3, #7
 8003a2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a30:	01d9      	lsls	r1, r3, #7
 8003a32:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003a34:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a38:	4413      	add	r3, r2
 8003a3a:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8003a3e:	667b      	str	r3, [r7, #100]	; 0x64
    p2 = 128 * b - c * ((128 * b) / c);
 8003a40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a42:	01db      	lsls	r3, r3, #7
 8003a44:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003a46:	fbb3 f2f2 	udiv	r2, r3, r2
 8003a4a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003a4c:	fb01 f202 	mul.w	r2, r1, r2
 8003a50:	1a9b      	subs	r3, r3, r2
 8003a52:	663b      	str	r3, [r7, #96]	; 0x60
    p3 = c;
 8003a54:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003a56:	65fb      	str	r3, [r7, #92]	; 0x5c

	// Recalculate frequency as fIN * (a + b/c)
	lltmp  = ref_freq;
 8003a58:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8003a5c:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
	lltmp *= b;
 8003a60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a62:	461a      	mov	r2, r3
 8003a64:	f04f 0300 	mov.w	r3, #0
 8003a68:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8003a6c:	fb02 f001 	mul.w	r0, r2, r1
 8003a70:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8003a74:	fb03 f101 	mul.w	r1, r3, r1
 8003a78:	4401      	add	r1, r0
 8003a7a:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8003a7e:	fba0 2302 	umull	r2, r3, r0, r2
 8003a82:	4419      	add	r1, r3
 8003a84:	460b      	mov	r3, r1
 8003a86:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
 8003a8a:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
	do_div(lltmp, c);
 8003a8e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003a90:	461a      	mov	r2, r3
 8003a92:	f04f 0300 	mov.w	r3, #0
 8003a96:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
 8003a9a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003a9e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003aa2:	f7fc fba5 	bl	80001f0 <__aeabi_uldivmod>
 8003aa6:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 8003aaa:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003aae:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003ab2:	f7fc fb9d 	bl	80001f0 <__aeabi_uldivmod>
 8003ab6:	4602      	mov	r2, r0
 8003ab8:	460b      	mov	r3, r1
 8003aba:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
	freq = lltmp;
 8003abe:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8003ac2:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	freq += ref_freq * a;
 8003ac6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003aca:	461a      	mov	r2, r3
 8003acc:	f04f 0300 	mov.w	r3, #0
 8003ad0:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8003ad4:	fb03 f001 	mul.w	r0, r3, r1
 8003ad8:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8003adc:	fb02 f101 	mul.w	r1, r2, r1
 8003ae0:	4401      	add	r1, r0
 8003ae2:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8003ae6:	fba0 2302 	umull	r2, r3, r0, r2
 8003aea:	4419      	add	r1, r3
 8003aec:	460b      	mov	r3, r1
 8003aee:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8003af2:	1884      	adds	r4, r0, r2
 8003af4:	603c      	str	r4, [r7, #0]
 8003af6:	eb41 0303 	adc.w	r3, r1, r3
 8003afa:	607b      	str	r3, [r7, #4]
 8003afc:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003b00:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

	reg->p1 = p1;
 8003b04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b06:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003b08:	601a      	str	r2, [r3, #0]
	reg->p2 = p2;
 8003b0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b0c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003b0e:	605a      	str	r2, [r3, #4]
	reg->p3 = p3;
 8003b10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b12:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003b14:	609a      	str	r2, [r3, #8]
	return freq;
 8003b16:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
}
 8003b1a:	4610      	mov	r0, r2
 8003b1c:	4619      	mov	r1, r3
 8003b1e:	37a0      	adds	r7, #160	; 0xa0
 8003b20:	46bd      	mov	sp, r7
 8003b22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b26:	bf00      	nop

08003b28 <Si5351_set_freq>:
 *   Use a 0 to have the function choose a PLL frequency
 * clk - Clock output
 *   (use the si5351_clock enum)
 */
uint8_t Si5351_set_freq(uint64_t freq, uint64_t pll_freq, enum si5351_clock clk)
{
 8003b28:	b590      	push	{r4, r7, lr}
 8003b2a:	b095      	sub	sp, #84	; 0x54
 8003b2c:	af04      	add	r7, sp, #16
 8003b2e:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8003b32:	e9c7 2300 	strd	r2, r3, [r7]
	Si5351RegSet ms_reg;	//, pll_reg;
	enum si5351_pll target_pll;
	uint8_t write_pll = 0;
 8003b36:	2300      	movs	r3, #0
 8003b38:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	//uint8_t reg_val;
	uint8_t r_div = SI5351_OUTPUT_CLK_DIV_1;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t int_mode = 0;
 8003b42:	2300      	movs	r3, #0
 8003b44:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t div_by_4 = 0;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

	// PLL bounds checking
	if(pll_freq != 0)
 8003b4e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003b52:	4313      	orrs	r3, r2
 8003b54:	d013      	beq.n	8003b7e <Si5351_set_freq+0x56>
	{
		if ((pll_freq < SI5351_PLL_VCO_MIN * SI5351_FREQ_MULT) || (pll_freq > SI5351_PLL_VCO_MAX * SI5351_FREQ_MULT))
 8003b56:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003b5a:	4889      	ldr	r0, [pc, #548]	; (8003d80 <Si5351_set_freq+0x258>)
 8003b5c:	f04f 010d 	mov.w	r1, #13
 8003b60:	4299      	cmp	r1, r3
 8003b62:	bf08      	it	eq
 8003b64:	4290      	cmpeq	r0, r2
 8003b66:	d208      	bcs.n	8003b7a <Si5351_set_freq+0x52>
 8003b68:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003b6c:	a17c      	add	r1, pc, #496	; (adr r1, 8003d60 <Si5351_set_freq+0x238>)
 8003b6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003b72:	4299      	cmp	r1, r3
 8003b74:	bf08      	it	eq
 8003b76:	4290      	cmpeq	r0, r2
 8003b78:	d201      	bcs.n	8003b7e <Si5351_set_freq+0x56>
		{
			return 1;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e22c      	b.n	8003fd8 <Si5351_set_freq+0x4b0>
		}
	}

	// Lower bounds check
	if(freq < SI5351_CLKOUT_MIN_FREQ * SI5351_FREQ_MULT)
 8003b7e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003b82:	4880      	ldr	r0, [pc, #512]	; (8003d84 <Si5351_set_freq+0x25c>)
 8003b84:	f04f 0100 	mov.w	r1, #0
 8003b88:	4299      	cmp	r1, r3
 8003b8a:	bf08      	it	eq
 8003b8c:	4290      	cmpeq	r0, r2
 8003b8e:	d304      	bcc.n	8003b9a <Si5351_set_freq+0x72>
	{
		freq = SI5351_CLKOUT_MIN_FREQ * SI5351_FREQ_MULT;
 8003b90:	4a7d      	ldr	r2, [pc, #500]	; (8003d88 <Si5351_set_freq+0x260>)
 8003b92:	f04f 0300 	mov.w	r3, #0
 8003b96:	e9c7 2302 	strd	r2, r3, [r7, #8]
	}

	// Upper bounds check
	if(freq > SI5351_MULTISYNTH_MAX_FREQ * SI5351_FREQ_MULT)
 8003b9a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003b9e:	a172      	add	r1, pc, #456	; (adr r1, 8003d68 <Si5351_set_freq+0x240>)
 8003ba0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003ba4:	4299      	cmp	r1, r3
 8003ba6:	bf08      	it	eq
 8003ba8:	4290      	cmpeq	r0, r2
 8003baa:	d204      	bcs.n	8003bb6 <Si5351_set_freq+0x8e>
	{
		freq = SI5351_MULTISYNTH_MAX_FREQ * SI5351_FREQ_MULT;
 8003bac:	a36e      	add	r3, pc, #440	; (adr r3, 8003d68 <Si5351_set_freq+0x240>)
 8003bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bb2:	e9c7 2302 	strd	r2, r3, [r7, #8]
	}

	// Select the proper R div value
	r_div = select_r_div(&freq);
 8003bb6:	f107 0308 	add.w	r3, r7, #8
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f000 fa1e 	bl	8003ffc <select_r_div>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	// Calculate the synth parameters
	// If pll_freq is 0 and freq < 150 MHz, let the algorithm pick a PLL frequency
	if((pll_freq) && (freq < SI5351_MULTISYNTH_DIVBY4_FREQ * SI5351_FREQ_MULT))
 8003bc6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	d039      	beq.n	8003c42 <Si5351_set_freq+0x11a>
 8003bce:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003bd2:	a167      	add	r1, pc, #412	; (adr r1, 8003d70 <Si5351_set_freq+0x248>)
 8003bd4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003bd8:	4299      	cmp	r1, r3
 8003bda:	bf08      	it	eq
 8003bdc:	4290      	cmpeq	r0, r2
 8003bde:	d330      	bcc.n	8003c42 <Si5351_set_freq+0x11a>
	{
		multisynth_calc(freq, pll_freq, &ms_reg);
 8003be0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003be4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003be8:	9300      	str	r3, [sp, #0]
 8003bea:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003bee:	f000 fb23 	bl	8004238 <multisynth_calc>
		write_pll = 0;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
		div_by_4 = 0;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		int_mode = 0;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c

		switch(clk)
 8003c04:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8003c08:	2b02      	cmp	r3, #2
 8003c0a:	d012      	beq.n	8003c32 <Si5351_set_freq+0x10a>
 8003c0c:	2b02      	cmp	r3, #2
 8003c0e:	dc16      	bgt.n	8003c3e <Si5351_set_freq+0x116>
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d002      	beq.n	8003c1a <Si5351_set_freq+0xf2>
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d006      	beq.n	8003c26 <Si5351_set_freq+0xfe>
			break;
		case SI5351_CLK2:
			clk2_freq = freq;
			break;
		default:
			break;
 8003c18:	e011      	b.n	8003c3e <Si5351_set_freq+0x116>
			clk0_freq = freq;
 8003c1a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003c1e:	495b      	ldr	r1, [pc, #364]	; (8003d8c <Si5351_set_freq+0x264>)
 8003c20:	e9c1 2300 	strd	r2, r3, [r1]
			break;
 8003c24:	e00c      	b.n	8003c40 <Si5351_set_freq+0x118>
			clk1_freq = freq;
 8003c26:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003c2a:	4959      	ldr	r1, [pc, #356]	; (8003d90 <Si5351_set_freq+0x268>)
 8003c2c:	e9c1 2300 	strd	r2, r3, [r1]
			break;
 8003c30:	e006      	b.n	8003c40 <Si5351_set_freq+0x118>
			clk2_freq = freq;
 8003c32:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003c36:	4957      	ldr	r1, [pc, #348]	; (8003d94 <Si5351_set_freq+0x26c>)
 8003c38:	e9c1 2300 	strd	r2, r3, [r1]
			break;
 8003c3c:	e000      	b.n	8003c40 <Si5351_set_freq+0x118>
			break;
 8003c3e:	bf00      	nop
		switch(clk)
 8003c40:	e1ae      	b.n	8003fa0 <Si5351_set_freq+0x478>
		}
	}
	else
	{
		// The PLL must be calculated and set by firmware when 150 MHz <= freq <= 160 MHz
		if(freq >= SI5351_MULTISYNTH_DIVBY4_FREQ * SI5351_FREQ_MULT)
 8003c42:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003c46:	a14a      	add	r1, pc, #296	; (adr r1, 8003d70 <Si5351_set_freq+0x248>)
 8003c48:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003c4c:	4299      	cmp	r1, r3
 8003c4e:	bf08      	it	eq
 8003c50:	4290      	cmpeq	r0, r2
 8003c52:	d215      	bcs.n	8003c80 <Si5351_set_freq+0x158>
		{
			pll_freq = multisynth_calc(freq, 0, &ms_reg);
 8003c54:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003c58:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003c5c:	9300      	str	r3, [sp, #0]
 8003c5e:	f04f 0200 	mov.w	r2, #0
 8003c62:	f04f 0300 	mov.w	r3, #0
 8003c66:	f000 fae7 	bl	8004238 <multisynth_calc>
 8003c6a:	e9c7 0100 	strd	r0, r1, [r7]
			write_pll = 1;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
			div_by_4 = 1;
 8003c74:	2301      	movs	r3, #1
 8003c76:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			int_mode = 1;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c

		// Determine which PLL to use
		// CLK0 gets PLLA, CLK1 gets PLLB
		// CLK2 gets PLLB if necessary
		// Only good for Si5351A3 variant at the moment
		switch(clk)
 8003c80:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8003c84:	2b02      	cmp	r3, #2
 8003c86:	f000 80ed 	beq.w	8003e64 <Si5351_set_freq+0x33c>
 8003c8a:	2b02      	cmp	r3, #2
 8003c8c:	f300 8186 	bgt.w	8003f9c <Si5351_set_freq+0x474>
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d002      	beq.n	8003c9a <Si5351_set_freq+0x172>
 8003c94:	2b01      	cmp	r3, #1
 8003c96:	d022      	beq.n	8003cde <Si5351_set_freq+0x1b6>
 8003c98:	e180      	b.n	8003f9c <Si5351_set_freq+0x474>
		{
		case SI5351_CLK0:
			pll_freq = multisynth_calc(freq, 0, &ms_reg);
 8003c9a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003c9e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003ca2:	9300      	str	r3, [sp, #0]
 8003ca4:	f04f 0200 	mov.w	r2, #0
 8003ca8:	f04f 0300 	mov.w	r3, #0
 8003cac:	f000 fac4 	bl	8004238 <multisynth_calc>
 8003cb0:	e9c7 0100 	strd	r0, r1, [r7]
			target_pll = SI5351_PLLA;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			write_pll = 1;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
			set_ms_source(SI5351_CLK0, SI5351_PLLA);
 8003cc0:	2100      	movs	r1, #0
 8003cc2:	2000      	movs	r0, #0
 8003cc4:	f000 fe7a 	bl	80049bc <set_ms_source>

			plla_freq = pll_freq;
 8003cc8:	4933      	ldr	r1, [pc, #204]	; (8003d98 <Si5351_set_freq+0x270>)
 8003cca:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003cce:	e9c1 2300 	strd	r2, r3, [r1]
			clk0_freq = freq;
 8003cd2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003cd6:	492d      	ldr	r1, [pc, #180]	; (8003d8c <Si5351_set_freq+0x264>)
 8003cd8:	e9c1 2300 	strd	r2, r3, [r1]
			break;
 8003cdc:	e160      	b.n	8003fa0 <Si5351_set_freq+0x478>
		case SI5351_CLK1:
			// Check to see if PLLB is locked due to other output being < 1.024 MHz or >= 112.5 MHz
			if(lock_pllb == SI5351_CLK2)
 8003cde:	4b2f      	ldr	r3, [pc, #188]	; (8003d9c <Si5351_set_freq+0x274>)
 8003ce0:	781b      	ldrb	r3, [r3, #0]
 8003ce2:	2b02      	cmp	r3, #2
 8003ce4:	d160      	bne.n	8003da8 <Si5351_set_freq+0x280>
			{
				// We can't have a 2nd output < 1.024 MHz or >= 112.5 MHz on the same PLL unless exact same freq, so exit
				if((freq >= SI5351_MULTISYNTH_SHARE_MAX * SI5351_FREQ_MULT
 8003ce6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003cea:	a123      	add	r1, pc, #140	; (adr r1, 8003d78 <Si5351_set_freq+0x250>)
 8003cec:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003cf0:	4299      	cmp	r1, r3
 8003cf2:	bf08      	it	eq
 8003cf4:	4290      	cmpeq	r0, r2
 8003cf6:	d308      	bcc.n	8003d0a <Si5351_set_freq+0x1e2>
					|| freq < SI5351_CLKOUT_MIN_FREQ * SI5351_FREQ_MULT * 128) && freq != clk2_freq)
 8003cf8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003cfc:	4828      	ldr	r0, [pc, #160]	; (8003da0 <Si5351_set_freq+0x278>)
 8003cfe:	f04f 0100 	mov.w	r1, #0
 8003d02:	428b      	cmp	r3, r1
 8003d04:	bf08      	it	eq
 8003d06:	4282      	cmpeq	r2, r0
 8003d08:	d211      	bcs.n	8003d2e <Si5351_set_freq+0x206>
 8003d0a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003d0e:	4b21      	ldr	r3, [pc, #132]	; (8003d94 <Si5351_set_freq+0x26c>)
 8003d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d14:	4299      	cmp	r1, r3
 8003d16:	bf08      	it	eq
 8003d18:	4290      	cmpeq	r0, r2
 8003d1a:	d008      	beq.n	8003d2e <Si5351_set_freq+0x206>
				{
					clk1_freq = 0;
 8003d1c:	491c      	ldr	r1, [pc, #112]	; (8003d90 <Si5351_set_freq+0x268>)
 8003d1e:	f04f 0200 	mov.w	r2, #0
 8003d22:	f04f 0300 	mov.w	r3, #0
 8003d26:	e9c1 2300 	strd	r2, r3, [r1]
					return 1;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e154      	b.n	8003fd8 <Si5351_set_freq+0x4b0>
				}
				// Else, set multisynth to same PLL freq as CLK2
				else
				{
					pll_freq = pllb_freq;
 8003d2e:	4b1d      	ldr	r3, [pc, #116]	; (8003da4 <Si5351_set_freq+0x27c>)
 8003d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d34:	e9c7 2300 	strd	r2, r3, [r7]
					multisynth_calc(freq, pll_freq, &ms_reg);
 8003d38:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003d3c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003d40:	9300      	str	r3, [sp, #0]
 8003d42:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003d46:	f000 fa77 	bl	8004238 <multisynth_calc>
					write_pll = 0;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
					set_ms_source(SI5351_CLK1, SI5351_PLLB);
 8003d50:	2101      	movs	r1, #1
 8003d52:	2001      	movs	r0, #1
 8003d54:	f000 fe32 	bl	80049bc <set_ms_source>
 8003d58:	e03f      	b.n	8003dda <Si5351_set_freq+0x2b2>
 8003d5a:	bf00      	nop
 8003d5c:	f3af 8000 	nop.w
 8003d60:	f46b0400 	.word	0xf46b0400
 8003d64:	00000014 	.word	0x00000014
 8003d68:	3d1ac100 	.word	0x3d1ac100
 8003d6c:	00000005 	.word	0x00000005
 8003d70:	7e11d5ff 	.word	0x7e11d5ff
 8003d74:	00000003 	.word	0x00000003
 8003d78:	540be3ff 	.word	0x540be3ff
 8003d7c:	00000002 	.word	0x00000002
 8003d80:	f84757ff 	.word	0xf84757ff
 8003d84:	00061a7f 	.word	0x00061a7f
 8003d88:	00061a80 	.word	0x00061a80
 8003d8c:	20000560 	.word	0x20000560
 8003d90:	20000530 	.word	0x20000530
 8003d94:	20000518 	.word	0x20000518
 8003d98:	20000540 	.word	0x20000540
 8003d9c:	20000568 	.word	0x20000568
 8003da0:	030d4000 	.word	0x030d4000
 8003da4:	20000550 	.word	0x20000550
				}
			}
			else
			{
				pllb_freq = pll_freq;
 8003da8:	498f      	ldr	r1, [pc, #572]	; (8003fe8 <Si5351_set_freq+0x4c0>)
 8003daa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003dae:	e9c1 2300 	strd	r2, r3, [r1]
				pll_freq = multisynth_calc(freq, 0, &ms_reg);
 8003db2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003db6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003dba:	9300      	str	r3, [sp, #0]
 8003dbc:	f04f 0200 	mov.w	r2, #0
 8003dc0:	f04f 0300 	mov.w	r3, #0
 8003dc4:	f000 fa38 	bl	8004238 <multisynth_calc>
 8003dc8:	e9c7 0100 	strd	r0, r1, [r7]
				write_pll = 1;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
				set_ms_source(SI5351_CLK1, SI5351_PLLB);
 8003dd2:	2101      	movs	r1, #1
 8003dd4:	2001      	movs	r0, #1
 8003dd6:	f000 fdf1 	bl	80049bc <set_ms_source>
			}

			if(freq >= SI5351_MULTISYNTH_SHARE_MAX * SI5351_FREQ_MULT || freq < SI5351_CLKOUT_MIN_FREQ * SI5351_FREQ_MULT * 128)
 8003dda:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003dde:	a180      	add	r1, pc, #512	; (adr r1, 8003fe0 <Si5351_set_freq+0x4b8>)
 8003de0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003de4:	4299      	cmp	r1, r3
 8003de6:	bf08      	it	eq
 8003de8:	4290      	cmpeq	r0, r2
 8003dea:	d308      	bcc.n	8003dfe <Si5351_set_freq+0x2d6>
 8003dec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003df0:	487e      	ldr	r0, [pc, #504]	; (8003fec <Si5351_set_freq+0x4c4>)
 8003df2:	f04f 0100 	mov.w	r1, #0
 8003df6:	428b      	cmp	r3, r1
 8003df8:	bf08      	it	eq
 8003dfa:	4282      	cmpeq	r2, r0
 8003dfc:	d226      	bcs.n	8003e4c <Si5351_set_freq+0x324>
			{
				lock_pllb = SI5351_CLK1;
 8003dfe:	4b7c      	ldr	r3, [pc, #496]	; (8003ff0 <Si5351_set_freq+0x4c8>)
 8003e00:	2201      	movs	r2, #1
 8003e02:	701a      	strb	r2, [r3, #0]

				// Recalc and rewrite the multisynth parameters on CLK2
				if(clk2_freq != 0)
 8003e04:	4b7b      	ldr	r3, [pc, #492]	; (8003ff4 <Si5351_set_freq+0x4cc>)
 8003e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	d021      	beq.n	8003e52 <Si5351_set_freq+0x32a>
				{
					Si5351RegSet ms_temp_reg;
					r_div = select_r_div(&clk2_freq);
 8003e0e:	4879      	ldr	r0, [pc, #484]	; (8003ff4 <Si5351_set_freq+0x4cc>)
 8003e10:	f000 f8f4 	bl	8003ffc <select_r_div>
 8003e14:	4603      	mov	r3, r0
 8003e16:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
					multisynth_calc(clk2_freq, pllb_freq, &ms_temp_reg);
 8003e1a:	4b76      	ldr	r3, [pc, #472]	; (8003ff4 <Si5351_set_freq+0x4cc>)
 8003e1c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003e20:	4b71      	ldr	r3, [pc, #452]	; (8003fe8 <Si5351_set_freq+0x4c0>)
 8003e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e26:	f107 0420 	add.w	r4, r7, #32
 8003e2a:	9400      	str	r4, [sp, #0]
 8003e2c:	f000 fa04 	bl	8004238 <multisynth_calc>
					set_ms(SI5351_CLK2, ms_temp_reg, 0, r_div, 0);
 8003e30:	2300      	movs	r3, #0
 8003e32:	9302      	str	r3, [sp, #8]
 8003e34:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8003e38:	9301      	str	r3, [sp, #4]
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	9300      	str	r3, [sp, #0]
 8003e3e:	f107 0320 	add.w	r3, r7, #32
 8003e42:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003e44:	2002      	movs	r0, #2
 8003e46:	f000 fbef 	bl	8004628 <set_ms>
				if(clk2_freq != 0)
 8003e4a:	e002      	b.n	8003e52 <Si5351_set_freq+0x32a>
				}
			}
			else
			{
				lock_pllb = SI5351_CLKNONE;
 8003e4c:	4b68      	ldr	r3, [pc, #416]	; (8003ff0 <Si5351_set_freq+0x4c8>)
 8003e4e:	2208      	movs	r2, #8
 8003e50:	701a      	strb	r2, [r3, #0]
			}

			target_pll = SI5351_PLLB;
 8003e52:	2301      	movs	r3, #1
 8003e54:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			clk1_freq = freq;
 8003e58:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003e5c:	4966      	ldr	r1, [pc, #408]	; (8003ff8 <Si5351_set_freq+0x4d0>)
 8003e5e:	e9c1 2300 	strd	r2, r3, [r1]
			break;
 8003e62:	e09d      	b.n	8003fa0 <Si5351_set_freq+0x478>
		case SI5351_CLK2:
			// Check to see if PLLB is locked due to other output being < 1.024 MHz or >= 112.5 MHz
			if(lock_pllb == SI5351_CLK1)
 8003e64:	4b62      	ldr	r3, [pc, #392]	; (8003ff0 <Si5351_set_freq+0x4c8>)
 8003e66:	781b      	ldrb	r3, [r3, #0]
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d139      	bne.n	8003ee0 <Si5351_set_freq+0x3b8>
			{
				// We can't have a 2nd output < 1.024 MHz  or >= 112.5 MHz on the same PLL unless exact same freq, so exit
				if((freq >= SI5351_MULTISYNTH_SHARE_MAX * SI5351_FREQ_MULT
 8003e6c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003e70:	a15b      	add	r1, pc, #364	; (adr r1, 8003fe0 <Si5351_set_freq+0x4b8>)
 8003e72:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003e76:	4299      	cmp	r1, r3
 8003e78:	bf08      	it	eq
 8003e7a:	4290      	cmpeq	r0, r2
 8003e7c:	d308      	bcc.n	8003e90 <Si5351_set_freq+0x368>
					|| freq < SI5351_CLKOUT_MIN_FREQ * SI5351_FREQ_MULT * 128) && freq != clk2_freq)
 8003e7e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003e82:	485a      	ldr	r0, [pc, #360]	; (8003fec <Si5351_set_freq+0x4c4>)
 8003e84:	f04f 0100 	mov.w	r1, #0
 8003e88:	428b      	cmp	r3, r1
 8003e8a:	bf08      	it	eq
 8003e8c:	4282      	cmpeq	r2, r0
 8003e8e:	d211      	bcs.n	8003eb4 <Si5351_set_freq+0x38c>
 8003e90:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003e94:	4b57      	ldr	r3, [pc, #348]	; (8003ff4 <Si5351_set_freq+0x4cc>)
 8003e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e9a:	4299      	cmp	r1, r3
 8003e9c:	bf08      	it	eq
 8003e9e:	4290      	cmpeq	r0, r2
 8003ea0:	d008      	beq.n	8003eb4 <Si5351_set_freq+0x38c>
				{
					clk2_freq = 0;
 8003ea2:	4954      	ldr	r1, [pc, #336]	; (8003ff4 <Si5351_set_freq+0x4cc>)
 8003ea4:	f04f 0200 	mov.w	r2, #0
 8003ea8:	f04f 0300 	mov.w	r3, #0
 8003eac:	e9c1 2300 	strd	r2, r3, [r1]
					return 1;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	e091      	b.n	8003fd8 <Si5351_set_freq+0x4b0>
				}
				// Else, set multisynth to same PLL freq as CLK1
				else
				{
					pll_freq = pllb_freq;
 8003eb4:	4b4c      	ldr	r3, [pc, #304]	; (8003fe8 <Si5351_set_freq+0x4c0>)
 8003eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eba:	e9c7 2300 	strd	r2, r3, [r7]
					multisynth_calc(freq, pll_freq, &ms_reg);
 8003ebe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003ec2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003ec6:	9300      	str	r3, [sp, #0]
 8003ec8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003ecc:	f000 f9b4 	bl	8004238 <multisynth_calc>
					write_pll = 0;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
					set_ms_source(SI5351_CLK2, SI5351_PLLB);
 8003ed6:	2101      	movs	r1, #1
 8003ed8:	2002      	movs	r0, #2
 8003eda:	f000 fd6f 	bl	80049bc <set_ms_source>
 8003ede:	e018      	b.n	8003f12 <Si5351_set_freq+0x3ea>
				}
			}
			// need to account for CLK2 set before CLK1
			else
			{
				pllb_freq = pll_freq;
 8003ee0:	4941      	ldr	r1, [pc, #260]	; (8003fe8 <Si5351_set_freq+0x4c0>)
 8003ee2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003ee6:	e9c1 2300 	strd	r2, r3, [r1]
				pll_freq = multisynth_calc(freq, 0, &ms_reg);
 8003eea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003eee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003ef2:	9300      	str	r3, [sp, #0]
 8003ef4:	f04f 0200 	mov.w	r2, #0
 8003ef8:	f04f 0300 	mov.w	r3, #0
 8003efc:	f000 f99c 	bl	8004238 <multisynth_calc>
 8003f00:	e9c7 0100 	strd	r0, r1, [r7]
				write_pll = 1;
 8003f04:	2301      	movs	r3, #1
 8003f06:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
				set_ms_source(SI5351_CLK2, SI5351_PLLB);
 8003f0a:	2101      	movs	r1, #1
 8003f0c:	2002      	movs	r0, #2
 8003f0e:	f000 fd55 	bl	80049bc <set_ms_source>
			}

			if(freq >= SI5351_MULTISYNTH_SHARE_MAX * SI5351_FREQ_MULT || freq < SI5351_CLKOUT_MIN_FREQ * SI5351_FREQ_MULT * 128)
 8003f12:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003f16:	a132      	add	r1, pc, #200	; (adr r1, 8003fe0 <Si5351_set_freq+0x4b8>)
 8003f18:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003f1c:	4299      	cmp	r1, r3
 8003f1e:	bf08      	it	eq
 8003f20:	4290      	cmpeq	r0, r2
 8003f22:	d308      	bcc.n	8003f36 <Si5351_set_freq+0x40e>
 8003f24:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003f28:	4830      	ldr	r0, [pc, #192]	; (8003fec <Si5351_set_freq+0x4c4>)
 8003f2a:	f04f 0100 	mov.w	r1, #0
 8003f2e:	428b      	cmp	r3, r1
 8003f30:	bf08      	it	eq
 8003f32:	4282      	cmpeq	r2, r0
 8003f34:	d226      	bcs.n	8003f84 <Si5351_set_freq+0x45c>
			{
				lock_pllb = SI5351_CLK2;
 8003f36:	4b2e      	ldr	r3, [pc, #184]	; (8003ff0 <Si5351_set_freq+0x4c8>)
 8003f38:	2202      	movs	r2, #2
 8003f3a:	701a      	strb	r2, [r3, #0]

				if(clk1_freq != 0)
 8003f3c:	4b2e      	ldr	r3, [pc, #184]	; (8003ff8 <Si5351_set_freq+0x4d0>)
 8003f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f42:	4313      	orrs	r3, r2
 8003f44:	d021      	beq.n	8003f8a <Si5351_set_freq+0x462>
				{
					// Recalc and rewrite the multisynth parameters on CLK1
					Si5351RegSet ms_temp_reg;
					r_div = select_r_div(&clk1_freq);
 8003f46:	482c      	ldr	r0, [pc, #176]	; (8003ff8 <Si5351_set_freq+0x4d0>)
 8003f48:	f000 f858 	bl	8003ffc <select_r_div>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
					multisynth_calc(clk1_freq, pllb_freq, &ms_temp_reg);
 8003f52:	4b29      	ldr	r3, [pc, #164]	; (8003ff8 <Si5351_set_freq+0x4d0>)
 8003f54:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003f58:	4b23      	ldr	r3, [pc, #140]	; (8003fe8 <Si5351_set_freq+0x4c0>)
 8003f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f5e:	f107 0414 	add.w	r4, r7, #20
 8003f62:	9400      	str	r4, [sp, #0]
 8003f64:	f000 f968 	bl	8004238 <multisynth_calc>
					set_ms(SI5351_CLK1, ms_temp_reg, 0, r_div, 0);
 8003f68:	2300      	movs	r3, #0
 8003f6a:	9302      	str	r3, [sp, #8]
 8003f6c:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8003f70:	9301      	str	r3, [sp, #4]
 8003f72:	2300      	movs	r3, #0
 8003f74:	9300      	str	r3, [sp, #0]
 8003f76:	f107 0314 	add.w	r3, r7, #20
 8003f7a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003f7c:	2001      	movs	r0, #1
 8003f7e:	f000 fb53 	bl	8004628 <set_ms>
				if(clk1_freq != 0)
 8003f82:	e002      	b.n	8003f8a <Si5351_set_freq+0x462>
				}
			}
			else
			{
				lock_pllb = SI5351_CLKNONE;
 8003f84:	4b1a      	ldr	r3, [pc, #104]	; (8003ff0 <Si5351_set_freq+0x4c8>)
 8003f86:	2208      	movs	r2, #8
 8003f88:	701a      	strb	r2, [r3, #0]
			}

			target_pll = SI5351_PLLB;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			clk2_freq = freq;
 8003f90:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003f94:	4917      	ldr	r1, [pc, #92]	; (8003ff4 <Si5351_set_freq+0x4cc>)
 8003f96:	e9c1 2300 	strd	r2, r3, [r1]
			break;
 8003f9a:	e001      	b.n	8003fa0 <Si5351_set_freq+0x478>
		default:
			return 1;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	e01b      	b.n	8003fd8 <Si5351_set_freq+0x4b0>
		}
	}

	// Set multisynth registers (MS must be set before PLL)
	set_ms(clk, ms_reg, int_mode, r_div, div_by_4);
 8003fa0:	f897 0050 	ldrb.w	r0, [r7, #80]	; 0x50
 8003fa4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8003fa8:	9302      	str	r3, [sp, #8]
 8003faa:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8003fae:	9301      	str	r3, [sp, #4]
 8003fb0:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8003fb4:	9300      	str	r3, [sp, #0]
 8003fb6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003fba:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003fbc:	f000 fb34 	bl	8004628 <set_ms>

	// Set PLL if necessary
	if(write_pll == 1)
 8003fc0:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8003fc4:	2b01      	cmp	r3, #1
 8003fc6:	d106      	bne.n	8003fd6 <Si5351_set_freq+0x4ae>
	{
		Si5351_set_pll(pll_freq, target_pll);
 8003fc8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003fcc:	461a      	mov	r2, r3
 8003fce:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003fd2:	f000 fa6b 	bl	80044ac <Si5351_set_pll>
	}

	return 0;
 8003fd6:	2300      	movs	r3, #0
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	3744      	adds	r7, #68	; 0x44
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd90      	pop	{r4, r7, pc}
 8003fe0:	540be3ff 	.word	0x540be3ff
 8003fe4:	00000002 	.word	0x00000002
 8003fe8:	20000550 	.word	0x20000550
 8003fec:	030d4000 	.word	0x030d4000
 8003ff0:	20000568 	.word	0x20000568
 8003ff4:	20000518 	.word	0x20000518
 8003ff8:	20000530 	.word	0x20000530

08003ffc <select_r_div>:


uint8_t select_r_div(uint64_t *freq)
{
 8003ffc:	b4b0      	push	{r4, r5, r7}
 8003ffe:	b085      	sub	sp, #20
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
	uint8_t r_div = SI5351_OUTPUT_CLK_DIV_1;
 8004004:	2300      	movs	r3, #0
 8004006:	73fb      	strb	r3, [r7, #15]

	// Choose the correct R divider
	if((*freq >= SI5351_CLKOUT_MIN_FREQ * SI5351_FREQ_MULT) && (*freq < SI5351_CLKOUT_MIN_FREQ * SI5351_FREQ_MULT * 2))
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800400e:	4881      	ldr	r0, [pc, #516]	; (8004214 <select_r_div+0x218>)
 8004010:	f04f 0100 	mov.w	r1, #0
 8004014:	4299      	cmp	r1, r3
 8004016:	bf08      	it	eq
 8004018:	4290      	cmpeq	r0, r2
 800401a:	d21a      	bcs.n	8004052 <select_r_div+0x56>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004022:	487d      	ldr	r0, [pc, #500]	; (8004218 <select_r_div+0x21c>)
 8004024:	f04f 0100 	mov.w	r1, #0
 8004028:	4299      	cmp	r1, r3
 800402a:	bf08      	it	eq
 800402c:	4290      	cmpeq	r0, r2
 800402e:	d310      	bcc.n	8004052 <select_r_div+0x56>
	{
		r_div = SI5351_OUTPUT_CLK_DIV_128;
 8004030:	2307      	movs	r3, #7
 8004032:	73fb      	strb	r3, [r7, #15]
		*freq *= 128ULL;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	e9d3 0100 	ldrd	r0, r1, [r3]
 800403a:	f04f 0200 	mov.w	r2, #0
 800403e:	f04f 0300 	mov.w	r3, #0
 8004042:	01cb      	lsls	r3, r1, #7
 8004044:	ea43 6350 	orr.w	r3, r3, r0, lsr #25
 8004048:	01c2      	lsls	r2, r0, #7
 800404a:	6879      	ldr	r1, [r7, #4]
 800404c:	e9c1 2300 	strd	r2, r3, [r1]
 8004050:	e0d9      	b.n	8004206 <select_r_div+0x20a>
	}
	else if((*freq >= SI5351_CLKOUT_MIN_FREQ * SI5351_FREQ_MULT * 2) && (*freq < SI5351_CLKOUT_MIN_FREQ * SI5351_FREQ_MULT * 4))
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004058:	486f      	ldr	r0, [pc, #444]	; (8004218 <select_r_div+0x21c>)
 800405a:	f04f 0100 	mov.w	r1, #0
 800405e:	4299      	cmp	r1, r3
 8004060:	bf08      	it	eq
 8004062:	4290      	cmpeq	r0, r2
 8004064:	d21a      	bcs.n	800409c <select_r_div+0xa0>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800406c:	486b      	ldr	r0, [pc, #428]	; (800421c <select_r_div+0x220>)
 800406e:	f04f 0100 	mov.w	r1, #0
 8004072:	4299      	cmp	r1, r3
 8004074:	bf08      	it	eq
 8004076:	4290      	cmpeq	r0, r2
 8004078:	d310      	bcc.n	800409c <select_r_div+0xa0>
	{
		r_div = SI5351_OUTPUT_CLK_DIV_64;
 800407a:	2306      	movs	r3, #6
 800407c:	73fb      	strb	r3, [r7, #15]
		*freq *= 64ULL;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004084:	f04f 0200 	mov.w	r2, #0
 8004088:	f04f 0300 	mov.w	r3, #0
 800408c:	018b      	lsls	r3, r1, #6
 800408e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004092:	0182      	lsls	r2, r0, #6
 8004094:	6879      	ldr	r1, [r7, #4]
 8004096:	e9c1 2300 	strd	r2, r3, [r1]
 800409a:	e0b4      	b.n	8004206 <select_r_div+0x20a>
	}
	else if((*freq >= SI5351_CLKOUT_MIN_FREQ * SI5351_FREQ_MULT * 4) && (*freq < SI5351_CLKOUT_MIN_FREQ * SI5351_FREQ_MULT * 8))
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040a2:	485e      	ldr	r0, [pc, #376]	; (800421c <select_r_div+0x220>)
 80040a4:	f04f 0100 	mov.w	r1, #0
 80040a8:	4299      	cmp	r1, r3
 80040aa:	bf08      	it	eq
 80040ac:	4290      	cmpeq	r0, r2
 80040ae:	d21a      	bcs.n	80040e6 <select_r_div+0xea>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040b6:	485a      	ldr	r0, [pc, #360]	; (8004220 <select_r_div+0x224>)
 80040b8:	f04f 0100 	mov.w	r1, #0
 80040bc:	428b      	cmp	r3, r1
 80040be:	bf08      	it	eq
 80040c0:	4282      	cmpeq	r2, r0
 80040c2:	d210      	bcs.n	80040e6 <select_r_div+0xea>
	{
		r_div = SI5351_OUTPUT_CLK_DIV_32;
 80040c4:	2305      	movs	r3, #5
 80040c6:	73fb      	strb	r3, [r7, #15]
		*freq *= 32ULL;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	e9d3 0100 	ldrd	r0, r1, [r3]
 80040ce:	f04f 0200 	mov.w	r2, #0
 80040d2:	f04f 0300 	mov.w	r3, #0
 80040d6:	014b      	lsls	r3, r1, #5
 80040d8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80040dc:	0142      	lsls	r2, r0, #5
 80040de:	6879      	ldr	r1, [r7, #4]
 80040e0:	e9c1 2300 	strd	r2, r3, [r1]
 80040e4:	e08f      	b.n	8004206 <select_r_div+0x20a>
	}
	else if((*freq >= SI5351_CLKOUT_MIN_FREQ * SI5351_FREQ_MULT * 8) && (*freq < SI5351_CLKOUT_MIN_FREQ * SI5351_FREQ_MULT * 16))
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ec:	484c      	ldr	r0, [pc, #304]	; (8004220 <select_r_div+0x224>)
 80040ee:	f04f 0100 	mov.w	r1, #0
 80040f2:	428b      	cmp	r3, r1
 80040f4:	bf08      	it	eq
 80040f6:	4282      	cmpeq	r2, r0
 80040f8:	d31a      	bcc.n	8004130 <select_r_div+0x134>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004100:	4848      	ldr	r0, [pc, #288]	; (8004224 <select_r_div+0x228>)
 8004102:	f04f 0100 	mov.w	r1, #0
 8004106:	428b      	cmp	r3, r1
 8004108:	bf08      	it	eq
 800410a:	4282      	cmpeq	r2, r0
 800410c:	d210      	bcs.n	8004130 <select_r_div+0x134>
	{
		r_div = SI5351_OUTPUT_CLK_DIV_16;
 800410e:	2304      	movs	r3, #4
 8004110:	73fb      	strb	r3, [r7, #15]
		*freq *= 16ULL;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004118:	f04f 0200 	mov.w	r2, #0
 800411c:	f04f 0300 	mov.w	r3, #0
 8004120:	010b      	lsls	r3, r1, #4
 8004122:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 8004126:	0102      	lsls	r2, r0, #4
 8004128:	6879      	ldr	r1, [r7, #4]
 800412a:	e9c1 2300 	strd	r2, r3, [r1]
 800412e:	e06a      	b.n	8004206 <select_r_div+0x20a>
	}
	else if((*freq >= SI5351_CLKOUT_MIN_FREQ * SI5351_FREQ_MULT * 16) && (*freq < SI5351_CLKOUT_MIN_FREQ * SI5351_FREQ_MULT * 32))
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004136:	483b      	ldr	r0, [pc, #236]	; (8004224 <select_r_div+0x228>)
 8004138:	f04f 0100 	mov.w	r1, #0
 800413c:	428b      	cmp	r3, r1
 800413e:	bf08      	it	eq
 8004140:	4282      	cmpeq	r2, r0
 8004142:	d31a      	bcc.n	800417a <select_r_div+0x17e>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800414a:	4837      	ldr	r0, [pc, #220]	; (8004228 <select_r_div+0x22c>)
 800414c:	f04f 0100 	mov.w	r1, #0
 8004150:	428b      	cmp	r3, r1
 8004152:	bf08      	it	eq
 8004154:	4282      	cmpeq	r2, r0
 8004156:	d210      	bcs.n	800417a <select_r_div+0x17e>
	{
		r_div = SI5351_OUTPUT_CLK_DIV_8;
 8004158:	2303      	movs	r3, #3
 800415a:	73fb      	strb	r3, [r7, #15]
		*freq *= 8ULL;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004162:	f04f 0200 	mov.w	r2, #0
 8004166:	f04f 0300 	mov.w	r3, #0
 800416a:	00cb      	lsls	r3, r1, #3
 800416c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8004170:	00c2      	lsls	r2, r0, #3
 8004172:	6879      	ldr	r1, [r7, #4]
 8004174:	e9c1 2300 	strd	r2, r3, [r1]
 8004178:	e045      	b.n	8004206 <select_r_div+0x20a>
	}
	else if((*freq >= SI5351_CLKOUT_MIN_FREQ * SI5351_FREQ_MULT * 32) && (*freq < SI5351_CLKOUT_MIN_FREQ * SI5351_FREQ_MULT * 64))
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004180:	4829      	ldr	r0, [pc, #164]	; (8004228 <select_r_div+0x22c>)
 8004182:	f04f 0100 	mov.w	r1, #0
 8004186:	428b      	cmp	r3, r1
 8004188:	bf08      	it	eq
 800418a:	4282      	cmpeq	r2, r0
 800418c:	d31a      	bcc.n	80041c4 <select_r_div+0x1c8>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004194:	4825      	ldr	r0, [pc, #148]	; (800422c <select_r_div+0x230>)
 8004196:	f04f 0100 	mov.w	r1, #0
 800419a:	428b      	cmp	r3, r1
 800419c:	bf08      	it	eq
 800419e:	4282      	cmpeq	r2, r0
 80041a0:	d210      	bcs.n	80041c4 <select_r_div+0x1c8>
	{
		r_div = SI5351_OUTPUT_CLK_DIV_4;
 80041a2:	2302      	movs	r3, #2
 80041a4:	73fb      	strb	r3, [r7, #15]
		*freq *= 4ULL;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80041ac:	f04f 0200 	mov.w	r2, #0
 80041b0:	f04f 0300 	mov.w	r3, #0
 80041b4:	008b      	lsls	r3, r1, #2
 80041b6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80041ba:	0082      	lsls	r2, r0, #2
 80041bc:	6879      	ldr	r1, [r7, #4]
 80041be:	e9c1 2300 	strd	r2, r3, [r1]
 80041c2:	e020      	b.n	8004206 <select_r_div+0x20a>
	}
	else if((*freq >= SI5351_CLKOUT_MIN_FREQ * SI5351_FREQ_MULT * 64) && (*freq < SI5351_CLKOUT_MIN_FREQ * SI5351_FREQ_MULT * 128))
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ca:	4818      	ldr	r0, [pc, #96]	; (800422c <select_r_div+0x230>)
 80041cc:	f04f 0100 	mov.w	r1, #0
 80041d0:	428b      	cmp	r3, r1
 80041d2:	bf08      	it	eq
 80041d4:	4282      	cmpeq	r2, r0
 80041d6:	d316      	bcc.n	8004206 <select_r_div+0x20a>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041de:	4814      	ldr	r0, [pc, #80]	; (8004230 <select_r_div+0x234>)
 80041e0:	f04f 0100 	mov.w	r1, #0
 80041e4:	428b      	cmp	r3, r1
 80041e6:	bf08      	it	eq
 80041e8:	4282      	cmpeq	r2, r0
 80041ea:	d20c      	bcs.n	8004206 <select_r_div+0x20a>
	{
		r_div = SI5351_OUTPUT_CLK_DIV_2;
 80041ec:	2301      	movs	r3, #1
 80041ee:	73fb      	strb	r3, [r7, #15]
		*freq *= 2ULL;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041f6:	1894      	adds	r4, r2, r2
 80041f8:	eb43 0503 	adc.w	r5, r3, r3
 80041fc:	4622      	mov	r2, r4
 80041fe:	462b      	mov	r3, r5
 8004200:	6879      	ldr	r1, [r7, #4]
 8004202:	e9c1 2300 	strd	r2, r3, [r1]
	}

	return r_div;
 8004206:	7bfb      	ldrb	r3, [r7, #15]
}
 8004208:	4618      	mov	r0, r3
 800420a:	3714      	adds	r7, #20
 800420c:	46bd      	mov	sp, r7
 800420e:	bcb0      	pop	{r4, r5, r7}
 8004210:	4770      	bx	lr
 8004212:	bf00      	nop
 8004214:	00061a7f 	.word	0x00061a7f
 8004218:	000c34ff 	.word	0x000c34ff
 800421c:	001869ff 	.word	0x001869ff
 8004220:	0030d400 	.word	0x0030d400
 8004224:	0061a800 	.word	0x0061a800
 8004228:	00c35000 	.word	0x00c35000
 800422c:	0186a000 	.word	0x0186a000
 8004230:	030d4000 	.word	0x030d4000
 8004234:	00000000 	.word	0x00000000

08004238 <multisynth_calc>:


uint64_t multisynth_calc(uint64_t freq, uint64_t pll_freq, Si5351RegSet *reg)
{
 8004238:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800423c:	b092      	sub	sp, #72	; 0x48
 800423e:	af00      	add	r7, sp, #0
 8004240:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8004244:	e9c7 2300 	strd	r2, r3, [r7]
	uint64_t lltmp;
	uint32_t a, b, c, p1, p2, p3;
	uint8_t divby4;
	uint8_t ret_val = 0;
 8004248:	2300      	movs	r3, #0
 800424a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

	// Multisynth bounds checking
	if (freq > SI5351_MULTISYNTH_MAX_FREQ * SI5351_FREQ_MULT)
 800424e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004252:	a18c      	add	r1, pc, #560	; (adr r1, 8004484 <multisynth_calc+0x24c>)
 8004254:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004258:	4299      	cmp	r1, r3
 800425a:	bf08      	it	eq
 800425c:	4290      	cmpeq	r0, r2
 800425e:	d204      	bcs.n	800426a <multisynth_calc+0x32>
	{
		freq = SI5351_MULTISYNTH_MAX_FREQ * SI5351_FREQ_MULT;
 8004260:	a388      	add	r3, pc, #544	; (adr r3, 8004484 <multisynth_calc+0x24c>)
 8004262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004266:	e9c7 2302 	strd	r2, r3, [r7, #8]
	}
	if (freq < SI5351_MULTISYNTH_MIN_FREQ * SI5351_FREQ_MULT)
 800426a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800426e:	a187      	add	r1, pc, #540	; (adr r1, 800448c <multisynth_calc+0x254>)
 8004270:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004274:	4299      	cmp	r1, r3
 8004276:	bf08      	it	eq
 8004278:	4290      	cmpeq	r0, r2
 800427a:	d304      	bcc.n	8004286 <multisynth_calc+0x4e>
	{
		freq = SI5351_MULTISYNTH_MIN_FREQ * SI5351_FREQ_MULT;
 800427c:	a385      	add	r3, pc, #532	; (adr r3, 8004494 <multisynth_calc+0x25c>)
 800427e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004282:	e9c7 2302 	strd	r2, r3, [r7, #8]
	}

	divby4 = 0;
 8004286:	2300      	movs	r3, #0
 8004288:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (freq >= SI5351_MULTISYNTH_DIVBY4_FREQ * SI5351_FREQ_MULT)
 800428c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004290:	a182      	add	r1, pc, #520	; (adr r1, 800449c <multisynth_calc+0x264>)
 8004292:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004296:	4299      	cmp	r1, r3
 8004298:	bf08      	it	eq
 800429a:	4290      	cmpeq	r0, r2
 800429c:	d202      	bcs.n	80042a4 <multisynth_calc+0x6c>
	{
		divby4 = 1;
 800429e:	2301      	movs	r3, #1
 80042a0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	}

	if(pll_freq == 0)
 80042a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80042a8:	4313      	orrs	r3, r2
 80042aa:	d13c      	bne.n	8004326 <multisynth_calc+0xee>
	{
		// Find largest integer divider for max
		// VCO frequency and given target frequency
		if(divby4 == 0)
 80042ac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d11d      	bne.n	80042f0 <multisynth_calc+0xb8>
		{
			lltmp = SI5351_PLL_VCO_MAX * SI5351_FREQ_MULT;
 80042b4:	a37b      	add	r3, pc, #492	; (adr r3, 80044a4 <multisynth_calc+0x26c>)
 80042b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042ba:	e9c7 2308 	strd	r2, r3, [r7, #32]
			do_div(lltmp, freq);
 80042be:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80042c2:	e9c7 2306 	strd	r2, r3, [r7, #24]
 80042c6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80042ca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80042ce:	f7fb ff8f 	bl	80001f0 <__aeabi_uldivmod>
 80042d2:	e9c7 2304 	strd	r2, r3, [r7, #16]
 80042d6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80042da:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80042de:	f7fb ff87 	bl	80001f0 <__aeabi_uldivmod>
 80042e2:	4602      	mov	r2, r0
 80042e4:	460b      	mov	r3, r1
 80042e6:	e9c7 2308 	strd	r2, r3, [r7, #32]
			a = (uint32_t)lltmp;
 80042ea:	6a3b      	ldr	r3, [r7, #32]
 80042ec:	647b      	str	r3, [r7, #68]	; 0x44
 80042ee:	e001      	b.n	80042f4 <multisynth_calc+0xbc>
		}
		else
		{
			a = 4;
 80042f0:	2304      	movs	r3, #4
 80042f2:	647b      	str	r3, [r7, #68]	; 0x44
		}

		b = 0;
 80042f4:	2300      	movs	r3, #0
 80042f6:	643b      	str	r3, [r7, #64]	; 0x40
		c = 1;
 80042f8:	2301      	movs	r3, #1
 80042fa:	63fb      	str	r3, [r7, #60]	; 0x3c
		pll_freq = a * freq;
 80042fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042fe:	461a      	mov	r2, r3
 8004300:	f04f 0300 	mov.w	r3, #0
 8004304:	68f9      	ldr	r1, [r7, #12]
 8004306:	fb02 f001 	mul.w	r0, r2, r1
 800430a:	68b9      	ldr	r1, [r7, #8]
 800430c:	fb03 f101 	mul.w	r1, r3, r1
 8004310:	4401      	add	r1, r0
 8004312:	68b8      	ldr	r0, [r7, #8]
 8004314:	fba0 2302 	umull	r2, r3, r0, r2
 8004318:	4419      	add	r1, r3
 800431a:	460b      	mov	r3, r1
 800431c:	e9c7 2300 	strd	r2, r3, [r7]
 8004320:	e9c7 2300 	strd	r2, r3, [r7]
 8004324:	e06f      	b.n	8004406 <multisynth_calc+0x1ce>
	}
	else
	{
		// Preset PLL, so return the actual freq for these params instead of PLL freq
		ret_val = 1;
 8004326:	2301      	movs	r3, #1
 8004328:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

		// Determine integer part of feedback equation
		a = pll_freq / freq;
 800432c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004330:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004334:	f7fb ff5c 	bl	80001f0 <__aeabi_uldivmod>
 8004338:	4602      	mov	r2, r0
 800433a:	460b      	mov	r3, r1
 800433c:	4613      	mov	r3, r2
 800433e:	647b      	str	r3, [r7, #68]	; 0x44

		if (a < SI5351_MULTISYNTH_A_MIN)
 8004340:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004342:	2b05      	cmp	r3, #5
 8004344:	d80b      	bhi.n	800435e <multisynth_calc+0x126>
		{
			freq = pll_freq / SI5351_MULTISYNTH_A_MIN;
 8004346:	e9d7 0100 	ldrd	r0, r1, [r7]
 800434a:	f04f 0206 	mov.w	r2, #6
 800434e:	f04f 0300 	mov.w	r3, #0
 8004352:	f7fb ff4d 	bl	80001f0 <__aeabi_uldivmod>
 8004356:	4602      	mov	r2, r0
 8004358:	460b      	mov	r3, r1
 800435a:	e9c7 2302 	strd	r2, r3, [r7, #8]
		}
		if (a > SI5351_MULTISYNTH_A_MAX)
 800435e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004360:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8004364:	d90b      	bls.n	800437e <multisynth_calc+0x146>
		{
			freq = pll_freq / SI5351_MULTISYNTH_A_MAX;
 8004366:	e9d7 0100 	ldrd	r0, r1, [r7]
 800436a:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 800436e:	f04f 0300 	mov.w	r3, #0
 8004372:	f7fb ff3d 	bl	80001f0 <__aeabi_uldivmod>
 8004376:	4602      	mov	r2, r0
 8004378:	460b      	mov	r3, r1
 800437a:	e9c7 2302 	strd	r2, r3, [r7, #8]
		}

		b = (pll_freq % freq * RFRAC_DENOM) / freq;
 800437e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004382:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004386:	f7fb ff33 	bl	80001f0 <__aeabi_uldivmod>
 800438a:	4614      	mov	r4, r2
 800438c:	461d      	mov	r5, r3
 800438e:	4622      	mov	r2, r4
 8004390:	462b      	mov	r3, r5
 8004392:	f04f 0000 	mov.w	r0, #0
 8004396:	f04f 0100 	mov.w	r1, #0
 800439a:	0159      	lsls	r1, r3, #5
 800439c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80043a0:	0150      	lsls	r0, r2, #5
 80043a2:	4602      	mov	r2, r0
 80043a4:	460b      	mov	r3, r1
 80043a6:	1b12      	subs	r2, r2, r4
 80043a8:	eb63 0305 	sbc.w	r3, r3, r5
 80043ac:	f04f 0000 	mov.w	r0, #0
 80043b0:	f04f 0100 	mov.w	r1, #0
 80043b4:	0259      	lsls	r1, r3, #9
 80043b6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80043ba:	0250      	lsls	r0, r2, #9
 80043bc:	4602      	mov	r2, r0
 80043be:	460b      	mov	r3, r1
 80043c0:	1912      	adds	r2, r2, r4
 80043c2:	eb45 0303 	adc.w	r3, r5, r3
 80043c6:	f04f 0000 	mov.w	r0, #0
 80043ca:	f04f 0100 	mov.w	r1, #0
 80043ce:	0199      	lsls	r1, r3, #6
 80043d0:	ea41 6192 	orr.w	r1, r1, r2, lsr #26
 80043d4:	0190      	lsls	r0, r2, #6
 80043d6:	1a80      	subs	r0, r0, r2
 80043d8:	eb61 0103 	sbc.w	r1, r1, r3
 80043dc:	eb10 0804 	adds.w	r8, r0, r4
 80043e0:	eb41 0905 	adc.w	r9, r1, r5
 80043e4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80043e8:	4640      	mov	r0, r8
 80043ea:	4649      	mov	r1, r9
 80043ec:	f7fb ff00 	bl	80001f0 <__aeabi_uldivmod>
 80043f0:	4602      	mov	r2, r0
 80043f2:	460b      	mov	r3, r1
 80043f4:	4613      	mov	r3, r2
 80043f6:	643b      	str	r3, [r7, #64]	; 0x40
		c = b ? RFRAC_DENOM : 1;
 80043f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d001      	beq.n	8004402 <multisynth_calc+0x1ca>
 80043fe:	4b20      	ldr	r3, [pc, #128]	; (8004480 <multisynth_calc+0x248>)
 8004400:	e000      	b.n	8004404 <multisynth_calc+0x1cc>
 8004402:	2301      	movs	r3, #1
 8004404:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	// Calculate parameters
	if (divby4 == 1)
 8004406:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800440a:	2b01      	cmp	r3, #1
 800440c:	d106      	bne.n	800441c <multisynth_calc+0x1e4>
	{
		p3 = 1;
 800440e:	2301      	movs	r3, #1
 8004410:	633b      	str	r3, [r7, #48]	; 0x30
		p2 = 0;
 8004412:	2300      	movs	r3, #0
 8004414:	637b      	str	r3, [r7, #52]	; 0x34
		p1 = 0;
 8004416:	2300      	movs	r3, #0
 8004418:	63bb      	str	r3, [r7, #56]	; 0x38
 800441a:	e016      	b.n	800444a <multisynth_calc+0x212>
	}
	else
	{
        p1 = 128 * a + ((128 * b) / c) - 512;
 800441c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800441e:	01da      	lsls	r2, r3, #7
 8004420:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004422:	01d9      	lsls	r1, r3, #7
 8004424:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004426:	fbb1 f3f3 	udiv	r3, r1, r3
 800442a:	4413      	add	r3, r2
 800442c:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8004430:	63bb      	str	r3, [r7, #56]	; 0x38
        p2 = 128 * b - c * ((128 * b) / c);
 8004432:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004434:	01db      	lsls	r3, r3, #7
 8004436:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004438:	fbb3 f2f2 	udiv	r2, r3, r2
 800443c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800443e:	fb01 f202 	mul.w	r2, r1, r2
 8004442:	1a9b      	subs	r3, r3, r2
 8004444:	637b      	str	r3, [r7, #52]	; 0x34
        p3 = c;
 8004446:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004448:	633b      	str	r3, [r7, #48]	; 0x30
	}

	reg->p1 = p1;
 800444a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800444c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800444e:	601a      	str	r2, [r3, #0]
	reg->p2 = p2;
 8004450:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004452:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004454:	605a      	str	r2, [r3, #4]
	reg->p3 = p3;
 8004456:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004458:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800445a:	609a      	str	r2, [r3, #8]

	if(ret_val == 0)
 800445c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004460:	2b00      	cmp	r3, #0
 8004462:	d102      	bne.n	800446a <multisynth_calc+0x232>
	{
		return pll_freq;
 8004464:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004468:	e001      	b.n	800446e <multisynth_calc+0x236>
	}
	else
	{
		return freq;
 800446a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
	}
}
 800446e:	4610      	mov	r0, r2
 8004470:	4619      	mov	r1, r3
 8004472:	3748      	adds	r7, #72	; 0x48
 8004474:	46bd      	mov	sp, r7
 8004476:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800447a:	bf00      	nop
 800447c:	f3af 8000 	nop.w
 8004480:	000f4240 	.word	0x000f4240
 8004484:	3d1ac100 	.word	0x3d1ac100
 8004488:	00000005 	.word	0x00000005
 800448c:	02faf07f 	.word	0x02faf07f
 8004490:	00000000 	.word	0x00000000
 8004494:	02faf080 	.word	0x02faf080
 8004498:	00000000 	.word	0x00000000
 800449c:	7e11d5ff 	.word	0x7e11d5ff
 80044a0:	00000003 	.word	0x00000003
 80044a4:	f46b0400 	.word	0xf46b0400
 80044a8:	00000014 	.word	0x00000014

080044ac <Si5351_set_pll>:
 * pll_freq - Desired PLL frequency
 * target_pll - Which PLL to set
 *     (use the si5351_pll enum)
 */
void Si5351_set_pll(uint64_t pll_freq, enum si5351_pll target_pll)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b08e      	sub	sp, #56	; 0x38
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80044b6:	4613      	mov	r3, r2
 80044b8:	71fb      	strb	r3, [r7, #7]
  Si5351RegSet pll_reg;

  Si5351_pllCalc(pll_freq, &pll_reg, ref_correction);
 80044ba:	4b5a      	ldr	r3, [pc, #360]	; (8004624 <Si5351_set_pll+0x178>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80044c2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80044c6:	f7ff f957 	bl	8003778 <Si5351_pllCalc>

  // Derive the register values to write

  // Prepare an array for parameters to be written to
  uint8_t params[20];
  uint8_t i = 0;
 80044ca:	2300      	movs	r3, #0
 80044cc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint8_t temp;

  // Registers 26-27
  temp = ((pll_reg.p3 >> 8) & 0xFF);
 80044d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044d2:	0a1b      	lsrs	r3, r3, #8
 80044d4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  params[i++] = temp;
 80044d8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80044dc:	1c5a      	adds	r2, r3, #1
 80044de:	f887 2037 	strb.w	r2, [r7, #55]	; 0x37
 80044e2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80044e6:	4413      	add	r3, r2
 80044e8:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80044ec:	f803 2c24 	strb.w	r2, [r3, #-36]

  temp = (uint8_t)(pll_reg.p3  & 0xFF);
 80044f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044f2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  params[i++] = temp;
 80044f6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80044fa:	1c5a      	adds	r2, r3, #1
 80044fc:	f887 2037 	strb.w	r2, [r7, #55]	; 0x37
 8004500:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004504:	4413      	add	r3, r2
 8004506:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800450a:	f803 2c24 	strb.w	r2, [r3, #-36]

  // Register 28
  temp = (uint8_t)((pll_reg.p1 >> 16) & 0x03);
 800450e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004510:	0c1b      	lsrs	r3, r3, #16
 8004512:	b2db      	uxtb	r3, r3
 8004514:	f003 0303 	and.w	r3, r3, #3
 8004518:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  params[i++] = temp;
 800451c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004520:	1c5a      	adds	r2, r3, #1
 8004522:	f887 2037 	strb.w	r2, [r7, #55]	; 0x37
 8004526:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800452a:	4413      	add	r3, r2
 800452c:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8004530:	f803 2c24 	strb.w	r2, [r3, #-36]

  // Registers 29-30
  temp = (uint8_t)((pll_reg.p1 >> 8) & 0xFF);
 8004534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004536:	0a1b      	lsrs	r3, r3, #8
 8004538:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  params[i++] = temp;
 800453c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004540:	1c5a      	adds	r2, r3, #1
 8004542:	f887 2037 	strb.w	r2, [r7, #55]	; 0x37
 8004546:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800454a:	4413      	add	r3, r2
 800454c:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8004550:	f803 2c24 	strb.w	r2, [r3, #-36]

  temp = (uint8_t)(pll_reg.p1  & 0xFF);
 8004554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004556:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  params[i++] = temp;
 800455a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800455e:	1c5a      	adds	r2, r3, #1
 8004560:	f887 2037 	strb.w	r2, [r7, #55]	; 0x37
 8004564:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004568:	4413      	add	r3, r2
 800456a:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800456e:	f803 2c24 	strb.w	r2, [r3, #-36]

  // Register 31
  temp = (uint8_t)((pll_reg.p3 >> 12) & 0xF0);
 8004572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004574:	0b1b      	lsrs	r3, r3, #12
 8004576:	b2db      	uxtb	r3, r3
 8004578:	f023 030f 	bic.w	r3, r3, #15
 800457c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  temp += (uint8_t)((pll_reg.p2 >> 16) & 0x0F);
 8004580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004582:	0c1b      	lsrs	r3, r3, #16
 8004584:	b2db      	uxtb	r3, r3
 8004586:	f003 030f 	and.w	r3, r3, #15
 800458a:	b2da      	uxtb	r2, r3
 800458c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8004590:	4413      	add	r3, r2
 8004592:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  params[i++] = temp;
 8004596:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800459a:	1c5a      	adds	r2, r3, #1
 800459c:	f887 2037 	strb.w	r2, [r7, #55]	; 0x37
 80045a0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80045a4:	4413      	add	r3, r2
 80045a6:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80045aa:	f803 2c24 	strb.w	r2, [r3, #-36]

  // Registers 32-33
  temp = (uint8_t)((pll_reg.p2 >> 8) & 0xFF);
 80045ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045b0:	0a1b      	lsrs	r3, r3, #8
 80045b2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  params[i++] = temp;
 80045b6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80045ba:	1c5a      	adds	r2, r3, #1
 80045bc:	f887 2037 	strb.w	r2, [r7, #55]	; 0x37
 80045c0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80045c4:	4413      	add	r3, r2
 80045c6:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80045ca:	f803 2c24 	strb.w	r2, [r3, #-36]

  temp = (uint8_t)(pll_reg.p2  & 0xFF);
 80045ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045d0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  params[i++] = temp;
 80045d4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80045d8:	1c5a      	adds	r2, r3, #1
 80045da:	f887 2037 	strb.w	r2, [r7, #55]	; 0x37
 80045de:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80045e2:	4413      	add	r3, r2
 80045e4:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80045e8:	f803 2c24 	strb.w	r2, [r3, #-36]

  // Write the parameters
  if(target_pll == SI5351_PLLA)
 80045ec:	79fb      	ldrb	r3, [r7, #7]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d108      	bne.n	8004604 <Si5351_set_pll+0x158>
  {
    si5351_write_bulk(SI5351_PLLA_PARAMETERS, i, &params[0]); // uint8_t addr, uint8_t bytes, uint8_t *data
 80045f2:	f107 0214 	add.w	r2, r7, #20
 80045f6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80045fa:	4619      	mov	r1, r3
 80045fc:	201a      	movs	r0, #26
 80045fe:	f000 fa0b 	bl	8004a18 <si5351_write_bulk>
  }
  else if(target_pll == SI5351_PLLB)
  {
    si5351_write_bulk(SI5351_PLLB_PARAMETERS, i, &params[0]);
  }
}
 8004602:	e00a      	b.n	800461a <Si5351_set_pll+0x16e>
  else if(target_pll == SI5351_PLLB)
 8004604:	79fb      	ldrb	r3, [r7, #7]
 8004606:	2b01      	cmp	r3, #1
 8004608:	d107      	bne.n	800461a <Si5351_set_pll+0x16e>
    si5351_write_bulk(SI5351_PLLB_PARAMETERS, i, &params[0]);
 800460a:	f107 0214 	add.w	r2, r7, #20
 800460e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004612:	4619      	mov	r1, r3
 8004614:	2022      	movs	r0, #34	; 0x22
 8004616:	f000 f9ff 	bl	8004a18 <si5351_write_bulk>
}
 800461a:	bf00      	nop
 800461c:	3738      	adds	r7, #56	; 0x38
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}
 8004622:	bf00      	nop
 8004624:	2000056c 	.word	0x2000056c

08004628 <set_ms>:
 * r_div - Desired r_div ratio
 * div_by_4 - Set Divide By 4 mode
 *   Set to 1 to enable, 0 to disable
 */
void set_ms(enum si5351_clock clk, Si5351RegSet ms_reg, uint8_t int_mode, uint8_t r_div, uint8_t div_by_4)
{
 8004628:	b590      	push	{r4, r7, lr}
 800462a:	b08d      	sub	sp, #52	; 0x34
 800462c:	af00      	add	r7, sp, #0
 800462e:	4604      	mov	r4, r0
 8004630:	4638      	mov	r0, r7
 8004632:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8004636:	4623      	mov	r3, r4
 8004638:	73fb      	strb	r3, [r7, #15]
	uint8_t params[20];
	uint8_t i = 0;
 800463a:	2300      	movs	r3, #0
 800463c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 	uint8_t temp;
 	uint8_t reg_val;

	// Registers 42-43 for CLK0
	temp = (uint8_t)((ms_reg.p3 >> 8) & 0xFF);
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	0a1b      	lsrs	r3, r3, #8
 8004644:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	params[i++] = temp;
 8004648:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800464c:	1c5a      	adds	r2, r3, #1
 800464e:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 8004652:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004656:	4413      	add	r3, r2
 8004658:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800465c:	f803 2c18 	strb.w	r2, [r3, #-24]

	temp = (uint8_t)(ms_reg.p3  & 0xFF);
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	params[i++] = temp;
 8004666:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800466a:	1c5a      	adds	r2, r3, #1
 800466c:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 8004670:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004674:	4413      	add	r3, r2
 8004676:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800467a:	f803 2c18 	strb.w	r2, [r3, #-24]

	// Register 44 for CLK0
	//reg_val = si5351_read((SI5351_CLK0_PARAMETERS + 2) + (clk * 8));
	si5351_read8((SI5351_CLK0_PARAMETERS + 2) + (clk * 8), &reg_val);
 800467e:	7bfb      	ldrb	r3, [r7, #15]
 8004680:	00db      	lsls	r3, r3, #3
 8004682:	b2db      	uxtb	r3, r3
 8004684:	332c      	adds	r3, #44	; 0x2c
 8004686:	b2db      	uxtb	r3, r3
 8004688:	f107 0217 	add.w	r2, r7, #23
 800468c:	4611      	mov	r1, r2
 800468e:	4618      	mov	r0, r3
 8004690:	f000 fab6 	bl	8004c00 <si5351_read8>

	reg_val &= ~(0x03);
 8004694:	7dfb      	ldrb	r3, [r7, #23]
 8004696:	f023 0303 	bic.w	r3, r3, #3
 800469a:	b2db      	uxtb	r3, r3
 800469c:	75fb      	strb	r3, [r7, #23]
	temp = reg_val | ((uint8_t)((ms_reg.p1 >> 16) & 0x03));
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	0c1b      	lsrs	r3, r3, #16
 80046a2:	b25b      	sxtb	r3, r3
 80046a4:	f003 0303 	and.w	r3, r3, #3
 80046a8:	b25a      	sxtb	r2, r3
 80046aa:	7dfb      	ldrb	r3, [r7, #23]
 80046ac:	b25b      	sxtb	r3, r3
 80046ae:	4313      	orrs	r3, r2
 80046b0:	b25b      	sxtb	r3, r3
 80046b2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	params[i++] = temp;
 80046b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80046ba:	1c5a      	adds	r2, r3, #1
 80046bc:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 80046c0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80046c4:	4413      	add	r3, r2
 80046c6:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 80046ca:	f803 2c18 	strb.w	r2, [r3, #-24]

	// Registers 45-46 for CLK0
	temp = (uint8_t)((ms_reg.p1 >> 8) & 0xFF);
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	0a1b      	lsrs	r3, r3, #8
 80046d2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	params[i++] = temp;
 80046d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80046da:	1c5a      	adds	r2, r3, #1
 80046dc:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 80046e0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80046e4:	4413      	add	r3, r2
 80046e6:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 80046ea:	f803 2c18 	strb.w	r2, [r3, #-24]

	temp = (uint8_t)(ms_reg.p1  & 0xFF);
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	params[i++] = temp;
 80046f4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80046f8:	1c5a      	adds	r2, r3, #1
 80046fa:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 80046fe:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004702:	4413      	add	r3, r2
 8004704:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8004708:	f803 2c18 	strb.w	r2, [r3, #-24]

	// Register 47 for CLK0
	temp = (uint8_t)((ms_reg.p3 >> 12) & 0xF0);
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	0b1b      	lsrs	r3, r3, #12
 8004710:	b2db      	uxtb	r3, r3
 8004712:	f023 030f 	bic.w	r3, r3, #15
 8004716:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	temp += (uint8_t)((ms_reg.p2 >> 16) & 0x0F);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	0c1b      	lsrs	r3, r3, #16
 800471e:	b2db      	uxtb	r3, r3
 8004720:	f003 030f 	and.w	r3, r3, #15
 8004724:	b2da      	uxtb	r2, r3
 8004726:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800472a:	4413      	add	r3, r2
 800472c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	params[i++] = temp;
 8004730:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004734:	1c5a      	adds	r2, r3, #1
 8004736:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 800473a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800473e:	4413      	add	r3, r2
 8004740:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8004744:	f803 2c18 	strb.w	r2, [r3, #-24]

	// Registers 48-49 for CLK0
	temp = (uint8_t)((ms_reg.p2 >> 8) & 0xFF);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	0a1b      	lsrs	r3, r3, #8
 800474c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	params[i++] = temp;
 8004750:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004754:	1c5a      	adds	r2, r3, #1
 8004756:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 800475a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800475e:	4413      	add	r3, r2
 8004760:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8004764:	f803 2c18 	strb.w	r2, [r3, #-24]

	temp = (uint8_t)(ms_reg.p2  & 0xFF);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	params[i++] = temp;
 800476e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004772:	1c5a      	adds	r2, r3, #1
 8004774:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 8004778:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800477c:	4413      	add	r3, r2
 800477e:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8004782:	f803 2c18 	strb.w	r2, [r3, #-24]

	// Write the parameters
	switch(clk)
 8004786:	7bfb      	ldrb	r3, [r7, #15]
 8004788:	2b07      	cmp	r3, #7
 800478a:	d86b      	bhi.n	8004864 <set_ms+0x23c>
 800478c:	a201      	add	r2, pc, #4	; (adr r2, 8004794 <set_ms+0x16c>)
 800478e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004792:	bf00      	nop
 8004794:	080047b5 	.word	0x080047b5
 8004798:	080047c7 	.word	0x080047c7
 800479c:	080047d9 	.word	0x080047d9
 80047a0:	080047eb 	.word	0x080047eb
 80047a4:	080047fd 	.word	0x080047fd
 80047a8:	0800480f 	.word	0x0800480f
 80047ac:	08004821 	.word	0x08004821
 80047b0:	08004833 	.word	0x08004833
	{
		case SI5351_CLK0:
			si5351_write_bulk(SI5351_CLK0_PARAMETERS, i, &params[0]);
 80047b4:	f107 0218 	add.w	r2, r7, #24
 80047b8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80047bc:	4619      	mov	r1, r3
 80047be:	202a      	movs	r0, #42	; 0x2a
 80047c0:	f000 f92a 	bl	8004a18 <si5351_write_bulk>
			break;
 80047c4:	e03e      	b.n	8004844 <set_ms+0x21c>
		case SI5351_CLK1:
			si5351_write_bulk(SI5351_CLK1_PARAMETERS, i, &params[0]);
 80047c6:	f107 0218 	add.w	r2, r7, #24
 80047ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80047ce:	4619      	mov	r1, r3
 80047d0:	2032      	movs	r0, #50	; 0x32
 80047d2:	f000 f921 	bl	8004a18 <si5351_write_bulk>
			break;
 80047d6:	e035      	b.n	8004844 <set_ms+0x21c>
		case SI5351_CLK2:
			si5351_write_bulk(SI5351_CLK2_PARAMETERS, i, &params[0]);
 80047d8:	f107 0218 	add.w	r2, r7, #24
 80047dc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80047e0:	4619      	mov	r1, r3
 80047e2:	203a      	movs	r0, #58	; 0x3a
 80047e4:	f000 f918 	bl	8004a18 <si5351_write_bulk>
			break;
 80047e8:	e02c      	b.n	8004844 <set_ms+0x21c>
		case SI5351_CLK3:
			si5351_write_bulk(SI5351_CLK3_PARAMETERS, i, &params[0]);
 80047ea:	f107 0218 	add.w	r2, r7, #24
 80047ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80047f2:	4619      	mov	r1, r3
 80047f4:	2042      	movs	r0, #66	; 0x42
 80047f6:	f000 f90f 	bl	8004a18 <si5351_write_bulk>
			break;
 80047fa:	e023      	b.n	8004844 <set_ms+0x21c>
		case SI5351_CLK4:
			si5351_write_bulk(SI5351_CLK4_PARAMETERS, i, &params[0]);
 80047fc:	f107 0218 	add.w	r2, r7, #24
 8004800:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004804:	4619      	mov	r1, r3
 8004806:	204a      	movs	r0, #74	; 0x4a
 8004808:	f000 f906 	bl	8004a18 <si5351_write_bulk>
			break;
 800480c:	e01a      	b.n	8004844 <set_ms+0x21c>
		case SI5351_CLK5:
			si5351_write_bulk(SI5351_CLK5_PARAMETERS, i, &params[0]);
 800480e:	f107 0218 	add.w	r2, r7, #24
 8004812:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004816:	4619      	mov	r1, r3
 8004818:	2052      	movs	r0, #82	; 0x52
 800481a:	f000 f8fd 	bl	8004a18 <si5351_write_bulk>
			break;
 800481e:	e011      	b.n	8004844 <set_ms+0x21c>
		case SI5351_CLK6:
			si5351_write_bulk(SI5351_CLK6_PARAMETERS, i, &params[0]);
 8004820:	f107 0218 	add.w	r2, r7, #24
 8004824:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004828:	4619      	mov	r1, r3
 800482a:	205a      	movs	r0, #90	; 0x5a
 800482c:	f000 f8f4 	bl	8004a18 <si5351_write_bulk>
			break;
 8004830:	e008      	b.n	8004844 <set_ms+0x21c>
		case SI5351_CLK7:
			si5351_write_bulk(SI5351_CLK7_PARAMETERS, i, &params[0]);
 8004832:	f107 0218 	add.w	r2, r7, #24
 8004836:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800483a:	4619      	mov	r1, r3
 800483c:	205b      	movs	r0, #91	; 0x5b
 800483e:	f000 f8eb 	bl	8004a18 <si5351_write_bulk>
			break;
 8004842:	bf00      	nop
		default:
			return;
	}

	set_int(clk, int_mode);
 8004844:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8004848:	7bfb      	ldrb	r3, [r7, #15]
 800484a:	4611      	mov	r1, r2
 800484c:	4618      	mov	r0, r3
 800484e:	f000 f80d 	bl	800486c <set_int>
	ms_div(clk, r_div, div_by_4);
 8004852:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
 8004856:	f897 1044 	ldrb.w	r1, [r7, #68]	; 0x44
 800485a:	7bfb      	ldrb	r3, [r7, #15]
 800485c:	4618      	mov	r0, r3
 800485e:	f000 f84d 	bl	80048fc <ms_div>
 8004862:	e000      	b.n	8004866 <set_ms+0x23e>
			return;
 8004864:	bf00      	nop
}
 8004866:	3734      	adds	r7, #52	; 0x34
 8004868:	46bd      	mov	sp, r7
 800486a:	bd90      	pop	{r4, r7, pc}

0800486c <set_int>:
 * enable - Set to 1 to enable, 0 to disable
 *
 * Set the indicated multisynth into integer mode.
 */
void set_int(enum si5351_clock clk, uint8_t enable)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b084      	sub	sp, #16
 8004870:	af00      	add	r7, sp, #0
 8004872:	4603      	mov	r3, r0
 8004874:	460a      	mov	r2, r1
 8004876:	71fb      	strb	r3, [r7, #7]
 8004878:	4613      	mov	r3, r2
 800487a:	71bb      	strb	r3, [r7, #6]
	uint8_t reg_val;
	//reg_val = si5351_read(SI5351_CLK0_CTRL + (uint8_t)clk);
	si5351_read8((SI5351_CLK0_CTRL + (uint8_t)clk), &reg_val);
 800487c:	79fb      	ldrb	r3, [r7, #7]
 800487e:	3310      	adds	r3, #16
 8004880:	b2db      	uxtb	r3, r3
 8004882:	f107 020f 	add.w	r2, r7, #15
 8004886:	4611      	mov	r1, r2
 8004888:	4618      	mov	r0, r3
 800488a:	f000 f9b9 	bl	8004c00 <si5351_read8>

	if(enable == 1)
 800488e:	79bb      	ldrb	r3, [r7, #6]
 8004890:	2b01      	cmp	r3, #1
 8004892:	d105      	bne.n	80048a0 <set_int+0x34>
	{
		reg_val |= (SI5351_CLK_INTEGER_MODE);
 8004894:	7bfb      	ldrb	r3, [r7, #15]
 8004896:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800489a:	b2db      	uxtb	r3, r3
 800489c:	73fb      	strb	r3, [r7, #15]
 800489e:	e004      	b.n	80048aa <set_int+0x3e>
	}
	else
	{
		reg_val &= ~(SI5351_CLK_INTEGER_MODE);
 80048a0:	7bfb      	ldrb	r3, [r7, #15]
 80048a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048a6:	b2db      	uxtb	r3, r3
 80048a8:	73fb      	strb	r3, [r7, #15]
	}

	//si5351_write(SI5351_CLK0_CTRL + (uint8_t)clk, reg_val);
	si5351_write8(SI5351_CLK0_CTRL + (uint8_t)clk, reg_val);
 80048aa:	79fb      	ldrb	r3, [r7, #7]
 80048ac:	3310      	adds	r3, #16
 80048ae:	b2db      	uxtb	r3, r3
 80048b0:	7bfa      	ldrb	r2, [r7, #15]
 80048b2:	4611      	mov	r1, r2
 80048b4:	4618      	mov	r0, r3
 80048b6:	f000 f979 	bl	8004bac <si5351_write8>

	// Integer mode indication
	switch(clk)
 80048ba:	79fb      	ldrb	r3, [r7, #7]
 80048bc:	2b02      	cmp	r3, #2
 80048be:	d00e      	beq.n	80048de <set_int+0x72>
 80048c0:	2b02      	cmp	r3, #2
 80048c2:	dc10      	bgt.n	80048e6 <set_int+0x7a>
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d002      	beq.n	80048ce <set_int+0x62>
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	d004      	beq.n	80048d6 <set_int+0x6a>
		break;
	case SI5351_CLK2:
		clk2_int_mode = enable;
		break;
	default:
		break;
 80048cc:	e00b      	b.n	80048e6 <set_int+0x7a>
		clk0_int_mode = enable;
 80048ce:	4a08      	ldr	r2, [pc, #32]	; (80048f0 <set_int+0x84>)
 80048d0:	79bb      	ldrb	r3, [r7, #6]
 80048d2:	7013      	strb	r3, [r2, #0]
		break;
 80048d4:	e008      	b.n	80048e8 <set_int+0x7c>
		clk1_int_mode = enable;
 80048d6:	4a07      	ldr	r2, [pc, #28]	; (80048f4 <set_int+0x88>)
 80048d8:	79bb      	ldrb	r3, [r7, #6]
 80048da:	7013      	strb	r3, [r2, #0]
		break;
 80048dc:	e004      	b.n	80048e8 <set_int+0x7c>
		clk2_int_mode = enable;
 80048de:	4a06      	ldr	r2, [pc, #24]	; (80048f8 <set_int+0x8c>)
 80048e0:	79bb      	ldrb	r3, [r7, #6]
 80048e2:	7013      	strb	r3, [r2, #0]
		break;
 80048e4:	e000      	b.n	80048e8 <set_int+0x7c>
		break;
 80048e6:	bf00      	nop
	}
}
 80048e8:	bf00      	nop
 80048ea:	3710      	adds	r7, #16
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}
 80048f0:	20000559 	.word	0x20000559
 80048f4:	20000558 	.word	0x20000558
 80048f8:	20000529 	.word	0x20000529

080048fc <ms_div>:

void ms_div(enum si5351_clock clk, uint8_t r_div, uint8_t div_by_4)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b084      	sub	sp, #16
 8004900:	af00      	add	r7, sp, #0
 8004902:	4603      	mov	r3, r0
 8004904:	71fb      	strb	r3, [r7, #7]
 8004906:	460b      	mov	r3, r1
 8004908:	71bb      	strb	r3, [r7, #6]
 800490a:	4613      	mov	r3, r2
 800490c:	717b      	strb	r3, [r7, #5]
	uint8_t reg_val, reg_addr;

	switch(clk)
 800490e:	79fb      	ldrb	r3, [r7, #7]
 8004910:	2b07      	cmp	r3, #7
 8004912:	d84f      	bhi.n	80049b4 <ms_div+0xb8>
 8004914:	a201      	add	r2, pc, #4	; (adr r2, 800491c <ms_div+0x20>)
 8004916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800491a:	bf00      	nop
 800491c:	0800493d 	.word	0x0800493d
 8004920:	08004943 	.word	0x08004943
 8004924:	08004949 	.word	0x08004949
 8004928:	0800494f 	.word	0x0800494f
 800492c:	08004955 	.word	0x08004955
 8004930:	0800495b 	.word	0x0800495b
 8004934:	080049b5 	.word	0x080049b5
 8004938:	080049b5 	.word	0x080049b5
	{
		case SI5351_CLK0:
			reg_addr = SI5351_CLK0_PARAMETERS + 2;
 800493c:	232c      	movs	r3, #44	; 0x2c
 800493e:	73fb      	strb	r3, [r7, #15]
			break;
 8004940:	e00e      	b.n	8004960 <ms_div+0x64>
		case SI5351_CLK1:
			reg_addr = SI5351_CLK1_PARAMETERS + 2;
 8004942:	2334      	movs	r3, #52	; 0x34
 8004944:	73fb      	strb	r3, [r7, #15]
			break;
 8004946:	e00b      	b.n	8004960 <ms_div+0x64>
		case SI5351_CLK2:
			reg_addr = SI5351_CLK2_PARAMETERS + 2;
 8004948:	233c      	movs	r3, #60	; 0x3c
 800494a:	73fb      	strb	r3, [r7, #15]
			break;
 800494c:	e008      	b.n	8004960 <ms_div+0x64>
		case SI5351_CLK3:
			reg_addr = SI5351_CLK3_PARAMETERS + 2;
 800494e:	2344      	movs	r3, #68	; 0x44
 8004950:	73fb      	strb	r3, [r7, #15]
			break;
 8004952:	e005      	b.n	8004960 <ms_div+0x64>
		case SI5351_CLK4:
			reg_addr = SI5351_CLK4_PARAMETERS + 2;
 8004954:	234c      	movs	r3, #76	; 0x4c
 8004956:	73fb      	strb	r3, [r7, #15]
			break;
 8004958:	e002      	b.n	8004960 <ms_div+0x64>
		case SI5351_CLK5:
			reg_addr = SI5351_CLK5_PARAMETERS + 2;
 800495a:	2354      	movs	r3, #84	; 0x54
 800495c:	73fb      	strb	r3, [r7, #15]
			break;
 800495e:	bf00      	nop
		default:
			return;
	}

	//reg_val = si5351_read(reg_addr);
	si5351_read8(reg_addr, &reg_val);
 8004960:	f107 020e 	add.w	r2, r7, #14
 8004964:	7bfb      	ldrb	r3, [r7, #15]
 8004966:	4611      	mov	r1, r2
 8004968:	4618      	mov	r0, r3
 800496a:	f000 f949 	bl	8004c00 <si5351_read8>

	// Clear the relevant bits
	reg_val &= ~(0x7c);
 800496e:	7bbb      	ldrb	r3, [r7, #14]
 8004970:	f023 037c 	bic.w	r3, r3, #124	; 0x7c
 8004974:	b2db      	uxtb	r3, r3
 8004976:	73bb      	strb	r3, [r7, #14]

	if(div_by_4 == 0)
 8004978:	797b      	ldrb	r3, [r7, #5]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d105      	bne.n	800498a <ms_div+0x8e>
	{
		reg_val &= ~(SI5351_OUTPUT_CLK_DIVBY4);
 800497e:	7bbb      	ldrb	r3, [r7, #14]
 8004980:	f023 030c 	bic.w	r3, r3, #12
 8004984:	b2db      	uxtb	r3, r3
 8004986:	73bb      	strb	r3, [r7, #14]
 8004988:	e004      	b.n	8004994 <ms_div+0x98>
	}
	else
	{
		reg_val |= (SI5351_OUTPUT_CLK_DIVBY4);
 800498a:	7bbb      	ldrb	r3, [r7, #14]
 800498c:	f043 030c 	orr.w	r3, r3, #12
 8004990:	b2db      	uxtb	r3, r3
 8004992:	73bb      	strb	r3, [r7, #14]
	}

	reg_val |= (r_div << SI5351_OUTPUT_CLK_DIV_SHIFT);
 8004994:	79bb      	ldrb	r3, [r7, #6]
 8004996:	011b      	lsls	r3, r3, #4
 8004998:	b25a      	sxtb	r2, r3
 800499a:	7bbb      	ldrb	r3, [r7, #14]
 800499c:	b25b      	sxtb	r3, r3
 800499e:	4313      	orrs	r3, r2
 80049a0:	b25b      	sxtb	r3, r3
 80049a2:	b2db      	uxtb	r3, r3
 80049a4:	73bb      	strb	r3, [r7, #14]

	//si5351_write(reg_addr, reg_val);
	si5351_write8(reg_addr, reg_val);
 80049a6:	7bba      	ldrb	r2, [r7, #14]
 80049a8:	7bfb      	ldrb	r3, [r7, #15]
 80049aa:	4611      	mov	r1, r2
 80049ac:	4618      	mov	r0, r3
 80049ae:	f000 f8fd 	bl	8004bac <si5351_write8>
 80049b2:	e000      	b.n	80049b6 <ms_div+0xba>
			return;
 80049b4:	bf00      	nop
}
 80049b6:	3710      	adds	r7, #16
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bd80      	pop	{r7, pc}

080049bc <set_ms_source>:
 *     (use the si5351_pll enum)
 *
 * Set the desired PLL source for a multisynth.
 */
void set_ms_source(enum si5351_clock clk, enum si5351_pll pll)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b084      	sub	sp, #16
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	4603      	mov	r3, r0
 80049c4:	460a      	mov	r2, r1
 80049c6:	71fb      	strb	r3, [r7, #7]
 80049c8:	4613      	mov	r3, r2
 80049ca:	71bb      	strb	r3, [r7, #6]
	uint8_t reg_val;

	//reg_val = si5351_read(SI5351_CLK0_CTRL + (uint8_t)clk);
	si5351_read8((SI5351_CLK0_CTRL + (uint8_t)clk), &reg_val);
 80049cc:	79fb      	ldrb	r3, [r7, #7]
 80049ce:	3310      	adds	r3, #16
 80049d0:	b2db      	uxtb	r3, r3
 80049d2:	f107 020f 	add.w	r2, r7, #15
 80049d6:	4611      	mov	r1, r2
 80049d8:	4618      	mov	r0, r3
 80049da:	f000 f911 	bl	8004c00 <si5351_read8>

	if(pll == SI5351_PLLA)
 80049de:	79bb      	ldrb	r3, [r7, #6]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d105      	bne.n	80049f0 <set_ms_source+0x34>
	{
		reg_val &= ~(SI5351_CLK_PLL_SELECT);
 80049e4:	7bfb      	ldrb	r3, [r7, #15]
 80049e6:	f023 0320 	bic.w	r3, r3, #32
 80049ea:	b2db      	uxtb	r3, r3
 80049ec:	73fb      	strb	r3, [r7, #15]
 80049ee:	e007      	b.n	8004a00 <set_ms_source+0x44>
	}
	else if(pll == SI5351_PLLB)
 80049f0:	79bb      	ldrb	r3, [r7, #6]
 80049f2:	2b01      	cmp	r3, #1
 80049f4:	d104      	bne.n	8004a00 <set_ms_source+0x44>
	{
		reg_val |= SI5351_CLK_PLL_SELECT;
 80049f6:	7bfb      	ldrb	r3, [r7, #15]
 80049f8:	f043 0320 	orr.w	r3, r3, #32
 80049fc:	b2db      	uxtb	r3, r3
 80049fe:	73fb      	strb	r3, [r7, #15]
	}

	//si5351_write(SI5351_CLK0_CTRL + (uint8_t)clk, reg_val);
	si5351_write8(SI5351_CLK0_CTRL + (uint8_t)clk, reg_val);
 8004a00:	79fb      	ldrb	r3, [r7, #7]
 8004a02:	3310      	adds	r3, #16
 8004a04:	b2db      	uxtb	r3, r3
 8004a06:	7bfa      	ldrb	r2, [r7, #15]
 8004a08:	4611      	mov	r1, r2
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	f000 f8ce 	bl	8004bac <si5351_write8>
}
 8004a10:	bf00      	nop
 8004a12:	3710      	adds	r7, #16
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}

08004a18 <si5351_write_bulk>:


uint8_t si5351_write_bulk(uint8_t addr, uint8_t bytes, uint8_t *data)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b088      	sub	sp, #32
 8004a1c:	af04      	add	r7, sp, #16
 8004a1e:	4603      	mov	r3, r0
 8004a20:	603a      	str	r2, [r7, #0]
 8004a22:	71fb      	strb	r3, [r7, #7]
 8004a24:	460b      	mov	r3, r1
 8004a26:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef status = HAL_OK;
 8004a28:	2300      	movs	r3, #0
 8004a2a:	73fb      	strb	r3, [r7, #15]

	while (HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t)(SI5351_ADDRESS<<1), 3, 100) != HAL_OK) { }
 8004a2c:	bf00      	nop
 8004a2e:	2364      	movs	r3, #100	; 0x64
 8004a30:	2203      	movs	r2, #3
 8004a32:	21c0      	movs	r1, #192	; 0xc0
 8004a34:	480d      	ldr	r0, [pc, #52]	; (8004a6c <si5351_write_bulk+0x54>)
 8004a36:	f7fd fb5f 	bl	80020f8 <HAL_I2C_IsDeviceReady>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d1f6      	bne.n	8004a2e <si5351_write_bulk+0x16>

    status = HAL_I2C_Mem_Write(&hi2c1,							// i2c handle
 8004a40:	79fb      	ldrb	r3, [r7, #7]
 8004a42:	b29a      	uxth	r2, r3
 8004a44:	79bb      	ldrb	r3, [r7, #6]
 8004a46:	b29b      	uxth	r3, r3
 8004a48:	2164      	movs	r1, #100	; 0x64
 8004a4a:	9102      	str	r1, [sp, #8]
 8004a4c:	9301      	str	r3, [sp, #4]
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	9300      	str	r3, [sp, #0]
 8004a52:	2301      	movs	r3, #1
 8004a54:	21c0      	movs	r1, #192	; 0xc0
 8004a56:	4805      	ldr	r0, [pc, #20]	; (8004a6c <si5351_write_bulk+0x54>)
 8004a58:	f7fc ffec 	bl	8001a34 <HAL_I2C_Mem_Write>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	73fb      	strb	r3, [r7, #15]
							  addr,								// register address
							  I2C_MEMADD_SIZE_8BIT,				// si5351 uses 8bit register addresses
							  data,								// write returned data to this variable
							  bytes,							// how many bytes to expect returned
							  100);								// timeout
    return 0;
 8004a60:	2300      	movs	r3, #0
}
 8004a62:	4618      	mov	r0, r3
 8004a64:	3710      	adds	r7, #16
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bd80      	pop	{r7, pc}
 8004a6a:	bf00      	nop
 8004a6c:	20000464 	.word	0x20000464

08004a70 <Si5351_drive_strength>:
 *   (use the si5351_clock enum)
 * drive - Desired drive level
 *   (use the si5351_drive enum)
 */
void Si5351_drive_strength(enum si5351_clock clk, enum si5351_drive drive)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b084      	sub	sp, #16
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	4603      	mov	r3, r0
 8004a78:	460a      	mov	r2, r1
 8004a7a:	71fb      	strb	r3, [r7, #7]
 8004a7c:	4613      	mov	r3, r2
 8004a7e:	71bb      	strb	r3, [r7, #6]
  uint8_t reg_val;
  const uint8_t mask = 0x03;
 8004a80:	2303      	movs	r3, #3
 8004a82:	73fb      	strb	r3, [r7, #15]

  //reg_val = si5351_read(SI5351_CLK0_CTRL + (uint8_t)clk);
  si5351_read8((SI5351_CLK0_CTRL + (uint8_t)clk), &reg_val);
 8004a84:	79fb      	ldrb	r3, [r7, #7]
 8004a86:	3310      	adds	r3, #16
 8004a88:	b2db      	uxtb	r3, r3
 8004a8a:	f107 020e 	add.w	r2, r7, #14
 8004a8e:	4611      	mov	r1, r2
 8004a90:	4618      	mov	r0, r3
 8004a92:	f000 f8b5 	bl	8004c00 <si5351_read8>
  reg_val &= ~(mask);
 8004a96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a9a:	43db      	mvns	r3, r3
 8004a9c:	b25a      	sxtb	r2, r3
 8004a9e:	7bbb      	ldrb	r3, [r7, #14]
 8004aa0:	b25b      	sxtb	r3, r3
 8004aa2:	4013      	ands	r3, r2
 8004aa4:	b25b      	sxtb	r3, r3
 8004aa6:	b2db      	uxtb	r3, r3
 8004aa8:	73bb      	strb	r3, [r7, #14]

  switch(drive)
 8004aaa:	79bb      	ldrb	r3, [r7, #6]
 8004aac:	2b03      	cmp	r3, #3
 8004aae:	d820      	bhi.n	8004af2 <Si5351_drive_strength+0x82>
 8004ab0:	a201      	add	r2, pc, #4	; (adr r2, 8004ab8 <Si5351_drive_strength+0x48>)
 8004ab2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ab6:	bf00      	nop
 8004ab8:	08004ac9 	.word	0x08004ac9
 8004abc:	08004acf 	.word	0x08004acf
 8004ac0:	08004adb 	.word	0x08004adb
 8004ac4:	08004ae7 	.word	0x08004ae7
  {
  case SI5351_DRIVE_2MA:
    reg_val |= 0x00;
 8004ac8:	7bbb      	ldrb	r3, [r7, #14]
 8004aca:	73bb      	strb	r3, [r7, #14]
    break;
 8004acc:	e012      	b.n	8004af4 <Si5351_drive_strength+0x84>
  case SI5351_DRIVE_4MA:
   reg_val |= 0x01;
 8004ace:	7bbb      	ldrb	r3, [r7, #14]
 8004ad0:	f043 0301 	orr.w	r3, r3, #1
 8004ad4:	b2db      	uxtb	r3, r3
 8004ad6:	73bb      	strb	r3, [r7, #14]
    break;
 8004ad8:	e00c      	b.n	8004af4 <Si5351_drive_strength+0x84>
  case SI5351_DRIVE_6MA:
    reg_val |= 0x02;
 8004ada:	7bbb      	ldrb	r3, [r7, #14]
 8004adc:	f043 0302 	orr.w	r3, r3, #2
 8004ae0:	b2db      	uxtb	r3, r3
 8004ae2:	73bb      	strb	r3, [r7, #14]
    break;
 8004ae4:	e006      	b.n	8004af4 <Si5351_drive_strength+0x84>
  case SI5351_DRIVE_8MA:
    reg_val |= 0x03;
 8004ae6:	7bbb      	ldrb	r3, [r7, #14]
 8004ae8:	f043 0303 	orr.w	r3, r3, #3
 8004aec:	b2db      	uxtb	r3, r3
 8004aee:	73bb      	strb	r3, [r7, #14]
    break;
 8004af0:	e000      	b.n	8004af4 <Si5351_drive_strength+0x84>
  default:
    break;
 8004af2:	bf00      	nop
  }

  si5351_write8(SI5351_CLK0_CTRL + (uint8_t)clk, reg_val);
 8004af4:	79fb      	ldrb	r3, [r7, #7]
 8004af6:	3310      	adds	r3, #16
 8004af8:	b2db      	uxtb	r3, r3
 8004afa:	7bba      	ldrb	r2, [r7, #14]
 8004afc:	4611      	mov	r1, r2
 8004afe:	4618      	mov	r0, r3
 8004b00:	f000 f854 	bl	8004bac <si5351_write8>
}
 8004b04:	bf00      	nop
 8004b06:	3710      	adds	r7, #16
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bd80      	pop	{r7, pc}

08004b0c <Si5351_set_state_out>:
 * clk - Clock output
 *   (use the si5351_clock enum)
 * out_state - output state
 *   (use the enum si5351_out_state)
 */
void Si5351_set_state_out(enum si5351_clock clock_out, enum si5351_out_state out_state) {
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b084      	sub	sp, #16
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	4603      	mov	r3, r0
 8004b14:	460a      	mov	r2, r1
 8004b16:	71fb      	strb	r3, [r7, #7]
 8004b18:	4613      	mov	r3, r2
 8004b1a:	71bb      	strb	r3, [r7, #6]
	uint8_t reg_val;

	si5351_read8((SI5351_OUTPUT_ENABLE_CTRL), &reg_val);
 8004b1c:	f107 030f 	add.w	r3, r7, #15
 8004b20:	4619      	mov	r1, r3
 8004b22:	2003      	movs	r0, #3
 8004b24:	f000 f86c 	bl	8004c00 <si5351_read8>

	switch(clock_out) {
 8004b28:	79fb      	ldrb	r3, [r7, #7]
 8004b2a:	2b02      	cmp	r3, #2
 8004b2c:	d024      	beq.n	8004b78 <Si5351_set_state_out+0x6c>
 8004b2e:	2b02      	cmp	r3, #2
 8004b30:	dc31      	bgt.n	8004b96 <Si5351_set_state_out+0x8a>
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d002      	beq.n	8004b3c <Si5351_set_state_out+0x30>
 8004b36:	2b01      	cmp	r3, #1
 8004b38:	d00f      	beq.n	8004b5a <Si5351_set_state_out+0x4e>
		break;
	case SI5351_CLK2:
		out_state == SI5351_OUT_ENABLE ? (reg_val &= ~(1 << 2)) : (reg_val |= (1 << 2));
		break;
	default:
		break;
 8004b3a:	e02c      	b.n	8004b96 <Si5351_set_state_out+0x8a>
	    out_state == SI5351_OUT_ENABLE ? (reg_val &= ~(1 << 0)) : (reg_val |= (1 << 0));
 8004b3c:	79bb      	ldrb	r3, [r7, #6]
 8004b3e:	2b01      	cmp	r3, #1
 8004b40:	d105      	bne.n	8004b4e <Si5351_set_state_out+0x42>
 8004b42:	7bfb      	ldrb	r3, [r7, #15]
 8004b44:	f023 0301 	bic.w	r3, r3, #1
 8004b48:	b2db      	uxtb	r3, r3
 8004b4a:	73fb      	strb	r3, [r7, #15]
		break;
 8004b4c:	e024      	b.n	8004b98 <Si5351_set_state_out+0x8c>
	    out_state == SI5351_OUT_ENABLE ? (reg_val &= ~(1 << 0)) : (reg_val |= (1 << 0));
 8004b4e:	7bfb      	ldrb	r3, [r7, #15]
 8004b50:	f043 0301 	orr.w	r3, r3, #1
 8004b54:	b2db      	uxtb	r3, r3
 8004b56:	73fb      	strb	r3, [r7, #15]
		break;
 8004b58:	e01e      	b.n	8004b98 <Si5351_set_state_out+0x8c>
		out_state == SI5351_OUT_ENABLE ? (reg_val &= ~(1 << 1)) : (reg_val |= (1 << 1));
 8004b5a:	79bb      	ldrb	r3, [r7, #6]
 8004b5c:	2b01      	cmp	r3, #1
 8004b5e:	d105      	bne.n	8004b6c <Si5351_set_state_out+0x60>
 8004b60:	7bfb      	ldrb	r3, [r7, #15]
 8004b62:	f023 0302 	bic.w	r3, r3, #2
 8004b66:	b2db      	uxtb	r3, r3
 8004b68:	73fb      	strb	r3, [r7, #15]
		break;
 8004b6a:	e015      	b.n	8004b98 <Si5351_set_state_out+0x8c>
		out_state == SI5351_OUT_ENABLE ? (reg_val &= ~(1 << 1)) : (reg_val |= (1 << 1));
 8004b6c:	7bfb      	ldrb	r3, [r7, #15]
 8004b6e:	f043 0302 	orr.w	r3, r3, #2
 8004b72:	b2db      	uxtb	r3, r3
 8004b74:	73fb      	strb	r3, [r7, #15]
		break;
 8004b76:	e00f      	b.n	8004b98 <Si5351_set_state_out+0x8c>
		out_state == SI5351_OUT_ENABLE ? (reg_val &= ~(1 << 2)) : (reg_val |= (1 << 2));
 8004b78:	79bb      	ldrb	r3, [r7, #6]
 8004b7a:	2b01      	cmp	r3, #1
 8004b7c:	d105      	bne.n	8004b8a <Si5351_set_state_out+0x7e>
 8004b7e:	7bfb      	ldrb	r3, [r7, #15]
 8004b80:	f023 0304 	bic.w	r3, r3, #4
 8004b84:	b2db      	uxtb	r3, r3
 8004b86:	73fb      	strb	r3, [r7, #15]
		break;
 8004b88:	e006      	b.n	8004b98 <Si5351_set_state_out+0x8c>
		out_state == SI5351_OUT_ENABLE ? (reg_val &= ~(1 << 2)) : (reg_val |= (1 << 2));
 8004b8a:	7bfb      	ldrb	r3, [r7, #15]
 8004b8c:	f043 0304 	orr.w	r3, r3, #4
 8004b90:	b2db      	uxtb	r3, r3
 8004b92:	73fb      	strb	r3, [r7, #15]
		break;
 8004b94:	e000      	b.n	8004b98 <Si5351_set_state_out+0x8c>
		break;
 8004b96:	bf00      	nop
	}

	si5351_write8(SI5351_OUTPUT_ENABLE_CTRL, reg_val);
 8004b98:	7bfb      	ldrb	r3, [r7, #15]
 8004b9a:	4619      	mov	r1, r3
 8004b9c:	2003      	movs	r0, #3
 8004b9e:	f000 f805 	bl	8004bac <si5351_write8>
}
 8004ba2:	bf00      	nop
 8004ba4:	3710      	adds	r7, #16
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd80      	pop	{r7, pc}
	...

08004bac <si5351_write8>:
/*!
    @brief  Writes a register and an 8 bit value over I2C
*/
/**************************************************************************/
err_t si5351_write8 (uint8_t reg, uint8_t value)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b088      	sub	sp, #32
 8004bb0:	af04      	add	r7, sp, #16
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	460a      	mov	r2, r1
 8004bb6:	71fb      	strb	r3, [r7, #7]
 8004bb8:	4613      	mov	r3, r2
 8004bba:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef status = HAL_OK;
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	73fb      	strb	r3, [r7, #15]
  
	while (HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t)(SI5351_ADDRESS<<1), 3, 100) != HAL_OK) { }
 8004bc0:	bf00      	nop
 8004bc2:	2364      	movs	r3, #100	; 0x64
 8004bc4:	2203      	movs	r2, #3
 8004bc6:	21c0      	movs	r1, #192	; 0xc0
 8004bc8:	480c      	ldr	r0, [pc, #48]	; (8004bfc <si5351_write8+0x50>)
 8004bca:	f7fd fa95 	bl	80020f8 <HAL_I2C_IsDeviceReady>
 8004bce:	4603      	mov	r3, r0
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d1f6      	bne.n	8004bc2 <si5351_write8+0x16>

    status = HAL_I2C_Mem_Write(&hi2c1,							// i2c handle
 8004bd4:	79fb      	ldrb	r3, [r7, #7]
 8004bd6:	b29a      	uxth	r2, r3
 8004bd8:	2364      	movs	r3, #100	; 0x64
 8004bda:	9302      	str	r3, [sp, #8]
 8004bdc:	2301      	movs	r3, #1
 8004bde:	9301      	str	r3, [sp, #4]
 8004be0:	1dbb      	adds	r3, r7, #6
 8004be2:	9300      	str	r3, [sp, #0]
 8004be4:	2301      	movs	r3, #1
 8004be6:	21c0      	movs	r1, #192	; 0xc0
 8004be8:	4804      	ldr	r0, [pc, #16]	; (8004bfc <si5351_write8+0x50>)
 8004bea:	f7fc ff23 	bl	8001a34 <HAL_I2C_Mem_Write>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	73fb      	strb	r3, [r7, #15]
							  I2C_MEMADD_SIZE_8BIT,				// si5351 uses 8bit register addresses
							  (uint8_t*)(&value),				// write returned data to this variable
							  1,								// how many bytes to expect returned
							  100);								// timeout

  return ERROR_NONE;
 8004bf2:	2300      	movs	r3, #0
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	3710      	adds	r7, #16
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd80      	pop	{r7, pc}
 8004bfc:	20000464 	.word	0x20000464

08004c00 <si5351_read8>:
/*!
    @brief  Reads an 8 bit value over I2C
*/
/**************************************************************************/
err_t si5351_read8(uint8_t reg, uint8_t *value)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b088      	sub	sp, #32
 8004c04:	af04      	add	r7, sp, #16
 8004c06:	4603      	mov	r3, r0
 8004c08:	6039      	str	r1, [r7, #0]
 8004c0a:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef status = HAL_OK;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	73fb      	strb	r3, [r7, #15]

	while (HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t)(SI5351_ADDRESS<<1), 3, 100) != HAL_OK) { }
 8004c10:	bf00      	nop
 8004c12:	2364      	movs	r3, #100	; 0x64
 8004c14:	2203      	movs	r2, #3
 8004c16:	21c0      	movs	r1, #192	; 0xc0
 8004c18:	480c      	ldr	r0, [pc, #48]	; (8004c4c <si5351_read8+0x4c>)
 8004c1a:	f7fd fa6d 	bl	80020f8 <HAL_I2C_IsDeviceReady>
 8004c1e:	4603      	mov	r3, r0
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d1f6      	bne.n	8004c12 <si5351_read8+0x12>

    status = HAL_I2C_Mem_Read(&hi2c1,							// i2c handle
 8004c24:	79fb      	ldrb	r3, [r7, #7]
 8004c26:	b29a      	uxth	r2, r3
 8004c28:	2364      	movs	r3, #100	; 0x64
 8004c2a:	9302      	str	r3, [sp, #8]
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	9301      	str	r3, [sp, #4]
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	9300      	str	r3, [sp, #0]
 8004c34:	2301      	movs	r3, #1
 8004c36:	21c0      	movs	r1, #192	; 0xc0
 8004c38:	4804      	ldr	r0, [pc, #16]	; (8004c4c <si5351_read8+0x4c>)
 8004c3a:	f7fc fff5 	bl	8001c28 <HAL_I2C_Mem_Read>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	73fb      	strb	r3, [r7, #15]
							  I2C_MEMADD_SIZE_8BIT,				// si5351 uses 8bit register addresses
							  value,				// write returned data to this variable
							  1,								// how many bytes to expect returned
							  100);								// timeout

  return ERROR_NONE;
 8004c42:	2300      	movs	r3, #0
}
 8004c44:	4618      	mov	r0, r3
 8004c46:	3710      	adds	r7, #16
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bd80      	pop	{r7, pc}
 8004c4c:	20000464 	.word	0x20000464

08004c50 <__libc_init_array>:
 8004c50:	b570      	push	{r4, r5, r6, lr}
 8004c52:	2600      	movs	r6, #0
 8004c54:	4d0c      	ldr	r5, [pc, #48]	; (8004c88 <__libc_init_array+0x38>)
 8004c56:	4c0d      	ldr	r4, [pc, #52]	; (8004c8c <__libc_init_array+0x3c>)
 8004c58:	1b64      	subs	r4, r4, r5
 8004c5a:	10a4      	asrs	r4, r4, #2
 8004c5c:	42a6      	cmp	r6, r4
 8004c5e:	d109      	bne.n	8004c74 <__libc_init_array+0x24>
 8004c60:	f000 f87e 	bl	8004d60 <_init>
 8004c64:	2600      	movs	r6, #0
 8004c66:	4d0a      	ldr	r5, [pc, #40]	; (8004c90 <__libc_init_array+0x40>)
 8004c68:	4c0a      	ldr	r4, [pc, #40]	; (8004c94 <__libc_init_array+0x44>)
 8004c6a:	1b64      	subs	r4, r4, r5
 8004c6c:	10a4      	asrs	r4, r4, #2
 8004c6e:	42a6      	cmp	r6, r4
 8004c70:	d105      	bne.n	8004c7e <__libc_init_array+0x2e>
 8004c72:	bd70      	pop	{r4, r5, r6, pc}
 8004c74:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c78:	4798      	blx	r3
 8004c7a:	3601      	adds	r6, #1
 8004c7c:	e7ee      	b.n	8004c5c <__libc_init_array+0xc>
 8004c7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c82:	4798      	blx	r3
 8004c84:	3601      	adds	r6, #1
 8004c86:	e7f2      	b.n	8004c6e <__libc_init_array+0x1e>
 8004c88:	08006ea0 	.word	0x08006ea0
 8004c8c:	08006ea0 	.word	0x08006ea0
 8004c90:	08006ea0 	.word	0x08006ea0
 8004c94:	08006ea4 	.word	0x08006ea4

08004c98 <__itoa>:
 8004c98:	1e93      	subs	r3, r2, #2
 8004c9a:	2b22      	cmp	r3, #34	; 0x22
 8004c9c:	b510      	push	{r4, lr}
 8004c9e:	460c      	mov	r4, r1
 8004ca0:	d904      	bls.n	8004cac <__itoa+0x14>
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	461c      	mov	r4, r3
 8004ca6:	700b      	strb	r3, [r1, #0]
 8004ca8:	4620      	mov	r0, r4
 8004caa:	bd10      	pop	{r4, pc}
 8004cac:	2a0a      	cmp	r2, #10
 8004cae:	d109      	bne.n	8004cc4 <__itoa+0x2c>
 8004cb0:	2800      	cmp	r0, #0
 8004cb2:	da07      	bge.n	8004cc4 <__itoa+0x2c>
 8004cb4:	232d      	movs	r3, #45	; 0x2d
 8004cb6:	700b      	strb	r3, [r1, #0]
 8004cb8:	2101      	movs	r1, #1
 8004cba:	4240      	negs	r0, r0
 8004cbc:	4421      	add	r1, r4
 8004cbe:	f000 f80d 	bl	8004cdc <__utoa>
 8004cc2:	e7f1      	b.n	8004ca8 <__itoa+0x10>
 8004cc4:	2100      	movs	r1, #0
 8004cc6:	e7f9      	b.n	8004cbc <__itoa+0x24>

08004cc8 <itoa>:
 8004cc8:	f7ff bfe6 	b.w	8004c98 <__itoa>

08004ccc <memset>:
 8004ccc:	4603      	mov	r3, r0
 8004cce:	4402      	add	r2, r0
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d100      	bne.n	8004cd6 <memset+0xa>
 8004cd4:	4770      	bx	lr
 8004cd6:	f803 1b01 	strb.w	r1, [r3], #1
 8004cda:	e7f9      	b.n	8004cd0 <memset+0x4>

08004cdc <__utoa>:
 8004cdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004cde:	b08b      	sub	sp, #44	; 0x2c
 8004ce0:	4605      	mov	r5, r0
 8004ce2:	460b      	mov	r3, r1
 8004ce4:	466e      	mov	r6, sp
 8004ce6:	4c1d      	ldr	r4, [pc, #116]	; (8004d5c <__utoa+0x80>)
 8004ce8:	f104 0c20 	add.w	ip, r4, #32
 8004cec:	4637      	mov	r7, r6
 8004cee:	6820      	ldr	r0, [r4, #0]
 8004cf0:	6861      	ldr	r1, [r4, #4]
 8004cf2:	3408      	adds	r4, #8
 8004cf4:	c703      	stmia	r7!, {r0, r1}
 8004cf6:	4564      	cmp	r4, ip
 8004cf8:	463e      	mov	r6, r7
 8004cfa:	d1f7      	bne.n	8004cec <__utoa+0x10>
 8004cfc:	7921      	ldrb	r1, [r4, #4]
 8004cfe:	6820      	ldr	r0, [r4, #0]
 8004d00:	7139      	strb	r1, [r7, #4]
 8004d02:	1e91      	subs	r1, r2, #2
 8004d04:	2922      	cmp	r1, #34	; 0x22
 8004d06:	6038      	str	r0, [r7, #0]
 8004d08:	f04f 0100 	mov.w	r1, #0
 8004d0c:	d904      	bls.n	8004d18 <__utoa+0x3c>
 8004d0e:	7019      	strb	r1, [r3, #0]
 8004d10:	460b      	mov	r3, r1
 8004d12:	4618      	mov	r0, r3
 8004d14:	b00b      	add	sp, #44	; 0x2c
 8004d16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d18:	1e58      	subs	r0, r3, #1
 8004d1a:	4684      	mov	ip, r0
 8004d1c:	fbb5 f7f2 	udiv	r7, r5, r2
 8004d20:	fb02 5617 	mls	r6, r2, r7, r5
 8004d24:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 8004d28:	4476      	add	r6, lr
 8004d2a:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8004d2e:	460c      	mov	r4, r1
 8004d30:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8004d34:	462e      	mov	r6, r5
 8004d36:	42b2      	cmp	r2, r6
 8004d38:	463d      	mov	r5, r7
 8004d3a:	f101 0101 	add.w	r1, r1, #1
 8004d3e:	d9ed      	bls.n	8004d1c <__utoa+0x40>
 8004d40:	2200      	movs	r2, #0
 8004d42:	545a      	strb	r2, [r3, r1]
 8004d44:	1919      	adds	r1, r3, r4
 8004d46:	1aa5      	subs	r5, r4, r2
 8004d48:	42aa      	cmp	r2, r5
 8004d4a:	dae2      	bge.n	8004d12 <__utoa+0x36>
 8004d4c:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8004d50:	780e      	ldrb	r6, [r1, #0]
 8004d52:	3201      	adds	r2, #1
 8004d54:	7006      	strb	r6, [r0, #0]
 8004d56:	f801 5901 	strb.w	r5, [r1], #-1
 8004d5a:	e7f4      	b.n	8004d46 <__utoa+0x6a>
 8004d5c:	08006e70 	.word	0x08006e70

08004d60 <_init>:
 8004d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d62:	bf00      	nop
 8004d64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d66:	bc08      	pop	{r3}
 8004d68:	469e      	mov	lr, r3
 8004d6a:	4770      	bx	lr

08004d6c <_fini>:
 8004d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d6e:	bf00      	nop
 8004d70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d72:	bc08      	pop	{r3}
 8004d74:	469e      	mov	lr, r3
 8004d76:	4770      	bx	lr
